// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

namespace Persistence.Contexts
{
    [DbContext(typeof(CustomDbContext))]
    [Migration("20210608042144_CreateFirstTables")]
      partial class CustomDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<string>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Home",
                            ClaimValue = "Home",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "BlogCategories",
                            ClaimValue = "BlogCategories",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "BlogCategoriesIndex",
                            ClaimValue = "BlogCategoriesIndex",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "BlogCategoriesCreate",
                            ClaimValue = "BlogCategoriesCreate",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "BlogCategoriesEdit",
                            ClaimValue = "BlogCategoriesEdit",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "BlogCategoriesDelete",
                            ClaimValue = "BlogCategoriesDelete",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Blogs",
                            ClaimValue = "Blogs",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "BlogsIndex",
                            ClaimValue = "BlogsIndex",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "BlogsCreate",
                            ClaimValue = "BlogsCreate",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "BlogsEdit",
                            ClaimValue = "BlogsEdit",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "BlogsDelete",
                            ClaimValue = "BlogsDelete",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "BlogsActive",
                            ClaimValue = "BlogsActive",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "Company",
                            ClaimValue = "Company",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "Menus",
                            ClaimValue = "Menus",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "Products",
                            ClaimValue = "Products",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "ProductsIndex",
                            ClaimValue = "ProductsIndex",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "ProductsCreate",
                            ClaimValue = "ProductsCreate",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "ProductsEdit",
                            ClaimValue = "ProductsEdit",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "ProductsDelete",
                            ClaimValue = "ProductsDelete",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "ProductsActive",
                            ClaimValue = "ProductsActive",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "Sliders",
                            ClaimValue = "Sliders",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "Users",
                            ClaimValue = "Users",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "UsersIndex",
                            ClaimValue = "UsersIndex",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "UsersEdit",
                            ClaimValue = "UsersEdit",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<string>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProviderKey", "LoginProvider");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "5a64e206-d6c0-4386-923f-5104f173e01c",
                            RoleId = "8ce221cd-1b57-4e0b-8781-79524b05fcc5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("WebApplication.Models.Baskets.Basket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuyerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 8, 12, 4, 35, 460, DateTimeKind.Local).AddTicks(5616));

                    b.Property<bool>("IsRemoved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("WebApplication.Models.Baskets.BasketItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BasketId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("InsertTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 8, 12, 4, 35, 465, DateTimeKind.Local).AddTicks(9112));

                    b.Property<bool>("IsRemoved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("WebApplication.Models.Products.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<int?>("PrdAutoCharBarCodeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PrdAutoCharBarcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrdAutoNumBarCodeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PrdAutoNumBarcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrdBarCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrdBarCodeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PrdCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrdColorId")
                        .HasColumnType("int");

                    b.Property<bool?>("PrdCommissionDisable")
                        .HasColumnType("bit");

                    b.Property<double?>("PrdCommissionPercentRate")
                        .HasColumnType("float");

                    b.Property<long>("PrdCrmId")
                        .HasColumnType("bigint");

                    b.Property<string>("PrdDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrdDesign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrdFirstBarcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrdFirstSerial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrdGroupId")
                        .HasColumnType("int");

                    b.Property<bool?>("PrdInactiveInBuy")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrdInactiveInSale")
                        .HasColumnType("bit");

                    b.Property<string>("PrdLatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrdLinkAccPrdCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrdLinkAccPrdId")
                        .HasColumnType("int");

                    b.Property<int?>("PrdMaxQty")
                        .HasColumnType("int");

                    b.Property<int?>("PrdMinQty")
                        .HasColumnType("int");

                    b.Property<string>("PrdModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrdName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrdPrice")
                        .HasColumnType("int");

                    b.Property<string>("PrdSecondBarcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrdSecondSerial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrdShpcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrdShpdescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrdShpdescriptionIi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PrdShphiddenPriceInNoStock")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrdShpisActive")
                        .HasColumnType("bit");

                    b.Property<string>("PrdShpmodel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrdShpotherSupplierId")
                        .HasColumnType("int");

                    b.Property<bool?>("PrdShpselfSupplier")
                        .HasColumnType("bit");

                    b.Property<int?>("PrdShpstockManageTypeId")
                        .HasColumnType("int");

                    b.Property<double?>("PrdShpstockManualyCount")
                        .HasColumnType("float");

                    b.Property<string>("PrdShptitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrdSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrdSleepDay")
                        .HasColumnType("int");

                    b.Property<string>("PrdThirdBarcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrdThirdSerial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrdType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrdUnitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegisterDatePersian")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WebApplication.Models.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("WebApplication.Models.Users.Claims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsHead")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Claims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimName = "داشبورد",
                            ClaimType = "Home",
                            ClaimValue = "Home",
                            IsHead = true
                        },
                        new
                        {
                            Id = 2,
                            ClaimName = "مدیریت دسته بندی بلاگ",
                            ClaimType = "BlogCategories",
                            ClaimValue = "BlogCategories",
                            IsHead = true
                        },
                        new
                        {
                            Id = 3,
                            ClaimName = "مشاهده دسته بندی بلاگ ها",
                            ClaimType = "BlogCategoriesIndex",
                            ClaimValue = "BlogCategoriesIndex",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 4,
                            ClaimName = "ساخت دسته بندی بلاگ",
                            ClaimType = "BlogCategoriesCreate",
                            ClaimValue = "BlogCategoriesCreate",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 5,
                            ClaimName = "ویرایش دسته بندی بلاگ",
                            ClaimType = "BlogCategoriesEdit",
                            ClaimValue = "BlogCategoriesEdit",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 6,
                            ClaimName = "حذف دسته بندی بلاگ",
                            ClaimType = "BlogCategoriesDelete",
                            ClaimValue = "BlogCategoriesDelete",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 7,
                            ClaimName = "مدیریت بلاگ",
                            ClaimType = "Blogs",
                            ClaimValue = "Blogs",
                            IsHead = true
                        },
                        new
                        {
                            Id = 8,
                            ClaimName = "مشاهده بلاگ ها",
                            ClaimType = "BlogsIndex",
                            ClaimValue = "BlogsIndex",
                            ParentId = 7
                        },
                        new
                        {
                            Id = 9,
                            ClaimName = "ساخت بلاگ",
                            ClaimType = "BlogsCreate",
                            ClaimValue = "BlogsCreate",
                            ParentId = 7
                        },
                        new
                        {
                            Id = 10,
                            ClaimName = "ویرایش بلاگ",
                            ClaimType = "BlogsEdit",
                            ClaimValue = "BlogsEdit",
                            ParentId = 7
                        },
                        new
                        {
                            Id = 11,
                            ClaimName = "حذف بلاگ",
                            ClaimType = "BlogsDelete",
                            ClaimValue = "BlogsDelete",
                            ParentId = 7
                        },
                        new
                        {
                            Id = 12,
                            ClaimName = "غیرفعال کردن بلاگ",
                            ClaimType = "BlogsActive",
                            ClaimValue = "BlogsActive",
                            ParentId = 7
                        },
                        new
                        {
                            Id = 13,
                            ClaimName = "مدیریت شرکت ها",
                            ClaimType = "Company",
                            ClaimValue = "Company",
                            IsHead = true
                        },
                        new
                        {
                            Id = 14,
                            ClaimName = "مدیریت منوها",
                            ClaimType = "Menus",
                            ClaimValue = "Menus",
                            IsHead = true
                        },
                        new
                        {
                            Id = 15,
                            ClaimName = "مدیریت محصولات",
                            ClaimType = "Products",
                            ClaimValue = "Products",
                            IsHead = true
                        },
                        new
                        {
                            Id = 16,
                            ClaimName = "نمایش محصولات",
                            ClaimType = "ProductsIndex",
                            ClaimValue = "ProductsIndex",
                            ParentId = 15
                        },
                        new
                        {
                            Id = 17,
                            ClaimName = "ساخت محصول",
                            ClaimType = "ProductsCreate",
                            ClaimValue = "ProductsCreate",
                            ParentId = 15
                        },
                        new
                        {
                            Id = 18,
                            ClaimName = "ویرایش محصول",
                            ClaimType = "ProductsEdit",
                            ClaimValue = "ProductsEdit",
                            ParentId = 15
                        },
                        new
                        {
                            Id = 19,
                            ClaimName = "حذف محصول",
                            ClaimType = "ProductsDelete",
                            ClaimValue = "ProductsDelete",
                            ParentId = 15
                        },
                        new
                        {
                            Id = 20,
                            ClaimName = "غیر فعال کردن محصول",
                            ClaimType = "ProductsActive",
                            ClaimValue = "ProductsActive",
                            ParentId = 15
                        },
                        new
                        {
                            Id = 21,
                            ClaimName = "مدیریت اسلایدرها",
                            ClaimType = "Sliders",
                            ClaimValue = "Sliders",
                            IsHead = true
                        },
                        new
                        {
                            Id = 22,
                            ClaimName = "مدیریت یوزر ها",
                            ClaimType = "Users",
                            ClaimValue = "Users",
                            IsHead = true
                        },
                        new
                        {
                            Id = 23,
                            ClaimName = "نمایش همه یوزر ها",
                            ClaimType = "UsersIndex",
                            ClaimValue = "UsersIndex",
                            ParentId = 22
                        },
                        new
                        {
                            Id = 24,
                            ClaimName = "ویرایش یوزر",
                            ClaimType = "UsersEdit",
                            ClaimValue = "UsersEdit",
                            ParentId = 22
                        });
                });

            modelBuilder.Entity("WebApplication.Models.Users.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<string>");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "8ce221cd-1b57-4e0b-8781-79524b05fcc5",
                            ConcurrencyStamp = "e27bb24c-7f4a-45f7-b35b-bdf0068d9ff4",
                            Name = "SeniorProgrammer",
                            NormalizedName = "SENIORPROGRAMMER",
                            Description = "برنامه نویس"
                        },
                        new
                        {
                            Id = "2bb43ab4-61c4-4435-aa3e-c6ab7b2858d1",
                            ConcurrencyStamp = "7990ad8a-92a8-4cda-918c-b71887047e9e",
                            Name = "User",
                            NormalizedName = "USER",
                            Description = "خریدار"
                        });
                });

            modelBuilder.Entity("WebApplication.Models.Users.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser<string>");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CrmUsersId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 8, 12, 4, 35, 466, DateTimeKind.Local).AddTicks(2334));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RequestToBeOwner")
                        .HasColumnType("bit");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "5a64e206-d6c0-4386-923f-5104f173e01c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5927a97d-ea14-4449-9efa-7d5ab4b957e5",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedUserName = "09129283406",
                            PasswordHash = "AQAAAAEAACcQAAAAEPbSX2kOSigd6t402PCkp70rA2gX/1xlFFBZJ8pgJxtwKbY2eZ5Tp2qHOrecBHXCQw==",
                            PhoneNumber = "09129283405",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "IXN7VEICHYB72KXHBCULEPXFHNZ5U6FS",
                            TwoFactorEnabled = false,
                            UserName = "09129283406",
                            Address = "تهران",
                            CrmUsersId = 61,
                            DataCreated = new DateTime(2021, 6, 8, 12, 4, 35, 466, DateTimeKind.Local).AddTicks(9058),
                            FirstName = "حسین",
                            IsActive = true,
                            LastName = "کرجی",
                            RequestToBeOwner = false
                        });
                });

            modelBuilder.Entity("WebApplication.Models.Baskets.BasketItem", b =>
                {
                    b.HasOne("WebApplication.Models.Baskets.Basket", null)
                        .WithMany("Items")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication.Models.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplication.Models.Baskets.Basket", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
