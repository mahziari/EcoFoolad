using Application.Interfaces.Contexts;
using Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Domain.Entities.IdealCrm;

namespace Persistence.Contexts
{
    public partial class IdealCrmDataBaseContext : DbContext, IIdealCrmDataBaseContext
    {
        public IdealCrmDataBaseContext()
        {
        }

        public IdealCrmDataBaseContext(DbContextOptions<IdealCrmDataBaseContext> options)
            : base(options)
        {
        }

        //ParsaPoolad
        public virtual DbSet<ParsaPooladMenus> ParsaPooladMenus { get; set; }


        //CRM 
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<CityLang> CityLang { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<CountryLang> CountryLang { get; set; }
        public virtual DbSet<CrmAddressing> CrmAddressing { get; set; }
        public virtual DbSet<CrmAddressingType> CrmAddressingType { get; set; }
        public virtual DbSet<CrmBankingAccountType> CrmBankingAccountType { get; set; }
        public virtual DbSet<CrmBankingAccounts> CrmBankingAccounts { get; set; }
        public virtual DbSet<CrmBankingBanks> CrmBankingBanks { get; set; }
        public virtual DbSet<CrmBankingBranches> CrmBankingBranches { get; set; }
        public virtual DbSet<CrmCallBlackList> CrmCallBlackList { get; set; }
        public virtual DbSet<CrmCallHistory> CrmCallHistory { get; set; }
        public virtual DbSet<CrmCallType> CrmCallType { get; set; }
        public virtual DbSet<CrmCallTypeLang> CrmCallTypeLang { get; set; }
        public virtual DbSet<CrmCmsComments> CrmCmsComments { get; set; }
        public virtual DbSet<CrmCmsCommentsLang> CrmCmsCommentsLang { get; set; }
        public virtual DbSet<CrmCmsFiles> CrmCmsFiles { get; set; }
        public virtual DbSet<CrmCmsFilesLang> CrmCmsFilesLang { get; set; }
        public virtual DbSet<CrmCmsGallery> CrmCmsGallery { get; set; }
        public virtual DbSet<CrmCmsGalleryItems> CrmCmsGalleryItems { get; set; }
        public virtual DbSet<CrmCmsGalleryItemsLang> CrmCmsGalleryItemsLang { get; set; }
        public virtual DbSet<CrmCmsGalleryLang> CrmCmsGalleryLang { get; set; }
        public virtual DbSet<CrmCmsLikes> CrmCmsLikes { get; set; }
        public virtual DbSet<CrmCmsMenus> CrmCmsMenus { get; set; }
        public virtual DbSet<CrmCmsMenusLang> CrmCmsMenusLang { get; set; }
        public virtual DbSet<CrmCmsNews> CrmCmsNews { get; set; }
        public virtual DbSet<CrmCmsNewsGroups> CrmCmsNewsGroups { get; set; }
        public virtual DbSet<CrmCmsNewsGroupsLang> CrmCmsNewsGroupsLang { get; set; }
        public virtual DbSet<CrmCmsNewsLang> CrmCmsNewsLang { get; set; }
        public virtual DbSet<CrmCmsObjectTypes> CrmCmsObjectTypes { get; set; }
        public virtual DbSet<CrmCmsPages> CrmCmsPages { get; set; }
        public virtual DbSet<CrmCmsPagesLang> CrmCmsPagesLang { get; set; }
        public virtual DbSet<CrmCompany> CrmCompany { get; set; }
        public virtual DbSet<CrmCompanyForbiddenCity> CrmCompanyForbiddenCity { get; set; }
        public virtual DbSet<CrmCompanyForbiddenCompany> CrmCompanyForbiddenCompany { get; set; }
        public virtual DbSet<CrmCompanyForbiddenDepartment> CrmCompanyForbiddenDepartment { get; set; }
        public virtual DbSet<CrmCompanyForbiddenGroup> CrmCompanyForbiddenGroup { get; set; }
        public virtual DbSet<CrmCompanyForbiddenGroupIv> CrmCompanyForbiddenGroupIv { get; set; }
        public virtual DbSet<CrmCompanyForbiddenProvince> CrmCompanyForbiddenProvince { get; set; }
        public virtual DbSet<CrmCompanyForbiddenSubGroup> CrmCompanyForbiddenSubGroup { get; set; }
        public virtual DbSet<CrmCompanyGroups> CrmCompanyGroups { get; set; }
        public virtual DbSet<CrmCompanyGroupsIi> CrmCompanyGroupsIi { get; set; }
        public virtual DbSet<CrmCompanyGroupsIiLang> CrmCompanyGroupsIiLang { get; set; }
        public virtual DbSet<CrmCompanyGroupsIii> CrmCompanyGroupsIii { get; set; }
        public virtual DbSet<CrmCompanyGroupsIiiLang> CrmCompanyGroupsIiiLang { get; set; }
        public virtual DbSet<CrmCompanyGroupsIv> CrmCompanyGroupsIv { get; set; }
        public virtual DbSet<CrmCompanyGroupsIvLang> CrmCompanyGroupsIvLang { get; set; }
        public virtual DbSet<CrmCompanyGroupsLang> CrmCompanyGroupsLang { get; set; }
        public virtual DbSet<CrmCompanyGroupsMulti> CrmCompanyGroupsMulti { get; set; }
        public virtual DbSet<CrmCompanyGroupsMultiLang> CrmCompanyGroupsMultiLang { get; set; }
        public virtual DbSet<CrmCompanyJustAccessCity> CrmCompanyJustAccessCity { get; set; }
        public virtual DbSet<CrmCompanyJustAccessCompany> CrmCompanyJustAccessCompany { get; set; }
        public virtual DbSet<CrmCompanyJustAccessDepartment> CrmCompanyJustAccessDepartment { get; set; }
        public virtual DbSet<CrmCompanyJustAccessGroup> CrmCompanyJustAccessGroup { get; set; }
        public virtual DbSet<CrmCompanyJustAccessGroupIv> CrmCompanyJustAccessGroupIv { get; set; }
        public virtual DbSet<CrmCompanyJustAccessProvince> CrmCompanyJustAccessProvince { get; set; }
        public virtual DbSet<CrmCompanyJustAccessSubGroup> CrmCompanyJustAccessSubGroup { get; set; }
        public virtual DbSet<CrmCompanyLang> CrmCompanyLang { get; set; }
        public virtual DbSet<CrmCompanyLoGo> CrmCompanyLoGo { get; set; }
        public virtual DbSet<CrmCompanyMultiGroups> CrmCompanyMultiGroups { get; set; }
        public virtual DbSet<CrmCompanyPersons> CrmCompanyPersons { get; set; }
        public virtual DbSet<CrmCompanyPersonsLang> CrmCompanyPersonsLang { get; set; }
        public virtual DbSet<CrmCompanyPersonsTemplate> CrmCompanyPersonsTemplate { get; set; }
        public virtual DbSet<CrmCompanyPersonsTemplateLang> CrmCompanyPersonsTemplateLang { get; set; }
        public virtual DbSet<CrmCompanyPersonsTmp> CrmCompanyPersonsTmp { get; set; }
        public virtual DbSet<CrmCompanyPersonsTmpLang> CrmCompanyPersonsTmpLang { get; set; }
        public virtual DbSet<CrmCompanyPictureAlbums> CrmCompanyPictureAlbums { get; set; }
        public virtual DbSet<CrmCompanyPictures> CrmCompanyPictures { get; set; }
        public virtual DbSet<CrmCompanyPresentation> CrmCompanyPresentation { get; set; }
        public virtual DbSet<CrmCompanyPresentationLang> CrmCompanyPresentationLang { get; set; }
        public virtual DbSet<CrmCompanySubGroups> CrmCompanySubGroups { get; set; }
        public virtual DbSet<CrmCompanySubGroupsLang> CrmCompanySubGroupsLang { get; set; }
        public virtual DbSet<CrmCompanyTitle> CrmCompanyTitle { get; set; }
        public virtual DbSet<CrmCompanyTitleLang> CrmCompanyTitleLang { get; set; }
        public virtual DbSet<CrmCompanyTmp> CrmCompanyTmp { get; set; }
        public virtual DbSet<CrmCompanyTmpLang> CrmCompanyTmpLang { get; set; }
        public virtual DbSet<CrmCompanyType> CrmCompanyType { get; set; }
        public virtual DbSet<CrmCompanyTypeLang> CrmCompanyTypeLang { get; set; }
        public virtual DbSet<CrmCompanyUserForbidden> CrmCompanyUserForbidden { get; set; }
        public virtual DbSet<CrmConversation> CrmConversation { get; set; }
        public virtual DbSet<CrmConversationDefaultContext> CrmConversationDefaultContext { get; set; }
        public virtual DbSet<CrmConversationDefaultContextLang> CrmConversationDefaultContextLang { get; set; }
        public virtual DbSet<CrmConversationLang> CrmConversationLang { get; set; }
        public virtual DbSet<CrmConversationPriority> CrmConversationPriority { get; set; }
        public virtual DbSet<CrmConversationPriorityLang> CrmConversationPriorityLang { get; set; }
        public virtual DbSet<CrmConversationReferUsers> CrmConversationReferUsers { get; set; }
        public virtual DbSet<CrmConversationStatus> CrmConversationStatus { get; set; }
        public virtual DbSet<CrmConversationStatusGroups> CrmConversationStatusGroups { get; set; }
        public virtual DbSet<CrmConversationStatusGroupsLang> CrmConversationStatusGroupsLang { get; set; }
        public virtual DbSet<CrmConversationStatusLang> CrmConversationStatusLang { get; set; }
        public virtual DbSet<CrmConversationTmp> CrmConversationTmp { get; set; }
        public virtual DbSet<CrmConversationTmpLang> CrmConversationTmpLang { get; set; }
        public virtual DbSet<CrmConversationTopics> CrmConversationTopics { get; set; }
        public virtual DbSet<CrmConversationTopicsLang> CrmConversationTopicsLang { get; set; }
        public virtual DbSet<CrmDyFormFieldMasterValueDetails> CrmDyFormFieldMasterValueDetails { get; set; }
        public virtual DbSet<CrmDyFormFieldMasterValues> CrmDyFormFieldMasterValues { get; set; }
        public virtual DbSet<CrmDyFormFieldTypes> CrmDyFormFieldTypes { get; set; }
        public virtual DbSet<CrmDyFormFieldTypesLang> CrmDyFormFieldTypesLang { get; set; }
        public virtual DbSet<CrmDyFormFieldValues> CrmDyFormFieldValues { get; set; }
        public virtual DbSet<CrmDyFormFieldValuesLang> CrmDyFormFieldValuesLang { get; set; }
        public virtual DbSet<CrmDyFormFields> CrmDyFormFields { get; set; }
        public virtual DbSet<CrmDyFormFieldsLang> CrmDyFormFieldsLang { get; set; }
        public virtual DbSet<CrmDyFormRegularExpressions> CrmDyFormRegularExpressions { get; set; }
        public virtual DbSet<CrmDyFormRegularExpressionsLang> CrmDyFormRegularExpressionsLang { get; set; }
        public virtual DbSet<CrmDyFormUserAccess> CrmDyFormUserAccess { get; set; }
        public virtual DbSet<CrmDyFormWorkflowSteps> CrmDyFormWorkflowSteps { get; set; }
        public virtual DbSet<CrmDyFormWorkflowStepsLang> CrmDyFormWorkflowStepsLang { get; set; }
        public virtual DbSet<CrmDyFormWorkflows> CrmDyFormWorkflows { get; set; }
        public virtual DbSet<CrmDyFormWorkflowsLang> CrmDyFormWorkflowsLang { get; set; }
        public virtual DbSet<CrmDyForms> CrmDyForms { get; set; }
        public virtual DbSet<CrmDyFormsLang> CrmDyFormsLang { get; set; }
        public virtual DbSet<CrmFileDirectoryType> CrmFileDirectoryType { get; set; }
        public virtual DbSet<CrmFileDirectoryTypeLang> CrmFileDirectoryTypeLang { get; set; }
        public virtual DbSet<CrmFileDirectoryTypeOpr> CrmFileDirectoryTypeOpr { get; set; }
        public virtual DbSet<CrmFileDirectoryTypeOprLang> CrmFileDirectoryTypeOprLang { get; set; }
        public virtual DbSet<CrmFilesDirectory> CrmFilesDirectory { get; set; }
        public virtual DbSet<CrmFilesDirectoryLang> CrmFilesDirectoryLang { get; set; }
        public virtual DbSet<CrmFilesDirectoryTemplate> CrmFilesDirectoryTemplate { get; set; }
        public virtual DbSet<CrmFilesDirectoryTemplateType> CrmFilesDirectoryTemplateType { get; set; }
        public virtual DbSet<CrmFoSetting> CrmFoSetting { get; set; }
        public virtual DbSet<CrmFoSettingLang> CrmFoSettingLang { get; set; }
        public virtual DbSet<CrmFund> CrmFund { get; set; }
        public virtual DbSet<CrmFundGroups> CrmFundGroups { get; set; }
        public virtual DbSet<CrmFundGroupsLang> CrmFundGroupsLang { get; set; }
        public virtual DbSet<CrmFundLang> CrmFundLang { get; set; }
        public virtual DbSet<CrmImportFromExcel> CrmImportFromExcel { get; set; }
        public virtual DbSet<CrmImportFromExcelFields> CrmImportFromExcelFields { get; set; }
        public virtual DbSet<CrmInternalMessage> CrmInternalMessage { get; set; }
        public virtual DbSet<CrmInternalMessageDefaultContext> CrmInternalMessageDefaultContext { get; set; }
        public virtual DbSet<CrmInternalMessageDefaultContextLang> CrmInternalMessageDefaultContextLang { get; set; }
        public virtual DbSet<CrmInternalMessageDetails> CrmInternalMessageDetails { get; set; }
        public virtual DbSet<CrmInternalMessageGroup> CrmInternalMessageGroup { get; set; }
        public virtual DbSet<CrmInternalMessageGroupLang> CrmInternalMessageGroupLang { get; set; }
        public virtual DbSet<CrmInternalMessageLang> CrmInternalMessageLang { get; set; }
        public virtual DbSet<CrmInternalMessagePriority> CrmInternalMessagePriority { get; set; }
        public virtual DbSet<CrmInternalMessagePriorityLang> CrmInternalMessagePriorityLang { get; set; }
        public virtual DbSet<CrmInternalMessageSelectReceiver> CrmInternalMessageSelectReceiver { get; set; }
        public virtual DbSet<CrmInternalMessageTreeType> CrmInternalMessageTreeType { get; set; }
        public virtual DbSet<CrmInternalMessageTreeTypeLang> CrmInternalMessageTreeTypeLang { get; set; }
        public virtual DbSet<CrmInternalMessageType> CrmInternalMessageType { get; set; }
        public virtual DbSet<CrmInternalMessageTypeLang> CrmInternalMessageTypeLang { get; set; }
        public virtual DbSet<CrmKnowledgeTank> CrmKnowledgeTank { get; set; }
        public virtual DbSet<CrmKnowledgeTankGroup> CrmKnowledgeTankGroup { get; set; }
        public virtual DbSet<CrmKnowledgeTankGroupLang> CrmKnowledgeTankGroupLang { get; set; }
        public virtual DbSet<CrmKnowledgeTankGroupPermission> CrmKnowledgeTankGroupPermission { get; set; }
        public virtual DbSet<CrmKnowledgeTankLang> CrmKnowledgeTankLang { get; set; }
        public virtual DbSet<CrmKnowledgeTankPriority> CrmKnowledgeTankPriority { get; set; }
        public virtual DbSet<CrmKnowledgeTankPriorityLang> CrmKnowledgeTankPriorityLang { get; set; }
        public virtual DbSet<CrmLeave> CrmLeave { get; set; }
        public virtual DbSet<CrmLeaveKinds> CrmLeaveKinds { get; set; }
        public virtual DbSet<CrmLeaveStatus> CrmLeaveStatus { get; set; }
        public virtual DbSet<CrmLeaveStayType> CrmLeaveStayType { get; set; }
        public virtual DbSet<CrmLeaveType> CrmLeaveType { get; set; }
        public virtual DbSet<CrmLeaveVehicleType> CrmLeaveVehicleType { get; set; }
        public virtual DbSet<CrmLinkAccNoAvSetting> CrmLinkAccNoAvSetting { get; set; }
        public virtual DbSet<CrmLinkAccNoAvSettingDetails> CrmLinkAccNoAvSettingDetails { get; set; }
        public virtual DbSet<CrmLinkAccNoAvSettingDetailsLang> CrmLinkAccNoAvSettingDetailsLang { get; set; }
        public virtual DbSet<CrmLinkAccNoAvSettingLang> CrmLinkAccNoAvSettingLang { get; set; }
        public virtual DbSet<CrmLinkAccSetting> CrmLinkAccSetting { get; set; }
        public virtual DbSet<CrmLinkAccSettingDetails> CrmLinkAccSettingDetails { get; set; }
        public virtual DbSet<CrmLinkAccSettingDetailsLang> CrmLinkAccSettingDetailsLang { get; set; }
        public virtual DbSet<CrmLinkAccSettingLang> CrmLinkAccSettingLang { get; set; }
        public virtual DbSet<CrmLinkAccSystems> CrmLinkAccSystems { get; set; }
        public virtual DbSet<CrmLinkAccTarazSetting> CrmLinkAccTarazSetting { get; set; }
        public virtual DbSet<CrmLinkAccTarazSettingDetails> CrmLinkAccTarazSettingDetails { get; set; }
        public virtual DbSet<CrmLinkAccTarazSettingDetailsLang> CrmLinkAccTarazSettingDetailsLang { get; set; }
        public virtual DbSet<CrmLinkAccTarazSettingLang> CrmLinkAccTarazSettingLang { get; set; }
        public virtual DbSet<CrmLinkedCompany> CrmLinkedCompany { get; set; }
        public virtual DbSet<CrmLinkedType> CrmLinkedType { get; set; }
        public virtual DbSet<CrmLinkedTypeLang> CrmLinkedTypeLang { get; set; }
        public virtual DbSet<CrmLinkedUsers> CrmLinkedUsers { get; set; }
        public virtual DbSet<CrmOperationsType> CrmOperationsType { get; set; }
        public virtual DbSet<CrmOperationsTypeLang> CrmOperationsTypeLang { get; set; }
        public virtual DbSet<CrmPersonDepartments> CrmPersonDepartments { get; set; }
        public virtual DbSet<CrmPersonDepartmentsLang> CrmPersonDepartmentsLang { get; set; }
        public virtual DbSet<CrmPersonGroups> CrmPersonGroups { get; set; }
        public virtual DbSet<CrmPersonGroupsLang> CrmPersonGroupsLang { get; set; }
        public virtual DbSet<CrmPersonJobs> CrmPersonJobs { get; set; }
        public virtual DbSet<CrmPersonJobsLang> CrmPersonJobsLang { get; set; }
        public virtual DbSet<CrmPersonPicture> CrmPersonPicture { get; set; }
        public virtual DbSet<CrmPersonTitle> CrmPersonTitle { get; set; }
        public virtual DbSet<CrmPersonTitleLang> CrmPersonTitleLang { get; set; }
        public virtual DbSet<CrmPersonType> CrmPersonType { get; set; }
        public virtual DbSet<CrmPersonTypeLang> CrmPersonTypeLang { get; set; }
        public virtual DbSet<CrmProjectDefualtValue> CrmProjectDefualtValue { get; set; }
        public virtual DbSet<CrmProjectDefualtValueLang> CrmProjectDefualtValueLang { get; set; }
        public virtual DbSet<CrmProjectFieldTitle> CrmProjectFieldTitle { get; set; }
        public virtual DbSet<CrmProjectFieldTitleLang> CrmProjectFieldTitleLang { get; set; }
        public virtual DbSet<CrmProjectFieldValueType> CrmProjectFieldValueType { get; set; }
        public virtual DbSet<CrmProjectGrade> CrmProjectGrade { get; set; }
        public virtual DbSet<CrmProjectGradeLang> CrmProjectGradeLang { get; set; }
        public virtual DbSet<CrmProjectGroups> CrmProjectGroups { get; set; }
        public virtual DbSet<CrmProjectGroupsLang> CrmProjectGroupsLang { get; set; }
        public virtual DbSet<CrmProjectGroupsMulti> CrmProjectGroupsMulti { get; set; }
        public virtual DbSet<CrmProjectGroupsMultiI> CrmProjectGroupsMultiI { get; set; }
        public virtual DbSet<CrmProjectGroupsMultiILang> CrmProjectGroupsMultiILang { get; set; }
        public virtual DbSet<CrmProjectGroupsMultiLang> CrmProjectGroupsMultiLang { get; set; }
        public virtual DbSet<CrmProjectInformations> CrmProjectInformations { get; set; }
        public virtual DbSet<CrmProjectInformationsLang> CrmProjectInformationsLang { get; set; }
        public virtual DbSet<CrmProjectMultiGroups> CrmProjectMultiGroups { get; set; }
        public virtual DbSet<CrmProjectMultiIgroups> CrmProjectMultiIgroups { get; set; }
        public virtual DbSet<CrmProjectPriority> CrmProjectPriority { get; set; }
        public virtual DbSet<CrmProjectPriorityLang> CrmProjectPriorityLang { get; set; }
        public virtual DbSet<CrmProjectTitles> CrmProjectTitles { get; set; }
        public virtual DbSet<CrmProjectTitlesLang> CrmProjectTitlesLang { get; set; }
        public virtual DbSet<CrmProjects> CrmProjects { get; set; }
        public virtual DbSet<CrmProjectsForbiddenForUser> CrmProjectsForbiddenForUser { get; set; }
        public virtual DbSet<CrmProjectsForbiddenForUserLang> CrmProjectsForbiddenForUserLang { get; set; }
        public virtual DbSet<CrmProjectsLang> CrmProjectsLang { get; set; }
        public virtual DbSet<CrmProjectsTmp> CrmProjectsTmp { get; set; }
        public virtual DbSet<CrmProjectsTmpLang> CrmProjectsTmpLang { get; set; }
        public virtual DbSet<CrmShowTableFieldInFo> CrmShowTableFieldInFo { get; set; }
        public virtual DbSet<CrmSystemParts> CrmSystemParts { get; set; }
        public virtual DbSet<CrmSystemPartsLang> CrmSystemPartsLang { get; set; }
        public virtual DbSet<CrmTelegBotChatMessage> CrmTelegBotChatMessage { get; set; }
        public virtual DbSet<CrmTelegBotContacts> CrmTelegBotContacts { get; set; }
        public virtual DbSet<CrmTelegBotMessageType> CrmTelegBotMessageType { get; set; }
        public virtual DbSet<CrmTelegBotSetting> CrmTelegBotSetting { get; set; }
        public virtual DbSet<CrmTelegChatMessage> CrmTelegChatMessage { get; set; }
        public virtual DbSet<CrmTelegContacts> CrmTelegContacts { get; set; }
        public virtual DbSet<CrmTelegMessageType> CrmTelegMessageType { get; set; }
        public virtual DbSet<CrmTelegSetting> CrmTelegSetting { get; set; }
        public virtual DbSet<CrmTempEmails> CrmTempEmails { get; set; }
        public virtual DbSet<CrmTimeAttendance> CrmTimeAttendance { get; set; }
        public virtual DbSet<CrmTimeAttendanceBase> CrmTimeAttendanceBase { get; set; }
        public virtual DbSet<CrmTimeAttendanceLog> CrmTimeAttendanceLog { get; set; }
        public virtual DbSet<CrmUserNotes> CrmUserNotes { get; set; }
        public virtual DbSet<CrmUserTaskGroups> CrmUserTaskGroups { get; set; }
        public virtual DbSet<CrmUserTaskGroupsLang> CrmUserTaskGroupsLang { get; set; }
        public virtual DbSet<CrmUserTaskPriorities> CrmUserTaskPriorities { get; set; }
        public virtual DbSet<CrmUserTaskPrioritiesLang> CrmUserTaskPrioritiesLang { get; set; }
        public virtual DbSet<CrmUserTasks> CrmUserTasks { get; set; }
        public virtual DbSet<CrmUserTasksLang> CrmUserTasksLang { get; set; }
        public virtual DbSet<CrmVersionUpgrade> CrmVersionUpgrade { get; set; }
        public virtual DbSet<CrmVersionUpgradeDetails> CrmVersionUpgradeDetails { get; set; }
        public virtual DbSet<CrmVersions> CrmVersions { get; set; }
        public virtual DbSet<CrmWebSetting> CrmWebSetting { get; set; }
        public virtual DbSet<CrmsysCideviceType> CrmsysCideviceType { get; set; }
        public virtual DbSet<CrmsysCipopUpSetting> CrmsysCipopUpSetting { get; set; }
        public virtual DbSet<CrmsysCisetting> CrmsysCisetting { get; set; }
        public virtual DbSet<CrmsysDbobjects> CrmsysDbobjects { get; set; }
        public virtual DbSet<CrmsysDbobjectsLang> CrmsysDbobjectsLang { get; set; }
        public virtual DbSet<CrmsysDbtempInfo> CrmsysDbtempInfo { get; set; }
        public virtual DbSet<CrmsysDbtempInfoType> CrmsysDbtempInfoType { get; set; }
        public virtual DbSet<CrmsysFormActions> CrmsysFormActions { get; set; }
        public virtual DbSet<CrmsysFormActionsLang> CrmsysFormActionsLang { get; set; }
        public virtual DbSet<CrmsysFormObjectProperties> CrmsysFormObjectProperties { get; set; }
        public virtual DbSet<CrmsysFormObjectPropertiesLang> CrmsysFormObjectPropertiesLang { get; set; }
        public virtual DbSet<CrmsysForms> CrmsysForms { get; set; }
        public virtual DbSet<CrmsysFormsLang> CrmsysFormsLang { get; set; }
        public virtual DbSet<CrmsysManageAlarmChanges> CrmsysManageAlarmChanges { get; set; }
        public virtual DbSet<CrmsysManageInternalMessageChanges> CrmsysManageInternalMessageChanges { get; set; }
        public virtual DbSet<CrmsysRollPermission> CrmsysRollPermission { get; set; }
        public virtual DbSet<CrmsysRolls> CrmsysRolls { get; set; }
        public virtual DbSet<CrmsysRollsLang> CrmsysRollsLang { get; set; }
        public virtual DbSet<CrmsysSetting> CrmsysSetting { get; set; }
        public virtual DbSet<CrmsysSettingLang> CrmsysSettingLang { get; set; }
        public virtual DbSet<CrmtmpManageTellNumber> CrmtmpManageTellNumber { get; set; }
        public virtual DbSet<Education> Education { get; set; }
        public virtual DbSet<EducationLang> EducationLang { get; set; }
        public virtual DbSet<EmailDefaultBodyText> EmailDefaultBodyText { get; set; }
        public virtual DbSet<EmailDefaultBodyTextLang> EmailDefaultBodyTextLang { get; set; }
        public virtual DbSet<EmailReceive> EmailReceive { get; set; }
        public virtual DbSet<EmailReceiveAttachments> EmailReceiveAttachments { get; set; }
        public virtual DbSet<EmailReceiveFolders> EmailReceiveFolders { get; set; }
        public virtual DbSet<EmailSendAttachment> EmailSendAttachment { get; set; }
        public virtual DbSet<EmailSendDetail> EmailSendDetail { get; set; }
        public virtual DbSet<EmailSendHeader> EmailSendHeader { get; set; }
        public virtual DbSet<EmailSetting> EmailSetting { get; set; }
        public virtual DbSet<EmailUserDefaultSetting> EmailUserDefaultSetting { get; set; }
        public virtual DbSet<EmailUserTempTank> EmailUserTempTank { get; set; }
        public virtual DbSet<EmailUsersInfo> EmailUsersInfo { get; set; }
        public virtual DbSet<Languages> Languages { get; set; }
        public virtual DbSet<MobApiAndTableDetail> MobApiAndTableDetail { get; set; }
        public virtual DbSet<MobCompanyAppInfo> MobCompanyAppInfo { get; set; }
        public virtual DbSet<MobErrorLogs> MobErrorLogs { get; set; }
        public virtual DbSet<MyWebsites> MyWebsites { get; set; }
        public virtual DbSet<PayRollItemTypes> PayRollItemTypes { get; set; }
        public virtual DbSet<PayRollItemTypesLang> PayRollItemTypesLang { get; set; }
        public virtual DbSet<PayRollItems> PayRollItems { get; set; }
        public virtual DbSet<PayRollItemsLang> PayRollItemsLang { get; set; }
        public virtual DbSet<PayRollUserCycle> PayRollUserCycle { get; set; }
        public virtual DbSet<PayRollUserCycleItemValues> PayRollUserCycleItemValues { get; set; }
        public virtual DbSet<PayRollUserCycleLang> PayRollUserCycleLang { get; set; }
        public virtual DbSet<PayRollUserDefaultItems> PayRollUserDefaultItems { get; set; }
        public virtual DbSet<PayRollUserPaymentTypes> PayRollUserPaymentTypes { get; set; }
        public virtual DbSet<PayRollUserPaymentTypesLang> PayRollUserPaymentTypesLang { get; set; }
        public virtual DbSet<PayRollUserPayments> PayRollUserPayments { get; set; }
        public virtual DbSet<PayRollUserPaymentsLang> PayRollUserPaymentsLang { get; set; }
        public virtual DbSet<PrintFormat> PrintFormat { get; set; }
        public virtual DbSet<PrintFormatLang> PrintFormatLang { get; set; }
        public virtual DbSet<PrintFormatType> PrintFormatType { get; set; }
        public virtual DbSet<PrintFormatTypeLang> PrintFormatTypeLang { get; set; }
        public virtual DbSet<Projects> Projects { get; set; }
        public virtual DbSet<ProjectsLang> ProjectsLang { get; set; }
        public virtual DbSet<Province> Province { get; set; }
        public virtual DbSet<ProvinceLang> ProvinceLang { get; set; }
        public virtual DbSet<SecLetterDefaultSettings> SecLetterDefaultSettings { get; set; }
        public virtual DbSet<SecLetterDefaultSettingsLang> SecLetterDefaultSettingsLang { get; set; }
        public virtual DbSet<SecLetterType> SecLetterType { get; set; }
        public virtual DbSet<SecLetterTypeLang> SecLetterTypeLang { get; set; }
        public virtual DbSet<SecLetters> SecLetters { get; set; }
        public virtual DbSet<SecLettersLang> SecLettersLang { get; set; }
        public virtual DbSet<Sex> Sex { get; set; }
        public virtual DbSet<SexLang> SexLang { get; set; }
        public virtual DbSet<SmsDefaultBodyText> SmsDefaultBodyText { get; set; }
        public virtual DbSet<SmsDefaultBodyTextGroups> SmsDefaultBodyTextGroups { get; set; }
        public virtual DbSet<SmsDefaultBodyTextGroupsLang> SmsDefaultBodyTextGroupsLang { get; set; }
        public virtual DbSet<SmsDefaultBodyTextLang> SmsDefaultBodyTextLang { get; set; }
        public virtual DbSet<SmsDeliveryStatus> SmsDeliveryStatus { get; set; }
        public virtual DbSet<SmsDeliveryStatusLang> SmsDeliveryStatusLang { get; set; }
        public virtual DbSet<SmsGsmmodemDelivery> SmsGsmmodemDelivery { get; set; }
        public virtual DbSet<SmsGsmmodemSetting> SmsGsmmodemSetting { get; set; }
        public virtual DbSet<SmsGsmreceives> SmsGsmreceives { get; set; }
        public virtual DbSet<SmsGsmsendingTank> SmsGsmsendingTank { get; set; }
        public virtual DbSet<SmsProviders> SmsProviders { get; set; }
        public virtual DbSet<SmsReceive> SmsReceive { get; set; }
        public virtual DbSet<SmsReceiveFromWsdl> SmsReceiveFromWsdl { get; set; }
        public virtual DbSet<SmsSendDetail> SmsSendDetail { get; set; }
        public virtual DbSet<SmsSendHeader> SmsSendHeader { get; set; }
        public virtual DbSet<SmsSendType> SmsSendType { get; set; }
        public virtual DbSet<SmsSendTypeLang> SmsSendTypeLang { get; set; }
        public virtual DbSet<SmsSetting> SmsSetting { get; set; }
        public virtual DbSet<SmsTempMobileNumbers> SmsTempMobileNumbers { get; set; }
        public virtual DbSet<SmsUserSendCredit> SmsUserSendCredit { get; set; }
        public virtual DbSet<SmsUserSendCreditLang> SmsUserSendCreditLang { get; set; }
        public virtual DbSet<UserDepartmentTicketReferUsers> UserDepartmentTicketReferUsers { get; set; }
        public virtual DbSet<UserDepartments> UserDepartments { get; set; }
        public virtual DbSet<UserDepartmentsLang> UserDepartmentsLang { get; set; }
        public virtual DbSet<UserLanguages> UserLanguages { get; set; }
        public virtual DbSet<UserLoginAllowedTimes> UserLoginAllowedTimes { get; set; }
        public virtual DbSet<UserSignature> UserSignature { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<UsersLang> UsersLang { get; set; }
        public virtual DbSet<UsersPermission> UsersPermission { get; set; }
        public virtual DbSet<UsersPermissionLang> UsersPermissionLang { get; set; }
        public virtual DbSet<WsWareHouse> WsWareHouse { get; set; }
        public virtual DbSet<WsWareHouseLang> WsWareHouseLang { get; set; }
        public virtual DbSet<WsbuyOrder> WsbuyOrder { get; set; }
        public virtual DbSet<WsbuyOrderItemSerials> WsbuyOrderItemSerials { get; set; }
        public virtual DbSet<WsbuyOrderItemSerialsLang> WsbuyOrderItemSerialsLang { get; set; }
        public virtual DbSet<WsbuyOrderItems> WsbuyOrderItems { get; set; }
        public virtual DbSet<WsbuyOrderItemsLang> WsbuyOrderItemsLang { get; set; }
        public virtual DbSet<WsbuyOrderLang> WsbuyOrderLang { get; set; }
        public virtual DbSet<WsbuyOrderOpr> WsbuyOrderOpr { get; set; }
        public virtual DbSet<WsbuyOrderOprLang> WsbuyOrderOprLang { get; set; }
        public virtual DbSet<WsbuyOrderPaymentTypes> WsbuyOrderPaymentTypes { get; set; }
        public virtual DbSet<WsbuyOrderPaymentTypesLang> WsbuyOrderPaymentTypesLang { get; set; }
        public virtual DbSet<WsbuyOrderPayments> WsbuyOrderPayments { get; set; }
        public virtual DbSet<WsbuyOrderPaymentsLang> WsbuyOrderPaymentsLang { get; set; }
        public virtual DbSet<WsbuyOrderStatus> WsbuyOrderStatus { get; set; }
        public virtual DbSet<WsbuyOrderStatusLang> WsbuyOrderStatusLang { get; set; }
        public virtual DbSet<WscreditDuration> WscreditDuration { get; set; }
        public virtual DbSet<WscreditDurationLang> WscreditDurationLang { get; set; }
        public virtual DbSet<WscurrencyUnits> WscurrencyUnits { get; set; }
        public virtual DbSet<WscurrencyUnitsLang> WscurrencyUnitsLang { get; set; }
        public virtual DbSet<WsdeliveryTime> WsdeliveryTime { get; set; }
        public virtual DbSet<WsdeliveryTimeLang> WsdeliveryTimeLang { get; set; }
        public virtual DbSet<Wsdoc> Wsdoc { get; set; }
        public virtual DbSet<WsdocItemSerials> WsdocItemSerials { get; set; }
        public virtual DbSet<WsdocItemSerialsLang> WsdocItemSerialsLang { get; set; }
        public virtual DbSet<WsdocItems> WsdocItems { get; set; }
        public virtual DbSet<WsdocItemsLang> WsdocItemsLang { get; set; }
        public virtual DbSet<WsdocLang> WsdocLang { get; set; }
        public virtual DbSet<WsdocOpr> WsdocOpr { get; set; }
        public virtual DbSet<WsdocOprLang> WsdocOprLang { get; set; }
        public virtual DbSet<WsfinancialPeriod> WsfinancialPeriod { get; set; }
        public virtual DbSet<Wsguaranty> Wsguaranty { get; set; }
        public virtual DbSet<WsguarantyLang> WsguarantyLang { get; set; }
        public virtual DbSet<WslinkedProducts> WslinkedProducts { get; set; }
        public virtual DbSet<Wslogo> Wslogo { get; set; }
        public virtual DbSet<WslogoLang> WslogoLang { get; set; }
        public virtual DbSet<Wsorder> Wsorder { get; set; }
        public virtual DbSet<WsorderCommissionPayTypes> WsorderCommissionPayTypes { get; set; }
        public virtual DbSet<WsorderCommissionPayTypesLang> WsorderCommissionPayTypesLang { get; set; }
        public virtual DbSet<WsorderCommissions> WsorderCommissions { get; set; }
        public virtual DbSet<WsorderCommissionsLang> WsorderCommissionsLang { get; set; }
        public virtual DbSet<WsorderDefaultSetting> WsorderDefaultSetting { get; set; }
        public virtual DbSet<WsorderDefaultSettingLang> WsorderDefaultSettingLang { get; set; }
        public virtual DbSet<WsorderItemSerials> WsorderItemSerials { get; set; }
        public virtual DbSet<WsorderItemSerialsLang> WsorderItemSerialsLang { get; set; }
        public virtual DbSet<WsorderItems> WsorderItems { get; set; }
        public virtual DbSet<WsorderItemsLang> WsorderItemsLang { get; set; }
        public virtual DbSet<WsorderLang> WsorderLang { get; set; }
        public virtual DbSet<WsorderOpr> WsorderOpr { get; set; }
        public virtual DbSet<WsorderOprLang> WsorderOprLang { get; set; }
        public virtual DbSet<WsorderPaymentTypes> WsorderPaymentTypes { get; set; }
        public virtual DbSet<WsorderPaymentTypesLang> WsorderPaymentTypesLang { get; set; }
        public virtual DbSet<WsorderPayments> WsorderPayments { get; set; }
        public virtual DbSet<WsorderPaymentsLang> WsorderPaymentsLang { get; set; }
        public virtual DbSet<WsorderStatus> WsorderStatus { get; set; }
        public virtual DbSet<WsorderStatusLang> WsorderStatusLang { get; set; }
        public virtual DbSet<WspayCondition> WspayCondition { get; set; }
        public virtual DbSet<WspayConditionLang> WspayConditionLang { get; set; }
        public virtual DbSet<WspreOrder> WspreOrder { get; set; }
        public virtual DbSet<WspreOrderDefaultSetting> WspreOrderDefaultSetting { get; set; }
        public virtual DbSet<WspreOrderDefaultSettingLang> WspreOrderDefaultSettingLang { get; set; }
        public virtual DbSet<WspreOrderItemSpecification> WspreOrderItemSpecification { get; set; }
        public virtual DbSet<WspreOrderItemSpecificationLang> WspreOrderItemSpecificationLang { get; set; }
        public virtual DbSet<WspreOrderItems> WspreOrderItems { get; set; }
        public virtual DbSet<WspreOrderItemsLang> WspreOrderItemsLang { get; set; }
        public virtual DbSet<WspreOrderLang> WspreOrderLang { get; set; }
        public virtual DbSet<WspreOrderOpr> WspreOrderOpr { get; set; }
        public virtual DbSet<WspreOrderOprLang> WspreOrderOprLang { get; set; }
        public virtual DbSet<WspreOrderPayments> WspreOrderPayments { get; set; }
        public virtual DbSet<WspreOrderPaymentsLang> WspreOrderPaymentsLang { get; set; }
        public virtual DbSet<WspreOrderPrdGroupMustExistReasonGroups> WspreOrderPrdGroupMustExistReasonGroups { get; set; }
        public virtual DbSet<WspreOrderPrdGroupMustExistReasonGroupsLang> WspreOrderPrdGroupMustExistReasonGroupsLang { get; set; }
        public virtual DbSet<WspreOrderPrdGroupMustExistReasons> WspreOrderPrdGroupMustExistReasons { get; set; }
        public virtual DbSet<WspreOrderPrdGroupMustExistReasonsLang> WspreOrderPrdGroupMustExistReasonsLang { get; set; }
        public virtual DbSet<WspreOrderStatus> WspreOrderStatus { get; set; }
        public virtual DbSet<WspreOrderStatusLang> WspreOrderStatusLang { get; set; }
        public virtual DbSet<WsproductColor> WsproductColor { get; set; }
        public virtual DbSet<WsproductColorLang> WsproductColorLang { get; set; }
        public virtual DbSet<WsproductCost> WsproductCost { get; set; }
        public virtual DbSet<WsproductCostGroup> WsproductCostGroup { get; set; }
        public virtual DbSet<WsproductCostGroupLang> WsproductCostGroupLang { get; set; }
        public virtual DbSet<WsproductCostLang> WsproductCostLang { get; set; }
        public virtual DbSet<WsproductFirstGroup> WsproductFirstGroup { get; set; }
        public virtual DbSet<WsproductFirstGroupLang> WsproductFirstGroupLang { get; set; }
        public virtual DbSet<WsproductGallery> WsproductGallery { get; set; }
        public virtual DbSet<WsproductImportFromExcel> WsproductImportFromExcel { get; set; }
        public virtual DbSet<WsproductImportFromExcelFields> WsproductImportFromExcelFields { get; set; }
        public virtual DbSet<WsproductImportFromExcelFieldsLang> WsproductImportFromExcelFieldsLang { get; set; }
        public virtual DbSet<WsproductPicture> WsproductPicture { get; set; }
        public virtual DbSet<WsproductPictureLang> WsproductPictureLang { get; set; }
        public virtual DbSet<WsproductPrice> WsproductPrice { get; set; }
        public virtual DbSet<WsproductPriceGroup> WsproductPriceGroup { get; set; }
        public virtual DbSet<WsproductPriceGroupLang> WsproductPriceGroupLang { get; set; }
        public virtual DbSet<WsproductPriceLang> WsproductPriceLang { get; set; }
        public virtual DbSet<WsproductSecondGroup> WsproductSecondGroup { get; set; }
        public virtual DbSet<WsproductSecondGroupLang> WsproductSecondGroupLang { get; set; }
        public virtual DbSet<WsproductShpStockManageTypes> WsproductShpStockManageTypes { get; set; }
        public virtual DbSet<WsproductShpStockManageTypesLang> WsproductShpStockManageTypesLang { get; set; }
        public virtual DbSet<WsproductSpecification> WsproductSpecification { get; set; }
        public virtual DbSet<WsproductSpecificationLang> WsproductSpecificationLang { get; set; }
        public virtual DbSet<WsproductUnits> WsproductUnits { get; set; }
        public virtual DbSet<WsproductUnitsLang> WsproductUnitsLang { get; set; }
        public virtual DbSet<Wsproducts> Wsproducts { get; set; }
        public virtual DbSet<WsproductsLang> WsproductsLang { get; set; }
        public virtual DbSet<WsproductsRate> WsproductsRate { get; set; }
        public virtual DbSet<WsproductsUserDiscount> WsproductsUserDiscount { get; set; }
        public virtual DbSet<WsproductsUserDiscountLang> WsproductsUserDiscountLang { get; set; }
        public virtual DbSet<WsregisterBarCode> WsregisterBarCode { get; set; }
        public virtual DbSet<WssettlementType> WssettlementType { get; set; }
        public virtual DbSet<WssettlementTypeLang> WssettlementTypeLang { get; set; }
        public virtual DbSet<Wssignature> Wssignature { get; set; }
        public virtual DbSet<WstmpEnterBarcodeOperation> WstmpEnterBarcodeOperation { get; set; }
        public virtual DbSet<WstmpEnterDocPrdWithBarcode> WstmpEnterDocPrdWithBarcode { get; set; }
        public virtual DbSet<WstmpUserItemCopy> WstmpUserItemCopy { get; set; }
        public virtual DbSet<WsuserFavproductItems> WsuserFavproductItems { get; set; }
        public virtual DbSet<WsuserFavproductItemsLang> WsuserFavproductItemsLang { get; set; }
        public virtual DbSet<WsuserFavproducts> WsuserFavproducts { get; set; }
        public virtual DbSet<WsuserFavproductsLang> WsuserFavproductsLang { get; set; }
        public virtual DbSet<WsverificationRequestDetails> WsverificationRequestDetails { get; set; }
        public virtual DbSet<WsverificationRequestDetailsLang> WsverificationRequestDetailsLang { get; set; }
        public virtual DbSet<WsverificationRequests> WsverificationRequests { get; set; }
        public virtual DbSet<WsverificationRequestsLang> WsverificationRequestsLang { get; set; }
        public virtual DbSet<WsverificationWorkFlowSteps> WsverificationWorkFlowSteps { get; set; }
        public virtual DbSet<WsverificationWorkFlowStepsLang> WsverificationWorkFlowStepsLang { get; set; }
        public virtual DbSet<WsverificationWorkFlows> WsverificationWorkFlows { get; set; }
        public virtual DbSet<WsverificationWorkFlowsLang> WsverificationWorkFlowsLang { get; set; }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<City>(entity =>
            {
                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.City1)
                    .IsRequired()
                    .HasColumnName("City")
                    .HasMaxLength(50);

                entity.Property(e => e.CityCode).HasMaxLength(15);

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstUser)
                    .WithMany(p => p.City)
                    .HasForeignKey(d => d.FirstUserId)
                    .HasConstraintName("FK_City_Users");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.City)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_City_Languages");

                entity.HasOne(d => d.Province)
                    .WithMany(p => p.City)
                    .HasForeignKey(d => d.ProvinceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_City_Province");
            });

            modelBuilder.Entity<CityLang>(entity =>
            {
                entity.ToTable("City_Lang");

                entity.Property(e => e.CityLangId).HasColumnName("CityLangID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.CityLang)
                    .HasForeignKey(d => d.CityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_City_Lang_City");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CityLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_City_Lang_Languages");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Country1)
                    .IsRequired()
                    .HasColumnName("Country")
                    .HasMaxLength(50);

                entity.Property(e => e.CountryCode).HasMaxLength(15);

                entity.Property(e => e.CountryDescription).HasMaxLength(100);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.Country)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_Country_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Country)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Country_Users");
            });

            modelBuilder.Entity<CountryLang>(entity =>
            {
                entity.ToTable("Country_Lang");

                entity.Property(e => e.CountryLangId).HasColumnName("CountryLangID");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CountryDescription).HasMaxLength(100);

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.CountryNavigation)
                    .WithMany(p => p.CountryLang)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Country_Lang_Country");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CountryLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Country_Lang_Languages");
            });

            modelBuilder.Entity<CrmAddressing>(entity =>
            {
                entity.HasKey(e => e.AddressingId);

                entity.Property(e => e.AddressingId).HasColumnName("AddressingID");

                entity.Property(e => e.Address).HasMaxLength(250);

                entity.Property(e => e.AddressDesc).HasMaxLength(100);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(15);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Mobile).HasMaxLength(15);

                entity.Property(e => e.PostBox).HasMaxLength(50);

                entity.Property(e => e.PreTel).HasMaxLength(10);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Tel).HasMaxLength(15);

                entity.Property(e => e.TelDesc).HasMaxLength(50);

                entity.Property(e => e.TelUpTo).HasMaxLength(10);

                entity.Property(e => e.WebSite).HasMaxLength(50);

                entity.Property(e => e.ZipCode).HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmAddressingFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmAddressing_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmAddressing)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmAddressing_Languages");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.CrmAddressing)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmAddressing_CrmAddressingType");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmAddressingUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmAddressing_Users");
            });

            modelBuilder.Entity<CrmAddressingType>(entity =>
            {
                entity.HasKey(e => e.AddTypeId);

                entity.Property(e => e.AddTypeId)
                    .HasColumnName("AddTypeID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AddressingType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmAddressingType)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmAddressingType_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmAddressingType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmAddressingType_Languages");
            });

            modelBuilder.Entity<CrmBankingAccountType>(entity =>
            {
                entity.HasKey(e => e.BankingAccountTypeId);

                entity.Property(e => e.BankingAccountTypeId).HasColumnName("BankingAccountTypeID");

                entity.Property(e => e.AccountType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmBankingAccountType)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmBankingAccountType_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmBankingAccountType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmBankingAccountType_Languages");
            });

            modelBuilder.Entity<CrmBankingAccounts>(entity =>
            {
                entity.HasKey(e => e.BankingAccountId);

                entity.Property(e => e.BankingAccountId).HasColumnName("BankingAccountID");

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AccountOwner).HasMaxLength(50);

                entity.Property(e => e.AccountType).HasMaxLength(50);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.AccType)
                    .WithMany(p => p.CrmBankingAccounts)
                    .HasForeignKey(d => d.AccTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmBankingAccounts_CrmBankingAccountType");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.CrmBankingAccounts)
                    .HasForeignKey(d => d.BranchId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmBankingAccounts_CrmBankingBranches");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmBankingAccounts)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmBankingAccounts_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmBankingAccounts)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmBankingAccounts_Languages");

                entity.HasOne(d => d.Master)
                    .WithMany(p => p.CrmBankingAccounts)
                    .HasForeignKey(d => d.MasterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmBankingAccounts_CrmCompany");

                entity.HasOne(d => d.MasterNavigation)
                    .WithMany(p => p.CrmBankingAccounts)
                    .HasForeignKey(d => d.MasterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmBankingAccounts_CrmCompanyPersons");
            });

            modelBuilder.Entity<CrmBankingBanks>(entity =>
            {
                entity.HasKey(e => e.BankingBankId);

                entity.Property(e => e.BankingBankId).HasColumnName("BankingBankID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BankDesc).HasMaxLength(100);

                entity.Property(e => e.BankName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian).HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmBankingBanks)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmBankingBanks_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmBankingBanks)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmBankingBanks_Languages");
            });

            modelBuilder.Entity<CrmBankingBranches>(entity =>
            {
                entity.HasKey(e => e.BankingBranchId);

                entity.Property(e => e.BankingBranchId).HasColumnName("BankingBranchID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BranchAddress).HasMaxLength(50);

                entity.Property(e => e.BranchCode).HasMaxLength(50);

                entity.Property(e => e.BranchDesc).HasMaxLength(100);

                entity.Property(e => e.BranchName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BranchTel).HasMaxLength(20);

                entity.Property(e => e.BranchTelIi)
                    .HasColumnName("BranchTelII")
                    .HasMaxLength(20);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.CrmBankingBranches)
                    .HasForeignKey(d => d.BankId)
                    .HasConstraintName("FK_CrmBankingBranches_CrmBankingBanks");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmBankingBranches)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmBankingBranches_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmBankingBranches)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmBankingBranches_Languages");
            });

            modelBuilder.Entity<CrmCallBlackList>(entity =>
            {
                entity.HasKey(e => e.BlackListId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Blnumber)
                    .IsRequired()
                    .HasColumnName("BLNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.BlnumberTitle)
                    .IsRequired()
                    .HasColumnName("BLNumberTitle")
                    .HasMaxLength(50);

                entity.Property(e => e.BluserId).HasColumnName("BLUserId");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian).HasMaxLength(8);

                entity.HasOne(d => d.Bluser)
                    .WithMany(p => p.CrmCallBlackListBluser)
                    .HasForeignKey(d => d.BluserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCallBlackList_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCallBlackListFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCallBlackList_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCallBlackList)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCallBlackList_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCallBlackListUser)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_CrmCallBlackList_Users1");
            });

            modelBuilder.Entity<CrmCallHistory>(entity =>
            {
                entity.HasKey(e => e.CallHistoryId);

                entity.Property(e => e.CallHistoryId).HasColumnName("CallHistoryID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CallDate).HasMaxLength(50);

                entity.Property(e => e.CallDateTime).HasColumnType("datetime");

                entity.Property(e => e.CallDay).HasMaxLength(50);

                entity.Property(e => e.CallTime).HasMaxLength(50);

                entity.Property(e => e.CallerIddetectData)
                    .HasColumnName("CallerIDDetectData")
                    .HasMaxLength(50);

                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");

                entity.Property(e => e.Data).HasMaxLength(500);

                entity.Property(e => e.Duration).HasMaxLength(50);

                entity.Property(e => e.EndTime).HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Note).HasMaxLength(300);

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PreRecFileName).HasMaxLength(500);

                entity.Property(e => e.RecFileName).HasMaxLength(500);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.StartTime).HasMaxLength(50);

                entity.Property(e => e.TrunkCallId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TrunkDestination)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TrunkDestinationCycle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TrunkFileLocation).HasMaxLength(500);

                entity.Property(e => e.TrunkName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TrunkSource)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.CallType)
                    .WithMany(p => p.CrmCallHistory)
                    .HasForeignKey(d => d.CallTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCallHistory_CrmCallType");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CrmCallHistory)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_CrmCallHistory_CrmCompany");

                entity.HasOne(d => d.CompanyPerson)
                    .WithMany(p => p.CrmCallHistory)
                    .HasForeignKey(d => d.CompanyPersonId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_CrmCallHistory_CrmCompanyPersons");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCallHistoryFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCallHistory_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCallHistory)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCallHistory_Languages");

                entity.HasOne(d => d.NoteEditedUser)
                    .WithMany(p => p.CrmCallHistoryNoteEditedUser)
                    .HasForeignKey(d => d.NoteEditedUserId)
                    .HasConstraintName("FK_CrmCallHistory_Users3");

                entity.HasOne(d => d.NoteRegisterUser)
                    .WithMany(p => p.CrmCallHistoryNoteRegisterUser)
                    .HasForeignKey(d => d.NoteRegisterUserId)
                    .HasConstraintName("FK_CrmCallHistory_Users2");

                entity.HasOne(d => d.NumberEditedUser)
                    .WithMany(p => p.CrmCallHistoryNumberEditedUser)
                    .HasForeignKey(d => d.NumberEditedUserId)
                    .HasConstraintName("FK_CrmCallHistory_Users1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCallHistoryUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCallHistory_Users");
            });

            modelBuilder.Entity<CrmCallType>(entity =>
            {
                entity.HasKey(e => e.CallTypeId);

                entity.Property(e => e.CallTypeId)
                    .HasColumnName("CallTypeID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CallType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian).HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCallType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCallType_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCallType)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_CrmCallType_Users");
            });

            modelBuilder.Entity<CrmCallTypeLang>(entity =>
            {
                entity.ToTable("CrmCallType_Lang");

                entity.Property(e => e.CrmCallTypeLangId).HasColumnName("CrmCallTypeLangID");

                entity.Property(e => e.CallType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CallTypeId).HasColumnName("CallTypeID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.CallTypeNavigation)
                    .WithMany(p => p.CrmCallTypeLang)
                    .HasForeignKey(d => d.CallTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCallType_Lang_CrmCallType");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCallTypeLang)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCallType_Lang_Languages");
            });

            modelBuilder.Entity<CrmCmsComments>(entity =>
            {
                entity.HasKey(e => e.CommentId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Email).HasMaxLength(300);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fname)
                    .HasColumnName("FName")
                    .HasMaxLength(300);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Ipaddress)
                    .HasColumnName("IPAddress")
                    .HasMaxLength(50);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Lname)
                    .IsRequired()
                    .HasColumnName("LName")
                    .HasMaxLength(300);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.VerifiedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.CrmCompany)
                    .WithMany(p => p.CrmCmsComments)
                    .HasForeignKey(d => d.CrmCompanyId)
                    .HasConstraintName("FK_CrmCmsComments_CrmCompany");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCmsCommentsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsComments_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCmsComments)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsComments_Languages");

                entity.HasOne(d => d.ObjectType)
                    .WithMany(p => p.CrmCmsComments)
                    .HasForeignKey(d => d.ObjectTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsComments_CrmCmsObjectTypes");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCmsCommentsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsComments_Users");

                entity.HasOne(d => d.VerifiedUser)
                    .WithMany(p => p.CrmCmsCommentsVerifiedUser)
                    .HasForeignKey(d => d.VerifiedUserId)
                    .HasConstraintName("FK_CrmCmsComments_VerifiedUsers");
            });

            modelBuilder.Entity<CrmCmsCommentsLang>(entity =>
            {
                entity.HasKey(e => e.CrmCmsCommentLangId);

                entity.ToTable("CrmCmsComments_Lang");

                entity.Property(e => e.CrmCmsCommentLangId).HasColumnName("CrmCmsCommentLangID");

                entity.Property(e => e.Fname)
                    .HasColumnName("FName")
                    .HasMaxLength(300);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Lname)
                    .IsRequired()
                    .HasColumnName("LName")
                    .HasMaxLength(300);

                entity.HasOne(d => d.Comment)
                    .WithMany(p => p.CrmCmsCommentsLang)
                    .HasForeignKey(d => d.CommentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsComments_Lang_CrmCmsComments");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCmsCommentsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsComments_Lang_Languages");
            });

            modelBuilder.Entity<CrmCmsFiles>(entity =>
            {
                entity.HasKey(e => e.FileId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FilePath).IsRequired();

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(300);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCmsFilesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsFiles_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCmsFiles)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsFiles_Languages");

                entity.HasOne(d => d.ObjectType)
                    .WithMany(p => p.CrmCmsFiles)
                    .HasForeignKey(d => d.ObjectTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsFiles_CrmCmsObjectTypes");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCmsFilesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsFiles_Users");
            });

            modelBuilder.Entity<CrmCmsFilesLang>(entity =>
            {
                entity.HasKey(e => e.CrmCmsFileLangId);

                entity.ToTable("CrmCmsFiles_Lang");

                entity.Property(e => e.CrmCmsFileLangId).HasColumnName("CrmCmsFileLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Title).HasMaxLength(300);

                entity.HasOne(d => d.File)
                    .WithMany(p => p.CrmCmsFilesLang)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsFiles_Lang_CrmCmsFiles");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCmsFilesLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsFiles_Lang_Languages");
            });

            modelBuilder.Entity<CrmCmsGallery>(entity =>
            {
                entity.HasKey(e => e.GalleryId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.GalleryTitle)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCmsGalleryFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsGallery_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCmsGallery)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsGallery_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCmsGalleryUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsGallery_Users");
            });

            modelBuilder.Entity<CrmCmsGalleryItems>(entity =>
            {
                entity.HasKey(e => e.GalleryItemId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FileName).HasMaxLength(200);

                entity.Property(e => e.FilePath).HasMaxLength(1000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FolderName).HasMaxLength(50);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ItemDesc).HasMaxLength(500);

                entity.Property(e => e.ItemDescFontColor).HasMaxLength(20);

                entity.Property(e => e.ItemLink).HasMaxLength(1000);

                entity.Property(e => e.ItemLinkBgColor).HasMaxLength(20);

                entity.Property(e => e.ItemLinkFontColor).HasMaxLength(20);

                entity.Property(e => e.ItemLinkTitle).HasMaxLength(50);

                entity.Property(e => e.ItemTitle)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ItemTitleFontColor).HasMaxLength(20);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCmsGalleryItemsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsGalleryItems_FirstRegisterUsers");

                entity.HasOne(d => d.Gallery)
                    .WithMany(p => p.CrmCmsGalleryItems)
                    .HasForeignKey(d => d.GalleryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsGalleryItems_CrmCmsGallery");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCmsGalleryItems)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsGalleryItems_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCmsGalleryItemsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsGalleryItems_Users");
            });

            modelBuilder.Entity<CrmCmsGalleryItemsLang>(entity =>
            {
                entity.HasKey(e => e.CrmCmsGalleryItemLangId);

                entity.ToTable("CrmCmsGalleryItems_Lang");

                entity.Property(e => e.CrmCmsGalleryItemLangId).HasColumnName("CrmCmsGalleryItemLangID");

                entity.Property(e => e.ItemDesc).HasMaxLength(500);

                entity.Property(e => e.ItemLinkTitle).HasMaxLength(50);

                entity.Property(e => e.ItemTitle)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.GalleryItem)
                    .WithMany(p => p.CrmCmsGalleryItemsLang)
                    .HasForeignKey(d => d.GalleryItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsGalleryItems_Lang_CrmCmsGalleryItems");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCmsGalleryItemsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsGalleryItems_Lang_Languages");
            });

            modelBuilder.Entity<CrmCmsGalleryLang>(entity =>
            {
                entity.ToTable("CrmCmsGallery_Lang");

                entity.Property(e => e.CrmCmsGalleryLangId).HasColumnName("CrmCmsGalleryLangID");

                entity.Property(e => e.GalleryTitle)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Gallery)
                    .WithMany(p => p.CrmCmsGalleryLang)
                    .HasForeignKey(d => d.GalleryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsGallery_Lang_CrmCmsGallery");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCmsGalleryLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsGallery_Lang_Languages");
            });

            modelBuilder.Entity<CrmCmsLikes>(entity =>
            {
                entity.HasKey(e => e.LikeId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Ipaddress)
                    .HasColumnName("IPAddress")
                    .HasMaxLength(50);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.CrmCompany)
                    .WithMany(p => p.CrmCmsLikes)
                    .HasForeignKey(d => d.CrmCompanyId)
                    .HasConstraintName("FK_CrmCmsLikes_CrmCompany");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCmsLikesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsLikes_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCmsLikes)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsLikes_Languages");

                entity.HasOne(d => d.ObjectType)
                    .WithMany(p => p.CrmCmsLikes)
                    .HasForeignKey(d => d.ObjectTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsLikes_CrmCmsObjectTypes");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCmsLikesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsLikes_Users");
            });

            modelBuilder.Entity<CrmCmsMenus>(entity =>
            {
                entity.HasKey(e => e.MenuId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Link).HasMaxLength(1000);

                entity.Property(e => e.MenuTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModuleName).HasMaxLength(20);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.DyForm)
                    .WithMany(p => p.CrmCmsMenus)
                    .HasForeignKey(d => d.DyFormId)
                    .HasConstraintName("FK_CrmCmsMenus_CrmDyForms");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCmsMenusFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsMenus_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCmsMenus)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsMenus_Languages");

                entity.HasOne(d => d.News)
                    .WithMany(p => p.CrmCmsMenus)
                    .HasForeignKey(d => d.NewsId)
                    .HasConstraintName("FK_CrmCmsMenus_CrmCmsNews");

                entity.HasOne(d => d.Page)
                    .WithMany(p => p.CrmCmsMenus)
                    .HasForeignKey(d => d.PageId)
                    .HasConstraintName("FK_CrmCmsMenus_CrmCmsPages");

                entity.HasOne(d => d.PrdFirstGroup)
                    .WithMany(p => p.CrmCmsMenus)
                    .HasForeignKey(d => d.PrdFirstGroupId)
                    .HasConstraintName("FK_CrmCmsMenus_WSProductFirstGroup");

                entity.HasOne(d => d.PrdSecondGroup)
                    .WithMany(p => p.CrmCmsMenus)
                    .HasForeignKey(d => d.PrdSecondGroupId)
                    .HasConstraintName("FK_CrmCmsMenus_WSProductSecondGroup");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCmsMenusUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsMenus_Users");
            });

            modelBuilder.Entity<CrmCmsMenusLang>(entity =>
            {
                entity.HasKey(e => e.CrmCmsMenuLangId);

                entity.ToTable("CrmCmsMenus_Lang");

                entity.Property(e => e.CrmCmsMenuLangId).HasColumnName("CrmCmsMenuLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.MenuTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCmsMenusLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsMenus_Lang_Languages");

                entity.HasOne(d => d.Menu)
                    .WithMany(p => p.CrmCmsMenusLang)
                    .HasForeignKey(d => d.MenuId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsMenus_Lang_CrmCmsMenus");
            });

            modelBuilder.Entity<CrmCmsNews>(entity =>
            {
                entity.HasKey(e => e.NewsId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.HeadLine)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.NewsBody).HasColumnType("ntext");

                entity.Property(e => e.NewsSummery).IsRequired();

                entity.Property(e => e.PublishDateTime).HasColumnType("datetime");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.VerifiedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCmsNewsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsNews_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCmsNews)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsNews_Languages");

                entity.HasOne(d => d.NewsGroup)
                    .WithMany(p => p.CrmCmsNews)
                    .HasForeignKey(d => d.NewsGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsNews_CrmCmsNewsGroups");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCmsNewsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsNews_Users");

                entity.HasOne(d => d.VerifiedUser)
                    .WithMany(p => p.CrmCmsNewsVerifiedUser)
                    .HasForeignKey(d => d.VerifiedUserId)
                    .HasConstraintName("FK_CrmCmsNews_VerifiedUsers");
            });

            modelBuilder.Entity<CrmCmsNewsGroups>(entity =>
            {
                entity.HasKey(e => e.NewsGroupId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCmsNewsGroupsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsNewsGroups_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCmsNewsGroups)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsNewsGroups_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCmsNewsGroupsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsNewsGroups_Users");
            });

            modelBuilder.Entity<CrmCmsNewsGroupsLang>(entity =>
            {
                entity.HasKey(e => e.CrmCmsNewsGroupLangId);

                entity.ToTable("CrmCmsNewsGroups_Lang");

                entity.Property(e => e.CrmCmsNewsGroupLangId).HasColumnName("CrmCmsNewsGroupLangID");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCmsNewsGroupsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsNewsGroups_Lang_Languages");

                entity.HasOne(d => d.NewsGroup)
                    .WithMany(p => p.CrmCmsNewsGroupsLang)
                    .HasForeignKey(d => d.NewsGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsNewsGroups_Lang_CrmCmsNewsGroups");
            });

            modelBuilder.Entity<CrmCmsNewsLang>(entity =>
            {
                entity.ToTable("CrmCmsNews_Lang");

                entity.Property(e => e.CrmCmsNewsLangId).HasColumnName("CrmCmsNewsLangID");

                entity.Property(e => e.HeadLine)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.NewsBody).HasColumnType("ntext");

                entity.Property(e => e.NewsSummery).IsRequired();

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCmsNewsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsNews_Lang_Languages");

                entity.HasOne(d => d.News)
                    .WithMany(p => p.CrmCmsNewsLang)
                    .HasForeignKey(d => d.NewsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsNews_Lang_CrmCmsNews");
            });

            modelBuilder.Entity<CrmCmsObjectTypes>(entity =>
            {
                entity.HasKey(e => e.ObjectTypeId);

                entity.Property(e => e.ObjectTypeId).ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ObjectType)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCmsObjectTypesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsObjectTypes_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCmsObjectTypes)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsObjectTypes_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCmsObjectTypesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsObjectTypes_Users");
            });

            modelBuilder.Entity<CrmCmsPages>(entity =>
            {
                entity.HasKey(e => e.PageId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PageBody).HasColumnType("ntext");

                entity.Property(e => e.PageFooter).HasColumnType("ntext");

                entity.Property(e => e.PageHeader).HasColumnType("ntext");

                entity.Property(e => e.PageName)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.PageTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.CrmDyForm)
                    .WithMany(p => p.CrmCmsPages)
                    .HasForeignKey(d => d.CrmDyFormId)
                    .HasConstraintName("FK_CrmCmsPages_CrmDyForms");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCmsPagesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsPages_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCmsPages)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsPages_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCmsPagesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsPages_Users");
            });

            modelBuilder.Entity<CrmCmsPagesLang>(entity =>
            {
                entity.HasKey(e => e.CrmCmsPageLangId);

                entity.ToTable("CrmCmsPages_Lang");

                entity.Property(e => e.CrmCmsPageLangId).HasColumnName("CrmCmsPageLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PageBody).HasColumnType("ntext");

                entity.Property(e => e.PageFooter).HasColumnType("ntext");

                entity.Property(e => e.PageHeader).HasColumnType("ntext");

                entity.Property(e => e.PageName)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.PageTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCmsPagesLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsPages_Lang_Languages");

                entity.HasOne(d => d.Page)
                    .WithMany(p => p.CrmCmsPagesLang)
                    .HasForeignKey(d => d.PageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCmsPages_Lang_CrmCmsPages");
            });

            modelBuilder.Entity<CrmCompany>(entity =>
            {
                entity.HasKey(e => e.CompanyId);

                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");

                entity.Property(e => e.AddType).HasDefaultValueSql("(1)");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CmpAccInquiry)
                    .HasColumnName("cmpAccInquiry")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpAccountNumber)
                    .HasColumnName("cmpAccountNumber")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpActivityType)
                    .HasColumnName("cmpActivityType")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpAddress)
                    .HasColumnName("cmpAddress")
                    .HasMaxLength(250);

                entity.Property(e => e.CmpAddressDesc)
                    .HasColumnName("cmpAddressDesc")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpBuyLimit)
                    .HasColumnName("cmpBuyLimit")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpCityId).HasColumnName("cmpCityId");

                entity.Property(e => e.CmpCode)
                    .HasColumnName("cmpCode")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpCoordinateLastDate)
                    .HasColumnName("cmpCoordinateLastDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CmpCoordinateLastDatePersian)
                    .HasColumnName("cmpCoordinateLastDatePersian")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CmpCoordinateLastUserId).HasColumnName("cmpCoordinateLastUserId");

                entity.Property(e => e.CmpCoordinateLatitude)
                    .HasColumnName("cmpCoordinateLatitude")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpCoordinateLongitude)
                    .HasColumnName("cmpCoordinateLongitude")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpCoordinateZoomLevel).HasColumnName("cmpCoordinateZoomLevel");

                entity.Property(e => e.CmpCountryId).HasColumnName("cmpCountryId");

                entity.Property(e => e.CmpDescription)
                    .HasColumnName("cmpDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpEconomicCode)
                    .HasColumnName("cmpEconomicCode")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpEffectiveDatePersian)
                    .HasColumnName("cmpEffectiveDatePersian")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CmpEffectiveDateTime)
                    .HasColumnName("cmpEffectiveDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.CmpEmail)
                    .HasColumnName("cmpEmail")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpFame)
                    .HasColumnName("cmpFame")
                    .HasMaxLength(200);

                entity.Property(e => e.CmpFax)
                    .HasColumnName("cmpFax")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpFaxDesc)
                    .HasColumnName("cmpFaxDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpFirstRegisterUserId).HasColumnName("cmpFirstRegisterUserId");

                entity.Property(e => e.CmpFoaccessLinkedCompany).HasColumnName("cmpFOAccessLinkedCompany");

                entity.Property(e => e.CmpFreight)
                    .HasColumnName("cmpFreight")
                    .HasMaxLength(200);

                entity.Property(e => e.CmpGroupId).HasColumnName("cmpGroupId");

                entity.Property(e => e.CmpGroupIdIi).HasColumnName("cmpGroupIdII");

                entity.Property(e => e.CmpGroupIdIii).HasColumnName("cmpGroupIdIII");

                entity.Property(e => e.CmpGroupIdIv).HasColumnName("cmpGroupIdIV");

                entity.Property(e => e.CmpInquiry)
                    .HasColumnName("cmpInquiry")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpInteresting)
                    .HasColumnName("cmpInteresting")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpIsDraft)
                    .HasColumnName("cmpIsDraft")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CmpKind).HasColumnName("cmpKind");

                entity.Property(e => e.CmpLinkAccCode)
                    .HasColumnName("cmpLinkAccCode")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpLinkAccCodeId).HasColumnName("cmpLinkAccCodeId");

                entity.Property(e => e.CmpLinkAccCustomerId).HasColumnName("cmpLinkAccCustomerId");

                entity.Property(e => e.CmpLinkAccCustomerIdStr)
                    .HasColumnName("cmpLinkAccCustomerIdStr")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpMainPersonId).HasColumnName("cmpMainPersonId");

                entity.Property(e => e.CmpMobile)
                    .HasColumnName("cmpMobile")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpName)
                    .IsRequired()
                    .HasColumnName("cmpName")
                    .HasMaxLength(300);

                entity.Property(e => e.CmpNameEng)
                    .HasColumnName("cmpNameEng")
                    .HasMaxLength(300);

                entity.Property(e => e.CmpNationalCode)
                    .HasColumnName("cmpNationalCode")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpNumber).HasColumnName("cmpNumber");

                entity.Property(e => e.CmpPassword)
                    .HasColumnName("cmpPassword")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpPostBox)
                    .HasColumnName("cmpPostBox")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpPreTel)
                    .HasColumnName("cmpPreTel")
                    .HasMaxLength(10);

                entity.Property(e => e.CmpPreTelIi)
                    .HasColumnName("cmpPreTelII")
                    .HasMaxLength(10);

                entity.Property(e => e.CmpPresentationId).HasColumnName("cmpPresentationId");

                entity.Property(e => e.CmpProvinceId).HasColumnName("cmpProvinceId");

                entity.Property(e => e.CmpReferUserId).HasColumnName("cmpReferUserId");

                entity.Property(e => e.CmpRegistrationNumber)
                    .HasColumnName("cmpRegistrationNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpSpecialPoint)
                    .HasColumnName("cmpSpecialPoint")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpSpecialWordForCi)
                    .HasColumnName("cmpSpecialWordForCI")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CmpSubGroupId).HasColumnName("cmpSubGroupId");

                entity.Property(e => e.CmpTel)
                    .HasColumnName("cmpTel")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpTelDesc)
                    .HasColumnName("cmpTelDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpTelIi)
                    .HasColumnName("cmpTelII")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpTelIidesc)
                    .HasColumnName("cmpTelIIDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpTelUpTo)
                    .HasColumnName("cmpTelUpTo")
                    .HasMaxLength(10);

                entity.Property(e => e.CmpTelUpToIi)
                    .HasColumnName("cmpTelUpToII")
                    .HasMaxLength(10);

                entity.Property(e => e.CmpTitleId).HasColumnName("cmpTitleId");

                entity.Property(e => e.CmpTypeId).HasColumnName("cmpTypeId");

                entity.Property(e => e.CmpUserName)
                    .HasColumnName("cmpUserName")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpWebSite)
                    .HasColumnName("cmpWebSite")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpZipCode)
                    .HasColumnName("cmpZipCode")
                    .HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ImportDate)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.ImportDateTime).HasColumnType("datetime");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CmpCity)
                    .WithMany(p => p.CrmCompany)
                    .HasForeignKey(d => d.CmpCityId)
                    .HasConstraintName("FK_CrmCompany_City");

                entity.HasOne(d => d.CmpCountry)
                    .WithMany(p => p.CrmCompany)
                    .HasForeignKey(d => d.CmpCountryId)
                    .HasConstraintName("FK_CrmCompany_Country");

                entity.HasOne(d => d.CmpGroup)
                    .WithMany(p => p.CrmCompany)
                    .HasForeignKey(d => d.CmpGroupId)
                    .HasConstraintName("FK_CrmCompany_CrmCompanyGroups");

                entity.HasOne(d => d.CmpGroupIdIiNavigation)
                    .WithMany(p => p.CrmCompany)
                    .HasForeignKey(d => d.CmpGroupIdIi)
                    .HasConstraintName("FK_CrmCompany_CrmCompanyGroupsII");

                entity.HasOne(d => d.CmpGroupIdIiiNavigation)
                    .WithMany(p => p.CrmCompany)
                    .HasForeignKey(d => d.CmpGroupIdIii)
                    .HasConstraintName("FK_CrmCompany_CrmCompanyGroupsIII");

                entity.HasOne(d => d.CmpGroupIdIvNavigation)
                    .WithMany(p => p.CrmCompany)
                    .HasForeignKey(d => d.CmpGroupIdIv)
                    .HasConstraintName("FK_CrmCompany_CrmCompanyGroupsIV");

                entity.HasOne(d => d.CmpMainPerson)
                    .WithMany(p => p.CrmCompany)
                    .HasForeignKey(d => d.CmpMainPersonId)
                    .HasConstraintName("FK_CrmCompany_CrmCompanyPersons");

                entity.HasOne(d => d.CmpPresentation)
                    .WithMany(p => p.CrmCompany)
                    .HasForeignKey(d => d.CmpPresentationId)
                    .HasConstraintName("FK_CrmCompany_CrmCompanyPresentation");

                entity.HasOne(d => d.CmpProvince)
                    .WithMany(p => p.CrmCompany)
                    .HasForeignKey(d => d.CmpProvinceId)
                    .HasConstraintName("FK_CrmCompany_Province");

                entity.HasOne(d => d.CmpSubGroup)
                    .WithMany(p => p.CrmCompany)
                    .HasForeignKey(d => d.CmpSubGroupId)
                    .HasConstraintName("FK_CrmCompany_CrmCompanySubGroups");

                entity.HasOne(d => d.CmpTitle)
                    .WithMany(p => p.CrmCompany)
                    .HasForeignKey(d => d.CmpTitleId)
                    .HasConstraintName("FK_CrmCompany_CrmCompanyTitle");

                entity.HasOne(d => d.CmpType)
                    .WithMany(p => p.CrmCompany)
                    .HasForeignKey(d => d.CmpTypeId)
                    .HasConstraintName("FK_CrmCompany_CrmCompanyType");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompany)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompany_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompany)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompany_Users");
            });

            modelBuilder.Entity<CrmCompanyForbiddenCity>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmCompanyForbiddenCityCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenCity_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyForbiddenCityFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyForbiddenCity_Users20");

                entity.HasOne(d => d.ForbiddenCity)
                    .WithMany(p => p.CrmCompanyForbiddenCity)
                    .HasForeignKey(d => d.ForbiddenCityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenCity_City");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyForbiddenCity)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyForbiddenCity_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyForbiddenCityUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenCity_Users1");
            });

            modelBuilder.Entity<CrmCompanyForbiddenCompany>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmCompanyForbiddenCompanyCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenCompany_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyForbiddenCompanyFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyForbiddenCompany_Users20");

                entity.HasOne(d => d.ForbiddenCompany)
                    .WithMany(p => p.CrmCompanyForbiddenCompany)
                    .HasForeignKey(d => d.ForbiddenCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenCompany_CrmCompany");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyForbiddenCompany)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyForbiddenCompany_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyForbiddenCompanyUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenCompany_Users1");
            });

            modelBuilder.Entity<CrmCompanyForbiddenDepartment>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmCompanyForbiddenDepartmentCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenDepartment_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyForbiddenDepartmentFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyForbiddenDepartment_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyForbiddenDepartment)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyForbiddenDepartment_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyForbiddenDepartmentUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenDepartment_Users1");
            });

            modelBuilder.Entity<CrmCompanyForbiddenGroup>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmCompanyForbiddenGroupCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenGroup_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyForbiddenGroupFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyForbiddenGroup_Users20");

                entity.HasOne(d => d.ForbiddenGroup)
                    .WithMany(p => p.CrmCompanyForbiddenGroup)
                    .HasForeignKey(d => d.ForbiddenGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenGroup_CrmCompanyGroups");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyForbiddenGroup)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyForbiddenGroup_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyForbiddenGroupUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenGroup_Users1");
            });

            modelBuilder.Entity<CrmCompanyForbiddenGroupIv>(entity =>
            {
                entity.ToTable("CrmCompanyForbiddenGroupIV");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ForbiddenGroupIvid).HasColumnName("ForbiddenGroupIVId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmCompanyForbiddenGroupIvCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenGroupIV_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyForbiddenGroupIvFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyForbiddenGroupIV_Users20");

                entity.HasOne(d => d.ForbiddenGroupIv)
                    .WithMany(p => p.CrmCompanyForbiddenGroupIv)
                    .HasForeignKey(d => d.ForbiddenGroupIvid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenGroupIV_CrmCompanyGroupsIV");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyForbiddenGroupIv)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyForbiddenGroupIV_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyForbiddenGroupIvUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenGroupIV_Users1");
            });

            modelBuilder.Entity<CrmCompanyForbiddenProvince>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmCompanyForbiddenProvinceCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenProvince_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyForbiddenProvinceFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyForbiddenProvince_Users20");

                entity.HasOne(d => d.ForbiddenProvince)
                    .WithMany(p => p.CrmCompanyForbiddenProvince)
                    .HasForeignKey(d => d.ForbiddenProvinceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenProvince_Province");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyForbiddenProvince)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyForbiddenProvince_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyForbiddenProvinceUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenProvince_Users1");
            });

            modelBuilder.Entity<CrmCompanyForbiddenSubGroup>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmCompanyForbiddenSubGroupCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenSubGroup_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyForbiddenSubGroupFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyForbiddenSubGroup_Users20");

                entity.HasOne(d => d.ForbiddenSubGroup)
                    .WithMany(p => p.CrmCompanyForbiddenSubGroup)
                    .HasForeignKey(d => d.ForbiddenSubGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenSubGroup_CrmCompanySubGroups");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyForbiddenSubGroup)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyForbiddenSubGroup_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyForbiddenSubGroupUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyForbiddenSubGroup_Users1");
            });

            modelBuilder.Entity<CrmCompanyGroups>(entity =>
            {
                entity.HasKey(e => e.CompanyGroupId);

                entity.Property(e => e.CompanyGroupId).HasColumnName("CompanyGroupID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.GroupDesc).HasMaxLength(200);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyGroups)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyGroups_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyGroups)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyGroups_Users");
            });

            modelBuilder.Entity<CrmCompanyGroupsIi>(entity =>
            {
                entity.HasKey(e => e.CompanyGroupIiid);

                entity.ToTable("CrmCompanyGroupsII");

                entity.Property(e => e.CompanyGroupIiid).HasColumnName("CompanyGroupIIID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.GroupIidesc)
                    .HasColumnName("GroupIIDesc")
                    .HasMaxLength(200);

                entity.Property(e => e.GroupIiname)
                    .IsRequired()
                    .HasColumnName("GroupIIName")
                    .HasMaxLength(100);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyGroupsIi)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyGroupsII_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyGroupsIi)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyGroupsII_Users");
            });

            modelBuilder.Entity<CrmCompanyGroupsIiLang>(entity =>
            {
                entity.ToTable("CrmCompanyGroupsII_Lang");

                entity.Property(e => e.CrmCompanyGroupsIilangId).HasColumnName("CrmCompanyGroupsIILangID");

                entity.Property(e => e.CompanyGroupIiid).HasColumnName("CompanyGroupIIID");

                entity.Property(e => e.GroupIidesc)
                    .HasColumnName("GroupIIDesc")
                    .HasMaxLength(200);

                entity.Property(e => e.GroupIiname)
                    .IsRequired()
                    .HasColumnName("GroupIIName")
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.CompanyGroupIi)
                    .WithMany(p => p.CrmCompanyGroupsIiLang)
                    .HasForeignKey(d => d.CompanyGroupIiid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyGroupsII_Lang_CrmCompanyGroupsII");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyGroupsIiLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyGroupsII_Lang_Languages");
            });

            modelBuilder.Entity<CrmCompanyGroupsIii>(entity =>
            {
                entity.HasKey(e => e.CompanyGroupIiiid);

                entity.ToTable("CrmCompanyGroupsIII");

                entity.Property(e => e.CompanyGroupIiiid).HasColumnName("CompanyGroupIIIID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.GroupIiidesc)
                    .HasColumnName("GroupIIIDesc")
                    .HasMaxLength(200);

                entity.Property(e => e.GroupIiiname)
                    .IsRequired()
                    .HasColumnName("GroupIIIName")
                    .HasMaxLength(100);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyGroupsIii)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyGroupsIII_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyGroupsIii)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyGroupsIII_Users");
            });

            modelBuilder.Entity<CrmCompanyGroupsIiiLang>(entity =>
            {
                entity.ToTable("CrmCompanyGroupsIII_Lang");

                entity.Property(e => e.CrmCompanyGroupsIiilangId).HasColumnName("CrmCompanyGroupsIIILangID");

                entity.Property(e => e.CompanyGroupIiiid).HasColumnName("CompanyGroupIIIID");

                entity.Property(e => e.GroupIiidesc)
                    .HasColumnName("GroupIIIDesc")
                    .HasMaxLength(200);

                entity.Property(e => e.GroupIiiname)
                    .IsRequired()
                    .HasColumnName("GroupIIIName")
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.CompanyGroupIii)
                    .WithMany(p => p.CrmCompanyGroupsIiiLang)
                    .HasForeignKey(d => d.CompanyGroupIiiid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyGroupsIII_Lang_CrmCompanyGroupsIII");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyGroupsIiiLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyGroupsIII_Lang_Languages");
            });

            modelBuilder.Entity<CrmCompanyGroupsIv>(entity =>
            {
                entity.HasKey(e => e.CompanyGroupIvid);

                entity.ToTable("CrmCompanyGroupsIV");

                entity.Property(e => e.CompanyGroupIvid).HasColumnName("CompanyGroupIVID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.GroupIvdesc)
                    .HasColumnName("GroupIVDesc")
                    .HasMaxLength(200);

                entity.Property(e => e.GroupIvname)
                    .IsRequired()
                    .HasColumnName("GroupIVName")
                    .HasMaxLength(100);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyGroupsIv)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyGroupsIV_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyGroupsIv)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyGroupsIV_Users");
            });

            modelBuilder.Entity<CrmCompanyGroupsIvLang>(entity =>
            {
                entity.ToTable("CrmCompanyGroupsIV_Lang");

                entity.Property(e => e.CrmCompanyGroupsIvlangId).HasColumnName("CrmCompanyGroupsIVLangID");

                entity.Property(e => e.CompanyGroupIvid).HasColumnName("CompanyGroupIVID");

                entity.Property(e => e.GroupIvdesc)
                    .HasColumnName("GroupIVDesc")
                    .HasMaxLength(200);

                entity.Property(e => e.GroupIvname)
                    .IsRequired()
                    .HasColumnName("GroupIVName")
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.CompanyGroupIv)
                    .WithMany(p => p.CrmCompanyGroupsIvLang)
                    .HasForeignKey(d => d.CompanyGroupIvid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyGroupsIV_Lang_CrmCompanyGroupsIV");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyGroupsIvLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyGroupsIV_Lang_Languages");
            });

            modelBuilder.Entity<CrmCompanyGroupsLang>(entity =>
            {
                entity.ToTable("CrmCompanyGroups_Lang");

                entity.Property(e => e.CrmCompanyGroupsLangId).HasColumnName("CrmCompanyGroupsLangID");

                entity.Property(e => e.CompanyGroupId).HasColumnName("CompanyGroupID");

                entity.Property(e => e.GroupDesc).HasMaxLength(200);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.CompanyGroup)
                    .WithMany(p => p.CrmCompanyGroupsLang)
                    .HasForeignKey(d => d.CompanyGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyGroups_Lang_CrmCompanyGroups");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyGroupsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyGroups_Lang_Languages");
            });

            modelBuilder.Entity<CrmCompanyGroupsMulti>(entity =>
            {
                entity.HasKey(e => e.CompanyGroupsMultiId);

                entity.Property(e => e.CompanyGroupsMultiId).HasColumnName("CompanyGroupsMultiID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyGroupsMultiDesc).HasMaxLength(200);

                entity.Property(e => e.CompanyGroupsMultiName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyGroupsMulti)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyGroupsMulti_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyGroupsMulti)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyGroupsMulti_Users");
            });

            modelBuilder.Entity<CrmCompanyGroupsMultiLang>(entity =>
            {
                entity.ToTable("CrmCompanyGroupsMulti_Lang");

                entity.Property(e => e.CrmCompanyGroupsMultiLangId).HasColumnName("CrmCompanyGroupsMultiLangID");

                entity.Property(e => e.CompanyGroupsMultiDesc).HasMaxLength(200);

                entity.Property(e => e.CompanyGroupsMultiId).HasColumnName("CompanyGroupsMultiID");

                entity.Property(e => e.CompanyGroupsMultiName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.CompanyGroupsMulti)
                    .WithMany(p => p.CrmCompanyGroupsMultiLang)
                    .HasForeignKey(d => d.CompanyGroupsMultiId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyGroupsMulti_Lang_CrmCompanyGroupsMulti");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyGroupsMultiLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyGroupsMulti_Lang_Languages");
            });

            modelBuilder.Entity<CrmCompanyJustAccessCity>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmCompanyJustAccessCityCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessCity_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyJustAccessCityFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyJustAccessCity_Users20");

                entity.HasOne(d => d.JustAccessCity)
                    .WithMany(p => p.CrmCompanyJustAccessCity)
                    .HasForeignKey(d => d.JustAccessCityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessCity_City");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyJustAccessCity)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyJustAccessCity_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyJustAccessCityUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessCity_Users1");
            });

            modelBuilder.Entity<CrmCompanyJustAccessCompany>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmCompanyJustAccessCompanyCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessCompany_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyJustAccessCompanyFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyJustAccessCompany_Users20");

                entity.HasOne(d => d.JustAccessCompany)
                    .WithMany(p => p.CrmCompanyJustAccessCompany)
                    .HasForeignKey(d => d.JustAccessCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessCompany_CrmCompany");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyJustAccessCompany)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyJustAccessCompany_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyJustAccessCompanyUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessCompany_Users1");
            });

            modelBuilder.Entity<CrmCompanyJustAccessDepartment>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmCompanyJustAccessDepartmentCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessDepartment_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyJustAccessDepartmentFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyJustAccessDepartment_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyJustAccessDepartment)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyJustAccessDepartment_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyJustAccessDepartmentUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessDepartment_Users1");
            });

            modelBuilder.Entity<CrmCompanyJustAccessGroup>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmCompanyJustAccessGroupCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessGroup_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyJustAccessGroupFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyJustAccessGroup_Users20");

                entity.HasOne(d => d.JustAccessGroup)
                    .WithMany(p => p.CrmCompanyJustAccessGroup)
                    .HasForeignKey(d => d.JustAccessGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessGroup_CrmCompanyGroups");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyJustAccessGroup)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyJustAccessGroup_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyJustAccessGroupUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessGroup_Users1");
            });

            modelBuilder.Entity<CrmCompanyJustAccessGroupIv>(entity =>
            {
                entity.ToTable("CrmCompanyJustAccessGroupIV");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.JustAccessGroupIvid).HasColumnName("JustAccessGroupIVId");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmCompanyJustAccessGroupIvCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessGroupIV_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyJustAccessGroupIvFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyJustAccessGroupIV_Users20");

                entity.HasOne(d => d.JustAccessGroupIv)
                    .WithMany(p => p.CrmCompanyJustAccessGroupIv)
                    .HasForeignKey(d => d.JustAccessGroupIvid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessGroupIV_CrmCompanyGroupsIV");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyJustAccessGroupIv)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyJustAccessGroupIV_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyJustAccessGroupIvUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessGroupIV_Users1");
            });

            modelBuilder.Entity<CrmCompanyJustAccessProvince>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmCompanyJustAccessProvinceCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessProvince_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyJustAccessProvinceFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyJustAccessProvince_Users20");

                entity.HasOne(d => d.JustAccessProvince)
                    .WithMany(p => p.CrmCompanyJustAccessProvince)
                    .HasForeignKey(d => d.JustAccessProvinceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessProvince_Province");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyJustAccessProvince)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyJustAccessProvince_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyJustAccessProvinceUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessProvince_Users1");
            });

            modelBuilder.Entity<CrmCompanyJustAccessSubGroup>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmCompanyJustAccessSubGroupCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessSubGroup_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyJustAccessSubGroupFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyJustAccessSubGroup_Users20");

                entity.HasOne(d => d.JustAccessSubGroup)
                    .WithMany(p => p.CrmCompanyJustAccessSubGroup)
                    .HasForeignKey(d => d.JustAccessSubGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessSubGroup_CrmCompanySubGroups");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyJustAccessSubGroup)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyJustAccessSubGroup_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyJustAccessSubGroupUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyJustAccessSubGroup_Users1");
            });

            modelBuilder.Entity<CrmCompanyLang>(entity =>
            {
                entity.ToTable("CrmCompany_Lang");

                entity.Property(e => e.CrmCompanyLangId).HasColumnName("CrmCompanyLangID");

                entity.Property(e => e.CmpActivityType)
                    .HasColumnName("cmpActivityType")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpAddress)
                    .HasColumnName("cmpAddress")
                    .HasMaxLength(250);

                entity.Property(e => e.CmpAddressDesc)
                    .HasColumnName("cmpAddressDesc")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpDescription)
                    .HasColumnName("cmpDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpFame)
                    .HasColumnName("cmpFame")
                    .HasMaxLength(200);

                entity.Property(e => e.CmpFaxDesc)
                    .HasColumnName("cmpFaxDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpInquiry)
                    .HasColumnName("cmpInquiry")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpInteresting)
                    .HasColumnName("cmpInteresting")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpName)
                    .IsRequired()
                    .HasColumnName("cmpName")
                    .HasMaxLength(300);

                entity.Property(e => e.CmpSpecialPoint)
                    .HasColumnName("cmpSpecialPoint")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpSpecialWordForCi)
                    .HasColumnName("cmpSpecialWordForCI")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CmpTelDesc)
                    .HasColumnName("cmpTelDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpTelIidesc)
                    .HasColumnName("cmpTelIIDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CrmCompanyLang)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompany_Lang_CrmCompany");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompany_Lang_Languages");
            });

            modelBuilder.Entity<CrmCompanyLoGo>(entity =>
            {
                entity.HasKey(e => e.CompanyLoGoId);

                entity.Property(e => e.CompanyLoGoId).HasColumnName("CompanyLoGoID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyLogo)
                    .IsRequired()
                    .HasColumnType("image");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LogoDesc).HasMaxLength(50);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CrmCompanyLoGo)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_CrmCompanyLoGo_CrmCompany");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyLoGoFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyLoGo_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyLoGo)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyLoGo_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyLoGoUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyLoGo_Users");
            });

            modelBuilder.Entity<CrmCompanyMultiGroups>(entity =>
            {
                entity.HasKey(e => new { e.CompanyId, e.CompanyGroupsMultiId });

                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");

                entity.Property(e => e.CompanyGroupsMultiId).HasColumnName("CompanyGroupsMultiID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CompanyGroupsMulti)
                    .WithMany(p => p.CrmCompanyMultiGroups)
                    .HasForeignKey(d => d.CompanyGroupsMultiId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyMultiGroups_CrmCompanyGroupsMulti");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CrmCompanyMultiGroups)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyMultiGroups_CrmCompany");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyMultiGroupsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyMultiGroups_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyMultiGroups)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyMultiGroups_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyMultiGroupsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyMultiGroups_Users");
            });

            modelBuilder.Entity<CrmCompanyPersons>(entity =>
            {
                entity.HasKey(e => e.CompanyPersonId);

                entity.HasIndex(e => e.PrsCompanyId)
                    .HasDatabaseName("IX_CrmCompanyPersons_CmpId");

                entity.HasIndex(e => e.PrsMobile)
                    .HasDatabaseName("IX_CrmCompanyPersons");

                entity.Property(e => e.CompanyPersonId).HasColumnName("CompanyPersonID");

                entity.Property(e => e.AddType).HasDefaultValueSql("((2))");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyPersonTemplateId).HasColumnName("CompanyPersonTemplateID");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ImportDate).HasMaxLength(8);

                entity.Property(e => e.ImportDateTime).HasColumnType("datetime");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrsAddress)
                    .HasColumnName("prsAddress")
                    .HasMaxLength(250);

                entity.Property(e => e.PrsAddressDesc)
                    .HasColumnName("prsAddressDesc")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsBirthDate)
                    .HasColumnName("prsBirthDate")
                    .HasMaxLength(8);

                entity.Property(e => e.PrsBirthDateTime)
                    .HasColumnName("prsBirthDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrsBirthPlace)
                    .HasColumnName("prsBirthPlace")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsCityId).HasColumnName("prsCityId");

                entity.Property(e => e.PrsCompanyId).HasColumnName("prsCompanyId");

                entity.Property(e => e.PrsCountryId).HasColumnName("prsCountryId");

                entity.Property(e => e.PrsDepartmentId).HasColumnName("prsDepartmentId");

                entity.Property(e => e.PrsDescription)
                    .HasColumnName("prsDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.PrsEducationField)
                    .HasColumnName("prsEducationField")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsEducationId).HasColumnName("prsEducationId");

                entity.Property(e => e.PrsEmail)
                    .HasColumnName("prsEmail")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsEmailIi)
                    .HasColumnName("prsEmailII")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFatherName)
                    .HasColumnName("prsFatherName")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFax)
                    .HasColumnName("prsFax")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsFaxDesc)
                    .HasColumnName("prsFaxDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFirstRegisterUserId).HasColumnName("prsFirstRegisterUserId");

                entity.Property(e => e.PrsFname)
                    .HasColumnName("prsFName")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsGroupId).HasColumnName("prsGroupId");

                entity.Property(e => e.PrsIdentityNumber)
                    .HasColumnName("prsIdentityNumber")
                    .HasMaxLength(30);

                entity.Property(e => e.PrsInteresting)
                    .HasColumnName("prsInteresting")
                    .HasMaxLength(500);

                entity.Property(e => e.PrsIsMarried).HasColumnName("prsIsMarried");

                entity.Property(e => e.PrsJobId).HasColumnName("prsJobId");

                entity.Property(e => e.PrsLname)
                    .HasColumnName("prsLName")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsMarriageDate)
                    .HasColumnName("prsMarriageDate")
                    .HasMaxLength(8);

                entity.Property(e => e.PrsMarriageDateTime)
                    .HasColumnName("prsMarriageDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrsMobile)
                    .HasColumnName("prsMobile")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsNationalCode)
                    .HasColumnName("prsNationalCode")
                    .HasMaxLength(30);

                entity.Property(e => e.PrsOrderView).HasColumnName("prsOrderView");

                entity.Property(e => e.PrsPostBox)
                    .HasColumnName("prsPostBox")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsPreTel)
                    .HasColumnName("prsPreTel")
                    .HasMaxLength(10);

                entity.Property(e => e.PrsProvinceId).HasColumnName("prsProvinceId");

                entity.Property(e => e.PrsSexId).HasColumnName("prsSexId");

                entity.Property(e => e.PrsSkill)
                    .HasColumnName("prsSkill")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsSpecialPoint)
                    .HasColumnName("prsSpecialPoint")
                    .HasMaxLength(500);

                entity.Property(e => e.PrsStopSendSms).HasColumnName("prsStopSendSms");

                entity.Property(e => e.PrsStudyField)
                    .HasColumnName("prsStudyField")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsTel)
                    .HasColumnName("prsTel")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsTelDesc)
                    .HasColumnName("prsTelDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsTelIi)
                    .HasColumnName("prsTelII")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsTelUpTo)
                    .HasColumnName("prsTelUpTo")
                    .HasMaxLength(10);

                entity.Property(e => e.PrsTelegramId).HasColumnName("prsTelegramId");

                entity.Property(e => e.PrsTitleId).HasColumnName("prsTitleId");

                entity.Property(e => e.PrsTypeId).HasColumnName("prsTypeId");

                entity.Property(e => e.PrsWebSite)
                    .HasColumnName("prsWebSite")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsWorkingOut).HasColumnName("prsWorkingOut");

                entity.Property(e => e.PrsZipCode)
                    .HasColumnName("prsZipCode")
                    .HasMaxLength(50);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CompanyPersonTemplate)
                    .WithMany(p => p.CrmCompanyPersons)
                    .HasForeignKey(d => d.CompanyPersonTemplateId)
                    .HasConstraintName("FK_CrmCompanyPersons_CrmCompanyPersonsTemplate");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyPersons)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyPersons_Languages");

                entity.HasOne(d => d.PrsCity)
                    .WithMany(p => p.CrmCompanyPersons)
                    .HasForeignKey(d => d.PrsCityId)
                    .HasConstraintName("FK_CrmCompanyPersons_City");

                entity.HasOne(d => d.PrsCompany)
                    .WithMany(p => p.CrmCompanyPersons)
                    .HasForeignKey(d => d.PrsCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyPersons_CrmCompany");

                entity.HasOne(d => d.PrsCountry)
                    .WithMany(p => p.CrmCompanyPersons)
                    .HasForeignKey(d => d.PrsCountryId)
                    .HasConstraintName("FK_CrmCompanyPersons_Country");

                entity.HasOne(d => d.PrsDepartment)
                    .WithMany(p => p.CrmCompanyPersons)
                    .HasForeignKey(d => d.PrsDepartmentId)
                    .HasConstraintName("FK_CrmCompanyPersons_CrmPersonDepartments");

                entity.HasOne(d => d.PrsEducation)
                    .WithMany(p => p.CrmCompanyPersons)
                    .HasForeignKey(d => d.PrsEducationId)
                    .HasConstraintName("FK_CrmCompanyPersons_Education");

                entity.HasOne(d => d.PrsGroup)
                    .WithMany(p => p.CrmCompanyPersons)
                    .HasForeignKey(d => d.PrsGroupId)
                    .HasConstraintName("FK_CrmCompanyPersons_CrmPersonGroups");

                entity.HasOne(d => d.PrsJob)
                    .WithMany(p => p.CrmCompanyPersons)
                    .HasForeignKey(d => d.PrsJobId)
                    .HasConstraintName("FK_CrmCompanyPersons_CrmPersonJobs");

                entity.HasOne(d => d.PrsProvince)
                    .WithMany(p => p.CrmCompanyPersons)
                    .HasForeignKey(d => d.PrsProvinceId)
                    .HasConstraintName("FK_CrmCompanyPersons_Province");

                entity.HasOne(d => d.PrsSex)
                    .WithMany(p => p.CrmCompanyPersons)
                    .HasForeignKey(d => d.PrsSexId)
                    .HasConstraintName("FK_CrmCompanyPersons_Sex");

                entity.HasOne(d => d.PrsTitle)
                    .WithMany(p => p.CrmCompanyPersons)
                    .HasForeignKey(d => d.PrsTitleId)
                    .HasConstraintName("FK_CrmCompanyPersons_CrmPersonTitle");

                entity.HasOne(d => d.PrsType)
                    .WithMany(p => p.CrmCompanyPersons)
                    .HasForeignKey(d => d.PrsTypeId)
                    .HasConstraintName("FK_CrmCompanyPersons_CrmPersonType");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyPersons)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyPersons_Users");
            });

            modelBuilder.Entity<CrmCompanyPersonsLang>(entity =>
            {
                entity.ToTable("CrmCompanyPersons_Lang");

                entity.Property(e => e.CrmCompanyPersonsLangId).HasColumnName("CrmCompanyPersonsLangID");

                entity.Property(e => e.CompanyPersonId).HasColumnName("CompanyPersonID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrsAddress)
                    .HasColumnName("prsAddress")
                    .HasMaxLength(250);

                entity.Property(e => e.PrsAddressDesc)
                    .HasColumnName("prsAddressDesc")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsBirthPlace)
                    .HasColumnName("prsBirthPlace")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsDescription)
                    .HasColumnName("prsDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.PrsEducationField)
                    .HasColumnName("prsEducationField")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFatherName)
                    .HasColumnName("prsFatherName")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFaxDesc)
                    .HasColumnName("prsFaxDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFname)
                    .HasColumnName("prsFName")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsInteresting)
                    .HasColumnName("prsInteresting")
                    .HasMaxLength(500);

                entity.Property(e => e.PrsLname)
                    .HasColumnName("prsLName")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsSkill)
                    .HasColumnName("prsSkill")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsSpecialPoint)
                    .HasColumnName("prsSpecialPoint")
                    .HasMaxLength(500);

                entity.Property(e => e.PrsStudyField)
                    .HasColumnName("prsStudyField")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsTelDesc)
                    .HasColumnName("prsTelDesc")
                    .HasMaxLength(50);

                entity.HasOne(d => d.CompanyPerson)
                    .WithMany(p => p.CrmCompanyPersonsLang)
                    .HasForeignKey(d => d.CompanyPersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyPersons_Lang_CrmCompanyPersons");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyPersonsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyPersons_Lang_Languages");
            });

            modelBuilder.Entity<CrmCompanyPersonsTemplate>(entity =>
            {
                entity.HasKey(e => e.CompanyPersonTemplateId);

                entity.Property(e => e.CompanyPersonTemplateId).HasColumnName("CompanyPersonTemplateID");

                entity.Property(e => e.AddType).HasDefaultValueSql("(2)");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDateTime).HasColumnType("datetime");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ImportDate).HasMaxLength(8);

                entity.Property(e => e.ImportDateTime).HasColumnType("datetime");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrsAddress)
                    .HasColumnName("prsAddress")
                    .HasMaxLength(250);

                entity.Property(e => e.PrsAddressDesc)
                    .HasColumnName("prsAddressDesc")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsBirthDate)
                    .HasColumnName("prsBirthDate")
                    .HasMaxLength(8);

                entity.Property(e => e.PrsBirthDateTime)
                    .HasColumnName("prsBirthDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrsBirthPlace)
                    .HasColumnName("prsBirthPlace")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsCityId).HasColumnName("prsCityId");

                entity.Property(e => e.PrsCountryId).HasColumnName("prsCountryId");

                entity.Property(e => e.PrsDepartmentId).HasColumnName("prsDepartmentId");

                entity.Property(e => e.PrsDescription)
                    .HasColumnName("prsDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.PrsEducationField)
                    .HasColumnName("prsEducationField")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsEducationId).HasColumnName("prsEducationId");

                entity.Property(e => e.PrsEmail)
                    .HasColumnName("prsEmail")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsEmailIi)
                    .HasColumnName("prsEmailII")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFatherName)
                    .HasColumnName("prsFatherName")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFax)
                    .HasColumnName("prsFax")
                    .HasMaxLength(15);

                entity.Property(e => e.PrsFaxDesc)
                    .HasColumnName("prsFaxDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFirstRegisterUserId).HasColumnName("prsFirstRegisterUserId");

                entity.Property(e => e.PrsFname)
                    .HasColumnName("prsFName")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsGroupId).HasColumnName("prsGroupId");

                entity.Property(e => e.PrsIdentityNumber)
                    .HasColumnName("prsIdentityNumber")
                    .HasMaxLength(30);

                entity.Property(e => e.PrsInteresting)
                    .HasColumnName("prsInteresting")
                    .HasMaxLength(500);

                entity.Property(e => e.PrsIsMarried).HasColumnName("prsIsMarried");

                entity.Property(e => e.PrsJobId).HasColumnName("prsJobId");

                entity.Property(e => e.PrsLname)
                    .HasColumnName("prsLName")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsMarriageDate)
                    .HasColumnName("prsMarriageDate")
                    .HasMaxLength(8);

                entity.Property(e => e.PrsMarriageDateTime)
                    .HasColumnName("prsMarriageDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrsMobile)
                    .HasColumnName("prsMobile")
                    .HasMaxLength(15);

                entity.Property(e => e.PrsNationalCode)
                    .HasColumnName("prsNationalCode")
                    .HasMaxLength(30);

                entity.Property(e => e.PrsOrderView).HasColumnName("prsOrderView");

                entity.Property(e => e.PrsPostBox)
                    .HasColumnName("prsPostBox")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsPreTel)
                    .HasColumnName("prsPreTel")
                    .HasMaxLength(10);

                entity.Property(e => e.PrsProvinceId).HasColumnName("prsProvinceId");

                entity.Property(e => e.PrsSexId).HasColumnName("prsSexId");

                entity.Property(e => e.PrsSkill)
                    .HasColumnName("prsSkill")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsSpecialPoint)
                    .HasColumnName("prsSpecialPoint")
                    .HasMaxLength(500);

                entity.Property(e => e.PrsStopSendSms).HasColumnName("prsStopSendSms");

                entity.Property(e => e.PrsStudyField)
                    .HasColumnName("prsStudyField")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsTel)
                    .HasColumnName("prsTel")
                    .HasMaxLength(15);

                entity.Property(e => e.PrsTelDesc)
                    .HasColumnName("prsTelDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsTelIi)
                    .HasColumnName("prsTelII")
                    .HasMaxLength(15);

                entity.Property(e => e.PrsTelUpTo)
                    .HasColumnName("prsTelUpTo")
                    .HasMaxLength(10);

                entity.Property(e => e.PrsTitleId).HasColumnName("prsTitleId");

                entity.Property(e => e.PrsTypeId).HasColumnName("prsTypeId");

                entity.Property(e => e.PrsWebSite)
                    .HasColumnName("prsWebSite")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsWorkingOut).HasColumnName("prsWorkingOut");

                entity.Property(e => e.PrsZipCode)
                    .HasColumnName("prsZipCode")
                    .HasMaxLength(50);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyPersonsTemplate)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyPersonsTemplate_Languages");

                entity.HasOne(d => d.PrsCity)
                    .WithMany(p => p.CrmCompanyPersonsTemplate)
                    .HasForeignKey(d => d.PrsCityId)
                    .HasConstraintName("FK_CrmCompanyPersonsTemplate_City");

                entity.HasOne(d => d.PrsCountry)
                    .WithMany(p => p.CrmCompanyPersonsTemplate)
                    .HasForeignKey(d => d.PrsCountryId)
                    .HasConstraintName("FK_CrmCompanyPersonsTemplate_Country");

                entity.HasOne(d => d.PrsDepartment)
                    .WithMany(p => p.CrmCompanyPersonsTemplate)
                    .HasForeignKey(d => d.PrsDepartmentId)
                    .HasConstraintName("FK_CrmCompanyPersonsTemplate_CrmPersonDepartments");

                entity.HasOne(d => d.PrsEducation)
                    .WithMany(p => p.CrmCompanyPersonsTemplate)
                    .HasForeignKey(d => d.PrsEducationId)
                    .HasConstraintName("FK_CrmCompanyPersonsTemplate_Education");

                entity.HasOne(d => d.PrsGroup)
                    .WithMany(p => p.CrmCompanyPersonsTemplate)
                    .HasForeignKey(d => d.PrsGroupId)
                    .HasConstraintName("FK_CrmCompanyPersonsTemplate_CrmPersonGroups");

                entity.HasOne(d => d.PrsJob)
                    .WithMany(p => p.CrmCompanyPersonsTemplate)
                    .HasForeignKey(d => d.PrsJobId)
                    .HasConstraintName("FK_CrmCompanyPersonsTemplate_CrmPersonJobs");

                entity.HasOne(d => d.PrsProvince)
                    .WithMany(p => p.CrmCompanyPersonsTemplate)
                    .HasForeignKey(d => d.PrsProvinceId)
                    .HasConstraintName("FK_CrmCompanyPersonsTemplate_Province");

                entity.HasOne(d => d.PrsSex)
                    .WithMany(p => p.CrmCompanyPersonsTemplate)
                    .HasForeignKey(d => d.PrsSexId)
                    .HasConstraintName("FK_CrmCompanyPersonsTemplate_Sex");

                entity.HasOne(d => d.PrsTitle)
                    .WithMany(p => p.CrmCompanyPersonsTemplate)
                    .HasForeignKey(d => d.PrsTitleId)
                    .HasConstraintName("FK_CrmCompanyPersonsTemplate_CrmPersonTitle");

                entity.HasOne(d => d.PrsType)
                    .WithMany(p => p.CrmCompanyPersonsTemplate)
                    .HasForeignKey(d => d.PrsTypeId)
                    .HasConstraintName("FK_CrmCompanyPersonsTemplate_CrmPersonType");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyPersonsTemplate)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyPersonsTemplate_Users");
            });

            modelBuilder.Entity<CrmCompanyPersonsTemplateLang>(entity =>
            {
                entity.HasKey(e => e.CompanyPersonTemplateLangId);

                entity.ToTable("CrmCompanyPersonsTemplate_Lang");

                entity.Property(e => e.CompanyPersonTemplateLangId).HasColumnName("CompanyPersonTemplateLangID");

                entity.Property(e => e.CompanyPersonTemplateId).HasColumnName("CompanyPersonTemplateID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrsAddress)
                    .HasColumnName("prsAddress")
                    .HasMaxLength(250);

                entity.Property(e => e.PrsAddressDesc)
                    .HasColumnName("prsAddressDesc")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsBirthPlace)
                    .HasColumnName("prsBirthPlace")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsDescription)
                    .HasColumnName("prsDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.PrsEducationField)
                    .HasColumnName("prsEducationField")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFatherName)
                    .HasColumnName("prsFatherName")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFaxDesc)
                    .HasColumnName("prsFaxDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFname)
                    .HasColumnName("prsFName")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsInteresting)
                    .HasColumnName("prsInteresting")
                    .HasMaxLength(500);

                entity.Property(e => e.PrsLname)
                    .HasColumnName("prsLName")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsSkill)
                    .HasColumnName("prsSkill")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsSpecialPoint)
                    .HasColumnName("prsSpecialPoint")
                    .HasMaxLength(500);

                entity.Property(e => e.PrsStudyField)
                    .HasColumnName("prsStudyField")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsTelDesc)
                    .HasColumnName("prsTelDesc")
                    .HasMaxLength(50);

                entity.HasOne(d => d.CompanyPersonTemplate)
                    .WithMany(p => p.CrmCompanyPersonsTemplateLang)
                    .HasForeignKey(d => d.CompanyPersonTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyPersonsTemplate_Lang_CrmCompanyPersonsTemplate");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyPersonsTemplateLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyPersonsTemplate_Lang_Languages");
            });

            modelBuilder.Entity<CrmCompanyPersonsTmp>(entity =>
            {
                entity.HasKey(e => e.CompanyPersonId);

                entity.Property(e => e.CompanyPersonId).HasColumnName("CompanyPersonID");

                entity.Property(e => e.AddType).HasDefaultValueSql("((2))");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyPersonTemplateId).HasColumnName("CompanyPersonTemplateID");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ImportDate).HasMaxLength(8);

                entity.Property(e => e.ImportDateTime).HasColumnType("datetime");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PersonPicture).HasColumnType("image");

                entity.Property(e => e.PrsAddress)
                    .HasColumnName("prsAddress")
                    .HasMaxLength(250);

                entity.Property(e => e.PrsAddressDesc)
                    .HasColumnName("prsAddressDesc")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsBirthDate)
                    .HasColumnName("prsBirthDate")
                    .HasMaxLength(8);

                entity.Property(e => e.PrsBirthDateTime)
                    .HasColumnName("prsBirthDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrsBirthPlace)
                    .HasColumnName("prsBirthPlace")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsCityId).HasColumnName("prsCityId");

                entity.Property(e => e.PrsCompanyId).HasColumnName("prsCompanyId");

                entity.Property(e => e.PrsCountryId).HasColumnName("prsCountryId");

                entity.Property(e => e.PrsDepartmentId).HasColumnName("prsDepartmentId");

                entity.Property(e => e.PrsDescription)
                    .HasColumnName("prsDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.PrsEducationField)
                    .HasColumnName("prsEducationField")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsEducationId).HasColumnName("prsEducationId");

                entity.Property(e => e.PrsEmail)
                    .HasColumnName("prsEmail")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsEmailIi)
                    .HasColumnName("prsEmailII")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFatherName)
                    .HasColumnName("prsFatherName")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFax)
                    .HasColumnName("prsFax")
                    .HasMaxLength(15);

                entity.Property(e => e.PrsFaxDesc)
                    .HasColumnName("prsFaxDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFirstRegisterUserId).HasColumnName("prsFirstRegisterUserId");

                entity.Property(e => e.PrsFname)
                    .HasColumnName("prsFName")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsGroupId).HasColumnName("prsGroupId");

                entity.Property(e => e.PrsIdentityNumber)
                    .HasColumnName("prsIdentityNumber")
                    .HasMaxLength(30);

                entity.Property(e => e.PrsInteresting)
                    .HasColumnName("prsInteresting")
                    .HasMaxLength(500);

                entity.Property(e => e.PrsIsMarried).HasColumnName("prsIsMarried");

                entity.Property(e => e.PrsJobId).HasColumnName("prsJobId");

                entity.Property(e => e.PrsLname)
                    .HasColumnName("prsLName")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsMarriageDate)
                    .HasColumnName("prsMarriageDate")
                    .HasMaxLength(8);

                entity.Property(e => e.PrsMarriageDateTime)
                    .HasColumnName("prsMarriageDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrsMobile)
                    .HasColumnName("prsMobile")
                    .HasMaxLength(15);

                entity.Property(e => e.PrsNationalCode)
                    .HasColumnName("prsNationalCode")
                    .HasMaxLength(30);

                entity.Property(e => e.PrsOrderView).HasColumnName("prsOrderView");

                entity.Property(e => e.PrsPostBox)
                    .HasColumnName("prsPostBox")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsPreTel)
                    .HasColumnName("prsPreTel")
                    .HasMaxLength(10);

                entity.Property(e => e.PrsProvinceId).HasColumnName("prsProvinceId");

                entity.Property(e => e.PrsSexId).HasColumnName("prsSexId");

                entity.Property(e => e.PrsSkill)
                    .HasColumnName("prsSkill")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsSpecialPoint)
                    .HasColumnName("prsSpecialPoint")
                    .HasMaxLength(500);

                entity.Property(e => e.PrsStopSendSms).HasColumnName("prsStopSendSms");

                entity.Property(e => e.PrsStudyField)
                    .HasColumnName("prsStudyField")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsTel)
                    .HasColumnName("prsTel")
                    .HasMaxLength(15);

                entity.Property(e => e.PrsTelDesc)
                    .HasColumnName("prsTelDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsTelIi)
                    .HasColumnName("prsTelII")
                    .HasMaxLength(15);

                entity.Property(e => e.PrsTelUpTo)
                    .HasColumnName("prsTelUpTo")
                    .HasMaxLength(10);

                entity.Property(e => e.PrsTelegramId).HasColumnName("prsTelegramId");

                entity.Property(e => e.PrsTitleId).HasColumnName("prsTitleId");

                entity.Property(e => e.PrsTypeId).HasColumnName("prsTypeId");

                entity.Property(e => e.PrsWebSite)
                    .HasColumnName("prsWebSite")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsWorkingOut).HasColumnName("prsWorkingOut");

                entity.Property(e => e.PrsZipCode)
                    .HasColumnName("prsZipCode")
                    .HasMaxLength(50);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CompanyPersonTemplate)
                    .WithMany(p => p.CrmCompanyPersonsTmp)
                    .HasForeignKey(d => d.CompanyPersonTemplateId)
                    .HasConstraintName("FK_CrmCompanyPersonsTmp_CrmCompanyPersonsTemplate");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyPersonsTmpFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyPersonsTmp_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyPersonsTmp)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyPersonsTmp_Languages");

                entity.HasOne(d => d.PrsCity)
                    .WithMany(p => p.CrmCompanyPersonsTmp)
                    .HasForeignKey(d => d.PrsCityId)
                    .HasConstraintName("FK_CrmCompanyPersonsTmp_City");

                entity.HasOne(d => d.PrsCompany)
                    .WithMany(p => p.CrmCompanyPersonsTmp)
                    .HasForeignKey(d => d.PrsCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyPersonsTmp_CrmCompanyTmp");

                entity.HasOne(d => d.PrsCountry)
                    .WithMany(p => p.CrmCompanyPersonsTmp)
                    .HasForeignKey(d => d.PrsCountryId)
                    .HasConstraintName("FK_CrmCompanyPersonsTmp_Country");

                entity.HasOne(d => d.PrsDepartment)
                    .WithMany(p => p.CrmCompanyPersonsTmp)
                    .HasForeignKey(d => d.PrsDepartmentId)
                    .HasConstraintName("FK_CrmCompanyPersonsTmp_CrmPersonDepartments");

                entity.HasOne(d => d.PrsEducation)
                    .WithMany(p => p.CrmCompanyPersonsTmp)
                    .HasForeignKey(d => d.PrsEducationId)
                    .HasConstraintName("FK_CrmCompanyPersonsTmp_Education");

                entity.HasOne(d => d.PrsFirstRegisterUser)
                    .WithMany(p => p.CrmCompanyPersonsTmpPrsFirstRegisterUser)
                    .HasForeignKey(d => d.PrsFirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyPersonsTmp_Users3");

                entity.HasOne(d => d.PrsGroup)
                    .WithMany(p => p.CrmCompanyPersonsTmp)
                    .HasForeignKey(d => d.PrsGroupId)
                    .HasConstraintName("FK_CrmCompanyPersonsTmp_CrmPersonGroups");

                entity.HasOne(d => d.PrsJob)
                    .WithMany(p => p.CrmCompanyPersonsTmp)
                    .HasForeignKey(d => d.PrsJobId)
                    .HasConstraintName("FK_CrmCompanyPersonsTmp_CrmPersonJobs");

                entity.HasOne(d => d.PrsProvince)
                    .WithMany(p => p.CrmCompanyPersonsTmp)
                    .HasForeignKey(d => d.PrsProvinceId)
                    .HasConstraintName("FK_CrmCompanyPersonsTmp_Province");

                entity.HasOne(d => d.PrsSex)
                    .WithMany(p => p.CrmCompanyPersonsTmp)
                    .HasForeignKey(d => d.PrsSexId)
                    .HasConstraintName("FK_CrmCompanyPersonsTmp_Sex");

                entity.HasOne(d => d.PrsTitle)
                    .WithMany(p => p.CrmCompanyPersonsTmp)
                    .HasForeignKey(d => d.PrsTitleId)
                    .HasConstraintName("FK_CrmCompanyPersonsTmp_CrmPersonTitle");

                entity.HasOne(d => d.PrsType)
                    .WithMany(p => p.CrmCompanyPersonsTmp)
                    .HasForeignKey(d => d.PrsTypeId)
                    .HasConstraintName("FK_CrmCompanyPersonsTmp_CrmPersonType");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyPersonsTmpUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyPersonsTmp_Users");
            });

            modelBuilder.Entity<CrmCompanyPersonsTmpLang>(entity =>
            {
                entity.HasKey(e => e.CrmCompanyPersonsLangId);

                entity.ToTable("CrmCompanyPersonsTmp_Lang");

                entity.Property(e => e.CrmCompanyPersonsLangId).HasColumnName("CrmCompanyPersonsLangID");

                entity.Property(e => e.CompanyPersonId).HasColumnName("CompanyPersonID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrsAddress)
                    .HasColumnName("prsAddress")
                    .HasMaxLength(250);

                entity.Property(e => e.PrsAddressDesc)
                    .HasColumnName("prsAddressDesc")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsBirthPlace)
                    .HasColumnName("prsBirthPlace")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsDescription)
                    .HasColumnName("prsDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.PrsEducationField)
                    .HasColumnName("prsEducationField")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFatherName)
                    .HasColumnName("prsFatherName")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFaxDesc)
                    .HasColumnName("prsFaxDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFname)
                    .HasColumnName("prsFName")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsInteresting)
                    .HasColumnName("prsInteresting")
                    .HasMaxLength(500);

                entity.Property(e => e.PrsLname)
                    .HasColumnName("prsLName")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsSkill)
                    .HasColumnName("prsSkill")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsSpecialPoint)
                    .HasColumnName("prsSpecialPoint")
                    .HasMaxLength(500);

                entity.Property(e => e.PrsStudyField)
                    .HasColumnName("prsStudyField")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsTelDesc)
                    .HasColumnName("prsTelDesc")
                    .HasMaxLength(50);

                entity.HasOne(d => d.CompanyPerson)
                    .WithMany(p => p.CrmCompanyPersonsTmpLang)
                    .HasForeignKey(d => d.CompanyPersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyPersonsTmp_Lang_CrmCompanyPersonsTmp");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyPersonsTmpLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyPersonsTmp_Lang_Languages");
            });

            modelBuilder.Entity<CrmCompanyPictureAlbums>(entity =>
            {
                entity.HasKey(e => e.CompanyPictureAlbumId);

                entity.Property(e => e.CompanyPictureAlbumId).HasColumnName("CompanyPictureAlbumID");

                entity.Property(e => e.AlbumDate).HasMaxLength(50);

                entity.Property(e => e.AlbumName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CrmCompanyPictureAlbums)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyPictureAlbums_CrmCompany");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyPictureAlbumsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyPictureAlbums_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyPictureAlbums)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyPictureAlbums_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyPictureAlbumsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyPictureAlbums_Users");
            });

            modelBuilder.Entity<CrmCompanyPictures>(entity =>
            {
                entity.HasKey(e => e.CompanyPictureId);

                entity.Property(e => e.CompanyPictureId).HasColumnName("CompanyPictureID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Picture)
                    .IsRequired()
                    .HasColumnType("image");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Album)
                    .WithMany(p => p.CrmCompanyPictures)
                    .HasForeignKey(d => d.AlbumId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyPictures_CrmCompanyPictureAlbums");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyPicturesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyPictures_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyPictures)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyPictures_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyPicturesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyPictures_Users");
            });

            modelBuilder.Entity<CrmCompanyPresentation>(entity =>
            {
                entity.HasKey(e => e.CompanyPresentationId);

                entity.Property(e => e.CompanyPresentationId).HasColumnName("CompanyPresentationID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Presentation)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyPresentation)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyPresentation_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyPresentation)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyPresentation_Users");
            });

            modelBuilder.Entity<CrmCompanyPresentationLang>(entity =>
            {
                entity.ToTable("CrmCompanyPresentation_Lang");

                entity.Property(e => e.CrmCompanyPresentationLangId).HasColumnName("CrmCompanyPresentationLangID");

                entity.Property(e => e.CompanyPresentationId).HasColumnName("CompanyPresentationID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Presentation)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.CompanyPresentation)
                    .WithMany(p => p.CrmCompanyPresentationLang)
                    .HasForeignKey(d => d.CompanyPresentationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyPresentation_Lang_CrmCompanyPresentation");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyPresentationLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyPresentation_Lang_Languages");
            });

            modelBuilder.Entity<CrmCompanySubGroups>(entity =>
            {
                entity.HasKey(e => e.CompanySubGroupId);

                entity.Property(e => e.CompanySubGroupId).HasColumnName("CompanySubGroupID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.SubGroupDesc).HasMaxLength(200);

                entity.Property(e => e.SubGroupName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.CrmCompanySubGroups)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanySubGroups_CrmCompanyGroups");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanySubGroups)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanySubGroups_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanySubGroups)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanySubGroups_Users");
            });

            modelBuilder.Entity<CrmCompanySubGroupsLang>(entity =>
            {
                entity.ToTable("CrmCompanySubGroups_Lang");

                entity.Property(e => e.CrmCompanySubGroupsLangId).HasColumnName("CrmCompanySubGroupsLangID");

                entity.Property(e => e.CompanySubGroupId).HasColumnName("CompanySubGroupID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.SubGroupDesc).HasMaxLength(200);

                entity.Property(e => e.SubGroupName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.CompanySubGroup)
                    .WithMany(p => p.CrmCompanySubGroupsLang)
                    .HasForeignKey(d => d.CompanySubGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanySubGroups_Lang_CrmCompanySubGroups");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanySubGroupsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanySubGroups_Lang_Languages");
            });

            modelBuilder.Entity<CrmCompanyTitle>(entity =>
            {
                entity.HasKey(e => e.CompanyTitleId);

                entity.Property(e => e.CompanyTitleId).HasColumnName("CompanyTitleID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyTitle)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyTitle_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyTitle)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyTitle_Users");
            });

            modelBuilder.Entity<CrmCompanyTitleLang>(entity =>
            {
                entity.ToTable("CrmCompanyTitle_Lang");

                entity.Property(e => e.CrmCompanyTitleLangId).HasColumnName("CrmCompanyTitleLangID");

                entity.Property(e => e.CompanyTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CompanyTitleId).HasColumnName("CompanyTitleID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.CompanyTitleNavigation)
                    .WithMany(p => p.CrmCompanyTitleLang)
                    .HasForeignKey(d => d.CompanyTitleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyTitle_Lang_CrmCompanyTitle");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyTitleLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyTitle_Lang_Languages");
            });

            modelBuilder.Entity<CrmCompanyTmp>(entity =>
            {
                entity.HasKey(e => e.CompanyId);

                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");

                entity.Property(e => e.AddType).HasDefaultValueSql("((1))");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CmpAccInquiry)
                    .HasColumnName("cmpAccInquiry")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpAccountNumber)
                    .HasColumnName("cmpAccountNumber")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpActivityType)
                    .HasColumnName("cmpActivityType")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpAddress)
                    .HasColumnName("cmpAddress")
                    .HasMaxLength(250);

                entity.Property(e => e.CmpAddressDesc)
                    .HasColumnName("cmpAddressDesc")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpBuyLimit)
                    .HasColumnName("cmpBuyLimit")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpCityId).HasColumnName("cmpCityId");

                entity.Property(e => e.CmpCode)
                    .HasColumnName("cmpCode")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpCoordinateLastDate)
                    .HasColumnName("cmpCoordinateLastDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CmpCoordinateLastDatePersian)
                    .HasColumnName("cmpCoordinateLastDatePersian")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CmpCoordinateLastUserId).HasColumnName("cmpCoordinateLastUserId");

                entity.Property(e => e.CmpCoordinateLatitude)
                    .HasColumnName("cmpCoordinateLatitude")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpCoordinateLongitude)
                    .HasColumnName("cmpCoordinateLongitude")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpCoordinateZoomLevel).HasColumnName("cmpCoordinateZoomLevel");

                entity.Property(e => e.CmpCountryId).HasColumnName("cmpCountryId");

                entity.Property(e => e.CmpDescription)
                    .HasColumnName("cmpDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpEconomicCode)
                    .HasColumnName("cmpEconomicCode")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpEffectiveDatePersian)
                    .HasColumnName("cmpEffectiveDatePersian")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CmpEffectiveDateTime)
                    .HasColumnName("cmpEffectiveDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.CmpEmail)
                    .HasColumnName("cmpEmail")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpFame)
                    .HasColumnName("cmpFame")
                    .HasMaxLength(200);

                entity.Property(e => e.CmpFax)
                    .HasColumnName("cmpFax")
                    .HasMaxLength(15);

                entity.Property(e => e.CmpFaxDesc)
                    .HasColumnName("cmpFaxDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpFirstRegisterUserId).HasColumnName("cmpFirstRegisterUserId");

                entity.Property(e => e.CmpFreight)
                    .HasColumnName("cmpFreight")
                    .HasMaxLength(200);

                entity.Property(e => e.CmpGroupId).HasColumnName("cmpGroupId");

                entity.Property(e => e.CmpGroupIdIi).HasColumnName("cmpGroupIdII");

                entity.Property(e => e.CmpGroupIdIii).HasColumnName("cmpGroupIdIII");

                entity.Property(e => e.CmpGroupIdIv).HasColumnName("cmpGroupIdIV");

                entity.Property(e => e.CmpInquiry)
                    .HasColumnName("cmpInquiry")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpInteresting)
                    .HasColumnName("cmpInteresting")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpMobile)
                    .HasColumnName("cmpMobile")
                    .HasMaxLength(15);

                entity.Property(e => e.CmpMultiGroups)
                    .HasColumnName("cmpMultiGroups")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpName)
                    .IsRequired()
                    .HasColumnName("cmpName")
                    .HasMaxLength(300);

                entity.Property(e => e.CmpNameEng)
                    .HasColumnName("cmpNameEng")
                    .HasMaxLength(300);

                entity.Property(e => e.CmpNationalCode)
                    .HasColumnName("cmpNationalCode")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpNumber).HasColumnName("cmpNumber");

                entity.Property(e => e.CmpPassword)
                    .HasColumnName("cmpPassword")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpPostBox)
                    .HasColumnName("cmpPostBox")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpPreTel)
                    .HasColumnName("cmpPreTel")
                    .HasMaxLength(10);

                entity.Property(e => e.CmpPreTelIi)
                    .HasColumnName("cmpPreTelII")
                    .HasMaxLength(10);

                entity.Property(e => e.CmpPresentationId).HasColumnName("cmpPresentationId");

                entity.Property(e => e.CmpProvinceId).HasColumnName("cmpProvinceId");

                entity.Property(e => e.CmpReferUserId).HasColumnName("cmpReferUserId");

                entity.Property(e => e.CmpRegistrationNumber)
                    .HasColumnName("cmpRegistrationNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpSpecialPoint)
                    .HasColumnName("cmpSpecialPoint")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpSpecialWordForCi)
                    .HasColumnName("cmpSpecialWordForCI")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CmpSubGroupId).HasColumnName("cmpSubGroupId");

                entity.Property(e => e.CmpTel)
                    .HasColumnName("cmpTel")
                    .HasMaxLength(15);

                entity.Property(e => e.CmpTelDesc)
                    .HasColumnName("cmpTelDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpTelIi)
                    .HasColumnName("cmpTelII")
                    .HasMaxLength(15);

                entity.Property(e => e.CmpTelIidesc)
                    .HasColumnName("cmpTelIIDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpTelUpTo)
                    .HasColumnName("cmpTelUpTo")
                    .HasMaxLength(10);

                entity.Property(e => e.CmpTelUpToIi)
                    .HasColumnName("cmpTelUpToII")
                    .HasMaxLength(10);

                entity.Property(e => e.CmpTitleId).HasColumnName("cmpTitleId");

                entity.Property(e => e.CmpTypeId).HasColumnName("cmpTypeId");

                entity.Property(e => e.CmpUserName)
                    .HasColumnName("cmpUserName")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpWebSite)
                    .HasColumnName("cmpWebSite")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpZipCode)
                    .HasColumnName("cmpZipCode")
                    .HasMaxLength(50);

                entity.Property(e => e.CompanyLogo).HasColumnType("image");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ImportDate)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.ImportDateTime).HasColumnType("datetime");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CmpCity)
                    .WithMany(p => p.CrmCompanyTmp)
                    .HasForeignKey(d => d.CmpCityId)
                    .HasConstraintName("FK_CrmCompanyTmp_City");

                entity.HasOne(d => d.CmpCoordinateLastUser)
                    .WithMany(p => p.CrmCompanyTmpCmpCoordinateLastUser)
                    .HasForeignKey(d => d.CmpCoordinateLastUserId)
                    .HasConstraintName("FK_CrmCompanyTmp_Users40");

                entity.HasOne(d => d.CmpCountry)
                    .WithMany(p => p.CrmCompanyTmp)
                    .HasForeignKey(d => d.CmpCountryId)
                    .HasConstraintName("FK_CrmCompanyTmp_Country");

                entity.HasOne(d => d.CmpFirstRegisterUser)
                    .WithMany(p => p.CrmCompanyTmpCmpFirstRegisterUser)
                    .HasForeignKey(d => d.CmpFirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyTmp_Users1");

                entity.HasOne(d => d.CmpGroup)
                    .WithMany(p => p.CrmCompanyTmp)
                    .HasForeignKey(d => d.CmpGroupId)
                    .HasConstraintName("FK_CrmCompanyTmp_CrmCompanyGroups");

                entity.HasOne(d => d.CmpGroupIdIiNavigation)
                    .WithMany(p => p.CrmCompanyTmp)
                    .HasForeignKey(d => d.CmpGroupIdIi)
                    .HasConstraintName("FK_CrmCompanyTmp_CrmCompanyGroupsII");

                entity.HasOne(d => d.CmpGroupIdIiiNavigation)
                    .WithMany(p => p.CrmCompanyTmp)
                    .HasForeignKey(d => d.CmpGroupIdIii)
                    .HasConstraintName("FK_CrmCompanyTmp_CrmCompanyGroupsIII");

                entity.HasOne(d => d.CmpGroupIdIvNavigation)
                    .WithMany(p => p.CrmCompanyTmp)
                    .HasForeignKey(d => d.CmpGroupIdIv)
                    .HasConstraintName("FK_CrmCompanyTmp_CrmCompanyGroupsIV");

                entity.HasOne(d => d.CmpPresentation)
                    .WithMany(p => p.CrmCompanyTmp)
                    .HasForeignKey(d => d.CmpPresentationId)
                    .HasConstraintName("FK_CrmCompanyTmp_CrmCompanyPresentation");

                entity.HasOne(d => d.CmpProvince)
                    .WithMany(p => p.CrmCompanyTmp)
                    .HasForeignKey(d => d.CmpProvinceId)
                    .HasConstraintName("FK_CrmCompanyTmp_Province");

                entity.HasOne(d => d.CmpReferUser)
                    .WithMany(p => p.CrmCompanyTmpCmpReferUser)
                    .HasForeignKey(d => d.CmpReferUserId)
                    .HasConstraintName("FK_CrmCompanyTmp_Users4");

                entity.HasOne(d => d.CmpSubGroup)
                    .WithMany(p => p.CrmCompanyTmp)
                    .HasForeignKey(d => d.CmpSubGroupId)
                    .HasConstraintName("FK_CrmCompanyTmp_CrmCompanySubGroups");

                entity.HasOne(d => d.CmpTitle)
                    .WithMany(p => p.CrmCompanyTmp)
                    .HasForeignKey(d => d.CmpTitleId)
                    .HasConstraintName("FK_CrmCompanyTmp_CrmCompanyTitle");

                entity.HasOne(d => d.CmpType)
                    .WithMany(p => p.CrmCompanyTmp)
                    .HasForeignKey(d => d.CmpTypeId)
                    .HasConstraintName("FK_CrmCompanyTmp_CrmCompanyType");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyTmpFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyTmp_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyTmp)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyTmp_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyTmpUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyTmp_Users");
            });

            modelBuilder.Entity<CrmCompanyTmpLang>(entity =>
            {
                entity.HasKey(e => e.CrmCompanyLangId)
                    .HasName("PK_CrmCompanyTmpLang");

                entity.ToTable("CrmCompanyTmp_Lang");

                entity.Property(e => e.CrmCompanyLangId).HasColumnName("CrmCompanyLangID");

                entity.Property(e => e.CmpActivityType)
                    .HasColumnName("cmpActivityType")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpAddress)
                    .HasColumnName("cmpAddress")
                    .HasMaxLength(250);

                entity.Property(e => e.CmpAddressDesc)
                    .HasColumnName("cmpAddressDesc")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpDescription)
                    .HasColumnName("cmpDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpFame)
                    .HasColumnName("cmpFame")
                    .HasMaxLength(200);

                entity.Property(e => e.CmpFaxDesc)
                    .HasColumnName("cmpFaxDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpInquiry)
                    .HasColumnName("cmpInquiry")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpInteresting)
                    .HasColumnName("cmpInteresting")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpName)
                    .IsRequired()
                    .HasColumnName("cmpName")
                    .HasMaxLength(300);

                entity.Property(e => e.CmpSpecialPoint)
                    .HasColumnName("cmpSpecialPoint")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpSpecialWordForCi)
                    .HasColumnName("cmpSpecialWordForCI")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CmpTelDesc)
                    .HasColumnName("cmpTelDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpTelIidesc)
                    .HasColumnName("cmpTelIIDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CrmCompanyTmpLang)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyTmp_Lang_CrmCompanyTmp");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyTmpLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyTmp_Lang_Languages");
            });

            modelBuilder.Entity<CrmCompanyType>(entity =>
            {
                entity.HasKey(e => e.CompanyTypeId);

                entity.Property(e => e.CompanyTypeId).HasColumnName("CompanyTypeID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyTypeName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyType_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyType)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyType_Users");
            });

            modelBuilder.Entity<CrmCompanyTypeLang>(entity =>
            {
                entity.ToTable("CrmCompanyType_Lang");

                entity.Property(e => e.CrmCompanyTypeLangId).HasColumnName("CrmCompanyTypeLangID");

                entity.Property(e => e.CompanyTypeId).HasColumnName("CompanyTypeID");

                entity.Property(e => e.CompanyTypeName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.CompanyType)
                    .WithMany(p => p.CrmCompanyTypeLang)
                    .HasForeignKey(d => d.CompanyTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyType_Lang_CrmCompanyType");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyTypeLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyType_Lang_Languages");
            });

            modelBuilder.Entity<CrmCompanyUserForbidden>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CanDel).HasDefaultValueSql("(0)");

                entity.Property(e => e.CanEdit).HasDefaultValueSql("(0)");

                entity.Property(e => e.CanSee).HasDefaultValueSql("(0)");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Reason).HasMaxLength(200);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmCompanyUserForbiddenCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyUserForbidden_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmCompanyUserForbiddenFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmCompanyUserForbidden_Users20");

                entity.HasOne(d => d.ForbiddenCompany)
                    .WithMany(p => p.CrmCompanyUserForbidden)
                    .HasForeignKey(d => d.ForbiddenCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyUserForbidden_CrmCompany");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmCompanyUserForbidden)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmCompanyUserForbidden_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmCompanyUserForbiddenUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmCompanyUserForbidden_Users1");
            });

            modelBuilder.Entity<CrmConversation>(entity =>
            {
                entity.HasKey(e => e.ConversationId);

                entity.HasIndex(e => e.CnvsCompanyId)
                    .HasDatabaseName("IX_CrmConversation_CompanyId");

                entity.HasIndex(e => e.CnvsProjectId)
                    .HasDatabaseName("IX_CrmConversation_ProjectId");

                entity.HasIndex(e => e.CnvsStatusId)
                    .HasDatabaseName("IX_CrmConversation_StatusId");

                entity.Property(e => e.ConversationId).HasColumnName("ConversationID");

                entity.Property(e => e.ApiId).HasMaxLength(200);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CnvsCompanyId).HasColumnName("cnvsCompanyId");

                entity.Property(e => e.CnvsCoordinateLastDate)
                    .HasColumnName("cnvsCoordinateLastDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CnvsCoordinateLastDatePersian)
                    .HasColumnName("cnvsCoordinateLastDatePersian")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CnvsCoordinateLatitude)
                    .HasColumnName("cnvsCoordinateLatitude")
                    .HasMaxLength(100);

                entity.Property(e => e.CnvsCoordinateLongitude)
                    .HasColumnName("cnvsCoordinateLongitude")
                    .HasMaxLength(100);

                entity.Property(e => e.CnvsDate)
                    .HasColumnName("cnvsDate")
                    .HasMaxLength(8);

                entity.Property(e => e.CnvsDateTime)
                    .HasColumnName("cnvsDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.CnvsDay)
                    .HasColumnName("cnvsDay")
                    .HasMaxLength(20);

                entity.Property(e => e.CnvsDesc)
                    .IsRequired()
                    .HasColumnName("cnvsDesc")
                    .HasMaxLength(2000);

                entity.Property(e => e.CnvsDoingTime).HasColumnName("cnvsDoingTime");

                entity.Property(e => e.CnvsFirstRegisterDate)
                    .HasColumnName("cnvsFirstRegisterDate")
                    .HasMaxLength(8);

                entity.Property(e => e.CnvsFirstRegisterDateTime)
                    .HasColumnName("cnvsFirstRegisterDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.CnvsFirstRegisterUserId).HasColumnName("cnvsFirstRegisterUserId");

                entity.Property(e => e.CnvsFocmpCanSee).HasColumnName("cnvsFOCmpCanSee");

                entity.Property(e => e.CnvsIsBookMark).HasColumnName("cnvsIsBookMark");

                entity.Property(e => e.CnvsIsCopy).HasColumnName("cnvsIsCopy");

                entity.Property(e => e.CnvsIsTicket).HasColumnName("cnvsIsTicket");

                entity.Property(e => e.CnvsPersonId).HasColumnName("cnvsPersonId");

                entity.Property(e => e.CnvsPriorityId).HasColumnName("cnvsPriorityId");

                entity.Property(e => e.CnvsProjectId).HasColumnName("cnvsProjectId");

                entity.Property(e => e.CnvsReferDesc)
                    .HasColumnName("cnvsReferDesc")
                    .HasMaxLength(500);

                entity.Property(e => e.CnvsReferUserId).HasColumnName("cnvsReferUserId");

                entity.Property(e => e.CnvsRemindDate)
                    .HasColumnName("cnvsRemindDate")
                    .HasMaxLength(8);

                entity.Property(e => e.CnvsRemindDateForAllarm)
                    .HasColumnName("cnvsRemindDateForAllarm")
                    .HasMaxLength(8);

                entity.Property(e => e.CnvsRemindDateTime)
                    .HasColumnName("cnvsRemindDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.CnvsRemindDateTimeForAllarm)
                    .HasColumnName("cnvsRemindDateTimeForAllarm")
                    .HasColumnType("datetime");

                entity.Property(e => e.CnvsRemindOk).HasColumnName("cnvsRemindOk");

                entity.Property(e => e.CnvsRemindTime)
                    .HasColumnName("cnvsRemindTime")
                    .HasMaxLength(15);

                entity.Property(e => e.CnvsStatusId).HasColumnName("cnvsStatusId");

                entity.Property(e => e.CnvsSubject)
                    .HasColumnName("cnvsSubject")
                    .HasMaxLength(50);

                entity.Property(e => e.CnvsTicketIsRead).HasColumnName("cnvsTicketIsRead");

                entity.Property(e => e.CnvsTime)
                    .HasColumnName("cnvsTime")
                    .HasMaxLength(15);

                entity.Property(e => e.CnvsTopicId).HasColumnName("cnvsTopicId");

                entity.Property(e => e.CnvsUserId).HasColumnName("cnvsUserId");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CnvsCompany)
                    .WithMany(p => p.CrmConversation)
                    .HasForeignKey(d => d.CnvsCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversation_CrmCompany");

                entity.HasOne(d => d.CnvsFirstRegisterUser)
                    .WithMany(p => p.CrmConversationCnvsFirstRegisterUser)
                    .HasForeignKey(d => d.CnvsFirstRegisterUserId)
                    .HasConstraintName("FK_CrmConversation_Users2");

                entity.HasOne(d => d.CnvsPerson)
                    .WithMany(p => p.CrmConversation)
                    .HasForeignKey(d => d.CnvsPersonId)
                    .HasConstraintName("FK_CrmConversation_CrmCompanyPersons");

                entity.HasOne(d => d.CnvsPriority)
                    .WithMany(p => p.CrmConversation)
                    .HasForeignKey(d => d.CnvsPriorityId)
                    .HasConstraintName("FK_CrmConversation_CrmConversationPriority");

                entity.HasOne(d => d.CnvsProject)
                    .WithMany(p => p.CrmConversation)
                    .HasForeignKey(d => d.CnvsProjectId)
                    .HasConstraintName("FK_CrmConversation_CrmProjects");

                entity.HasOne(d => d.CnvsReferUser)
                    .WithMany(p => p.CrmConversationCnvsReferUser)
                    .HasForeignKey(d => d.CnvsReferUserId)
                    .HasConstraintName("FK_CrmConversation_Users1");

                entity.HasOne(d => d.CnvsStatus)
                    .WithMany(p => p.CrmConversation)
                    .HasForeignKey(d => d.CnvsStatusId)
                    .HasConstraintName("FK_CrmConversation_CrmConversationStatus");

                entity.HasOne(d => d.CnvsTopic)
                    .WithMany(p => p.CrmConversation)
                    .HasForeignKey(d => d.CnvsTopicId)
                    .HasConstraintName("FK_CrmConversation_CrmConversationTopics");

                entity.HasOne(d => d.CnvsUser)
                    .WithMany(p => p.CrmConversationCnvsUser)
                    .HasForeignKey(d => d.CnvsUserId)
                    .HasConstraintName("FK_CrmConversation_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmConversationFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmConversation_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmConversation)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmConversation_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmConversationUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversation_Users3");
            });

            modelBuilder.Entity<CrmConversationDefaultContext>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Col11).HasMaxLength(150);

                entity.Property(e => e.Col12).HasMaxLength(150);

                entity.Property(e => e.Col13).HasMaxLength(150);

                entity.Property(e => e.Col14).HasMaxLength(150);

                entity.Property(e => e.Col15).HasMaxLength(150);

                entity.Property(e => e.Col16).HasMaxLength(150);

                entity.Property(e => e.Col17).HasMaxLength(150);

                entity.Property(e => e.Col18).HasMaxLength(150);

                entity.Property(e => e.Col19).HasMaxLength(150);

                entity.Property(e => e.Col20).HasMaxLength(150);

                entity.Property(e => e.Col21).HasMaxLength(150);

                entity.Property(e => e.Col22).HasMaxLength(150);

                entity.Property(e => e.Col23).HasMaxLength(150);

                entity.Property(e => e.Col24).HasMaxLength(150);

                entity.Property(e => e.Col25).HasMaxLength(150);

                entity.Property(e => e.Col26).HasMaxLength(150);

                entity.Property(e => e.Col27).HasMaxLength(150);

                entity.Property(e => e.Col28).HasMaxLength(150);

                entity.Property(e => e.Col29).HasMaxLength(150);

                entity.Property(e => e.Col30).HasMaxLength(150);

                entity.Property(e => e.Col31).HasMaxLength(150);

                entity.Property(e => e.Col32).HasMaxLength(150);

                entity.Property(e => e.Col33).HasMaxLength(150);

                entity.Property(e => e.Col34).HasMaxLength(150);

                entity.Property(e => e.Col35).HasMaxLength(150);

                entity.Property(e => e.Col36).HasMaxLength(150);

                entity.Property(e => e.Col37).HasMaxLength(150);

                entity.Property(e => e.Col38).HasMaxLength(150);

                entity.Property(e => e.Col39).HasMaxLength(150);

                entity.Property(e => e.Col40).HasMaxLength(150);

                entity.Property(e => e.Col41).HasMaxLength(150);

                entity.Property(e => e.Col42).HasMaxLength(150);

                entity.Property(e => e.Col43).HasMaxLength(150);

                entity.Property(e => e.Col44).HasMaxLength(150);

                entity.Property(e => e.Col45).HasMaxLength(150);

                entity.Property(e => e.Col46).HasMaxLength(150);

                entity.Property(e => e.Col47).HasMaxLength(150);

                entity.Property(e => e.Col48).HasMaxLength(150);

                entity.Property(e => e.Col49).HasMaxLength(150);

                entity.Property(e => e.Col50).HasMaxLength(150);

                entity.Property(e => e.Col51).HasMaxLength(150);

                entity.Property(e => e.Col52).HasMaxLength(150);

                entity.Property(e => e.Col53).HasMaxLength(150);

                entity.Property(e => e.Col54).HasMaxLength(150);

                entity.Property(e => e.Col55).HasMaxLength(150);

                entity.Property(e => e.Col56).HasMaxLength(150);

                entity.Property(e => e.ColEight).HasMaxLength(150);

                entity.Property(e => e.ColFive).HasMaxLength(150);

                entity.Property(e => e.ColFour).HasMaxLength(150);

                entity.Property(e => e.ColNine).HasMaxLength(150);

                entity.Property(e => e.ColOne).HasMaxLength(150);

                entity.Property(e => e.ColSeven).HasMaxLength(150);

                entity.Property(e => e.ColSix).HasMaxLength(150);

                entity.Property(e => e.ColTen).HasMaxLength(150);

                entity.Property(e => e.ColThree).HasMaxLength(150);

                entity.Property(e => e.ColTwo).HasMaxLength(150);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmConversationDefaultContext)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmConversationDefaultContext_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmConversationDefaultContext)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationDefaultContext_Users");
            });

            modelBuilder.Entity<CrmConversationDefaultContextLang>(entity =>
            {
                entity.HasKey(e => e.CrmConversationDefaultContextLangId);

                entity.ToTable("CrmConversationDefaultContext_Lang");

                entity.Property(e => e.CrmConversationDefaultContextLangId).HasColumnName("CrmConversationDefaultContextLangID");

                entity.Property(e => e.Col11).HasMaxLength(150);

                entity.Property(e => e.Col12).HasMaxLength(150);

                entity.Property(e => e.Col13).HasMaxLength(150);

                entity.Property(e => e.Col14).HasMaxLength(150);

                entity.Property(e => e.Col15).HasMaxLength(150);

                entity.Property(e => e.Col16).HasMaxLength(150);

                entity.Property(e => e.Col17).HasMaxLength(150);

                entity.Property(e => e.Col18).HasMaxLength(150);

                entity.Property(e => e.Col19).HasMaxLength(150);

                entity.Property(e => e.Col20).HasMaxLength(150);

                entity.Property(e => e.Col21).HasMaxLength(150);

                entity.Property(e => e.Col22).HasMaxLength(150);

                entity.Property(e => e.Col23).HasMaxLength(150);

                entity.Property(e => e.Col24).HasMaxLength(150);

                entity.Property(e => e.Col25).HasMaxLength(150);

                entity.Property(e => e.Col26).HasMaxLength(150);

                entity.Property(e => e.Col27).HasMaxLength(150);

                entity.Property(e => e.Col28).HasMaxLength(150);

                entity.Property(e => e.Col29).HasMaxLength(150);

                entity.Property(e => e.Col30).HasMaxLength(150);

                entity.Property(e => e.Col31).HasMaxLength(150);

                entity.Property(e => e.Col32).HasMaxLength(150);

                entity.Property(e => e.Col33).HasMaxLength(150);

                entity.Property(e => e.Col34).HasMaxLength(150);

                entity.Property(e => e.Col35).HasMaxLength(150);

                entity.Property(e => e.Col36).HasMaxLength(150);

                entity.Property(e => e.Col37).HasMaxLength(150);

                entity.Property(e => e.Col38).HasMaxLength(150);

                entity.Property(e => e.Col39).HasMaxLength(150);

                entity.Property(e => e.Col40).HasMaxLength(150);

                entity.Property(e => e.Col41).HasMaxLength(150);

                entity.Property(e => e.Col42).HasMaxLength(150);

                entity.Property(e => e.Col43).HasMaxLength(150);

                entity.Property(e => e.Col44).HasMaxLength(150);

                entity.Property(e => e.Col45).HasMaxLength(150);

                entity.Property(e => e.Col46).HasMaxLength(150);

                entity.Property(e => e.Col47).HasMaxLength(150);

                entity.Property(e => e.Col48).HasMaxLength(150);

                entity.Property(e => e.Col49).HasMaxLength(150);

                entity.Property(e => e.Col50).HasMaxLength(150);

                entity.Property(e => e.Col51).HasMaxLength(150);

                entity.Property(e => e.Col52).HasMaxLength(150);

                entity.Property(e => e.Col53).HasMaxLength(150);

                entity.Property(e => e.Col54).HasMaxLength(150);

                entity.Property(e => e.Col55).HasMaxLength(150);

                entity.Property(e => e.Col56).HasMaxLength(150);

                entity.Property(e => e.ColEight).HasMaxLength(150);

                entity.Property(e => e.ColFive).HasMaxLength(150);

                entity.Property(e => e.ColFour).HasMaxLength(150);

                entity.Property(e => e.ColNine).HasMaxLength(150);

                entity.Property(e => e.ColOne).HasMaxLength(150);

                entity.Property(e => e.ColSeven).HasMaxLength(150);

                entity.Property(e => e.ColSix).HasMaxLength(150);

                entity.Property(e => e.ColTen).HasMaxLength(150);

                entity.Property(e => e.ColThree).HasMaxLength(150);

                entity.Property(e => e.ColTwo).HasMaxLength(150);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.CrmConversationDefaultContextLang)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationDefaultContext_Lang_CrmConversationDefaultContext");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmConversationDefaultContextLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationDefaultContext_Lang_Languages");
            });

            modelBuilder.Entity<CrmConversationLang>(entity =>
            {
                entity.ToTable("CrmConversation_Lang");

                entity.Property(e => e.CrmConversationLangId).HasColumnName("CrmConversationLangID");

                entity.Property(e => e.CnvsDesc)
                    .IsRequired()
                    .HasColumnName("cnvsDesc")
                    .HasMaxLength(2000);

                entity.Property(e => e.CnvsReferDesc)
                    .HasColumnName("cnvsReferDesc")
                    .HasMaxLength(500);

                entity.Property(e => e.CnvsSubject)
                    .HasColumnName("cnvsSubject")
                    .HasMaxLength(50);

                entity.Property(e => e.ConversationId).HasColumnName("ConversationID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Conversation)
                    .WithMany(p => p.CrmConversationLang)
                    .HasForeignKey(d => d.ConversationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversation_Lang_CrmConversation");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmConversationLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversation_Lang_Languages");
            });

            modelBuilder.Entity<CrmConversationPriority>(entity =>
            {
                entity.HasKey(e => e.ConversationPriorityId);

                entity.Property(e => e.ConversationPriorityId).HasColumnName("ConversationPriorityID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Color).HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Priority)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PriorityDesc).HasMaxLength(200);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmConversationPriority)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmConversationPriority_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmConversationPriority)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationPriority_Users");
            });

            modelBuilder.Entity<CrmConversationPriorityLang>(entity =>
            {
                entity.ToTable("CrmConversationPriority_Lang");

                entity.Property(e => e.CrmConversationPriorityLangId).HasColumnName("CrmConversationPriorityLangID");

                entity.Property(e => e.ConversationPriorityId).HasColumnName("ConversationPriorityID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Priority)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PriorityDesc).HasMaxLength(200);

                entity.HasOne(d => d.ConversationPriority)
                    .WithMany(p => p.CrmConversationPriorityLang)
                    .HasForeignKey(d => d.ConversationPriorityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationPriority_Lang_CrmConversationPriority");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmConversationPriorityLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationPriority_Lang_Languages");
            });

            modelBuilder.Entity<CrmConversationReferUsers>(entity =>
            {
                entity.HasKey(e => e.ConversationReferUserId);

                entity.Property(e => e.ConversationReferUserId).HasColumnName("ConversationReferUserID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Conversation)
                    .WithMany(p => p.CrmConversationReferUsers)
                    .HasForeignKey(d => d.ConversationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationSharedUsers_CrmConversation");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmConversationReferUsersFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmConversationReferUsers_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmConversationReferUsers)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmConversationReferUsers_Languages");

                entity.HasOne(d => d.Priority)
                    .WithMany(p => p.CrmConversationReferUsers)
                    .HasForeignKey(d => d.PriorityId)
                    .HasConstraintName("FK_CrmConversationReferUsers_CrmConversationPriority");

                entity.HasOne(d => d.ReferUser)
                    .WithMany(p => p.CrmConversationReferUsersReferUser)
                    .HasForeignKey(d => d.ReferUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationReferUsers_Users");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmConversationReferUsersUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationReferUsers_Users1");
            });

            modelBuilder.Entity<CrmConversationStatus>(entity =>
            {
                entity.HasKey(e => e.ConversationStatusId);

                entity.Property(e => e.ConversationStatusId).HasColumnName("ConversationStatusID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EmailSubjectPatternFormula).HasMaxLength(1000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fodefault).HasColumnName("FODefault");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.SendSmsgsm).HasColumnName("SendSMSGSM");

                entity.Property(e => e.SendSmsweb).HasColumnName("SendSMSWeb");

                entity.Property(e => e.SmsbodyPatternFormula)
                    .HasColumnName("SMSBodyPatternFormula")
                    .HasMaxLength(1000);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.StatusDesc).HasMaxLength(200);

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.CrmConversationStatus)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_CrmConversationStatus_CrmConversationStatusGroups");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmConversationStatus)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmConversationStatus_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmConversationStatus)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationStatus_Users");
            });

            modelBuilder.Entity<CrmConversationStatusGroups>(entity =>
            {
                entity.HasKey(e => e.ConversationStatusGroupId);

                entity.Property(e => e.ConversationStatusGroupId).HasColumnName("ConversationStatusGroupID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ConversationStatusGroup)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ConversationStatusGroupDesc).HasMaxLength(200);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FocnvsReferMultiUser)
                    .HasColumnName("FOCnvsReferMultiUser")
                    .HasMaxLength(2000);

                entity.Property(e => e.FocnvsReferUserId).HasColumnName("FOCnvsReferUserId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FocnvsReferUser)
                    .WithMany(p => p.CrmConversationStatusGroupsFocnvsReferUser)
                    .HasForeignKey(d => d.FocnvsReferUserId)
                    .HasConstraintName("FK_CrmConversationStatusGroups_FOCnvsReferUser");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmConversationStatusGroups)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmConversationStatusGroups_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmConversationStatusGroupsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationStatusGroups_Users");
            });

            modelBuilder.Entity<CrmConversationStatusGroupsLang>(entity =>
            {
                entity.ToTable("CrmConversationStatusGroups_Lang");

                entity.Property(e => e.CrmConversationStatusGroupsLangId).HasColumnName("CrmConversationStatusGroupsLangID");

                entity.Property(e => e.ConversationStatusGroup)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ConversationStatusGroupDesc).HasMaxLength(200);

                entity.Property(e => e.ConversationStatusGroupId).HasColumnName("ConversationStatusGroupID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.ConversationStatusGroupNavigation)
                    .WithMany(p => p.CrmConversationStatusGroupsLang)
                    .HasForeignKey(d => d.ConversationStatusGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationStatusGroups_Lang_CrmConversationStatusGroups");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmConversationStatusGroupsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationStatusGroups_Lang_Languages");
            });

            modelBuilder.Entity<CrmConversationStatusLang>(entity =>
            {
                entity.ToTable("CrmConversationStatus_Lang");

                entity.Property(e => e.CrmConversationStatusLangId).HasColumnName("CrmConversationStatusLangID");

                entity.Property(e => e.ConversationStatusId).HasColumnName("ConversationStatusID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.StatusDesc).HasMaxLength(200);

                entity.HasOne(d => d.ConversationStatus)
                    .WithMany(p => p.CrmConversationStatusLang)
                    .HasForeignKey(d => d.ConversationStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationStatus_Lang_CrmConversationStatus");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmConversationStatusLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationStatus_Lang_Languages");
            });

            modelBuilder.Entity<CrmConversationTmp>(entity =>
            {
                entity.HasKey(e => e.ConversationId);

                entity.Property(e => e.ConversationId).HasColumnName("ConversationID");

                entity.Property(e => e.ApiId).HasMaxLength(200);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CnvsCompanyId).HasColumnName("cnvsCompanyId");

                entity.Property(e => e.CnvsCoordinateLastDate)
                    .HasColumnName("cnvsCoordinateLastDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CnvsCoordinateLastDatePersian)
                    .HasColumnName("cnvsCoordinateLastDatePersian")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CnvsCoordinateLatitude)
                    .HasColumnName("cnvsCoordinateLatitude")
                    .HasMaxLength(100);

                entity.Property(e => e.CnvsCoordinateLongitude)
                    .HasColumnName("cnvsCoordinateLongitude")
                    .HasMaxLength(100);

                entity.Property(e => e.CnvsDate)
                    .HasColumnName("cnvsDate")
                    .HasMaxLength(8);

                entity.Property(e => e.CnvsDateTime)
                    .HasColumnName("cnvsDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.CnvsDay)
                    .HasColumnName("cnvsDay")
                    .HasMaxLength(20);

                entity.Property(e => e.CnvsDesc)
                    .IsRequired()
                    .HasColumnName("cnvsDesc")
                    .HasMaxLength(2000);

                entity.Property(e => e.CnvsEventPolicyNeedCheck).HasColumnName("cnvsEventPolicyNeedCheck");

                entity.Property(e => e.CnvsFirstRegisterDate)
                    .HasColumnName("cnvsFirstRegisterDate")
                    .HasMaxLength(8);

                entity.Property(e => e.CnvsFirstRegisterDateTime)
                    .HasColumnName("cnvsFirstRegisterDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.CnvsFirstRegisterUserId).HasColumnName("cnvsFirstRegisterUserId");

                entity.Property(e => e.CnvsFocmpCanSee).HasColumnName("cnvsFOCmpCanSee");

                entity.Property(e => e.CnvsIsBookMark).HasColumnName("cnvsIsBookMark");

                entity.Property(e => e.CnvsIsTicket).HasColumnName("cnvsIsTicket");

                entity.Property(e => e.CnvsPersonId).HasColumnName("cnvsPersonId");

                entity.Property(e => e.CnvsPriorityId).HasColumnName("cnvsPriorityId");

                entity.Property(e => e.CnvsProjectId).HasColumnName("cnvsProjectId");

                entity.Property(e => e.CnvsReferDesc)
                    .HasColumnName("cnvsReferDesc")
                    .HasMaxLength(500);

                entity.Property(e => e.CnvsReferUserId).HasColumnName("cnvsReferUserId");

                entity.Property(e => e.CnvsRemindDate)
                    .HasColumnName("cnvsRemindDate")
                    .HasMaxLength(8);

                entity.Property(e => e.CnvsRemindDateForAllarm)
                    .HasColumnName("cnvsRemindDateForAllarm")
                    .HasMaxLength(8);

                entity.Property(e => e.CnvsRemindDateTime)
                    .HasColumnName("cnvsRemindDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.CnvsRemindDateTimeForAllarm)
                    .HasColumnName("cnvsRemindDateTimeForAllarm")
                    .HasColumnType("datetime");

                entity.Property(e => e.CnvsRemindOk).HasColumnName("cnvsRemindOk");

                entity.Property(e => e.CnvsRemindTime)
                    .HasColumnName("cnvsRemindTime")
                    .HasMaxLength(15);

                entity.Property(e => e.CnvsStatusId).HasColumnName("cnvsStatusId");

                entity.Property(e => e.CnvsSubject)
                    .HasColumnName("cnvsSubject")
                    .HasMaxLength(50);

                entity.Property(e => e.CnvsTime)
                    .HasColumnName("cnvsTime")
                    .HasMaxLength(15);

                entity.Property(e => e.CnvsTopicId).HasColumnName("cnvsTopicId");

                entity.Property(e => e.CnvsUserId).HasColumnName("cnvsUserId");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CnvsCompany)
                    .WithMany(p => p.CrmConversationTmp)
                    .HasForeignKey(d => d.CnvsCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationTmp_CrmCompanyTmp");

                entity.HasOne(d => d.CnvsFirstRegisterUser)
                    .WithMany(p => p.CrmConversationTmpCnvsFirstRegisterUser)
                    .HasForeignKey(d => d.CnvsFirstRegisterUserId)
                    .HasConstraintName("FK_CrmConversationTmp_Users2");

                entity.HasOne(d => d.CnvsPerson)
                    .WithMany(p => p.CrmConversationTmp)
                    .HasForeignKey(d => d.CnvsPersonId)
                    .HasConstraintName("FK_CrmConversationTmp_CrmCompanyPersonsTmp");

                entity.HasOne(d => d.CnvsPriority)
                    .WithMany(p => p.CrmConversationTmp)
                    .HasForeignKey(d => d.CnvsPriorityId)
                    .HasConstraintName("FK_CrmConversationTmp_CrmConversationPriority");

                entity.HasOne(d => d.CnvsProject)
                    .WithMany(p => p.CrmConversationTmp)
                    .HasForeignKey(d => d.CnvsProjectId)
                    .HasConstraintName("FK_CrmConversationTmp_CrmProjectsTmp");

                entity.HasOne(d => d.CnvsReferUser)
                    .WithMany(p => p.CrmConversationTmpCnvsReferUser)
                    .HasForeignKey(d => d.CnvsReferUserId)
                    .HasConstraintName("FK_CrmConversationTmp_Users1");

                entity.HasOne(d => d.CnvsStatus)
                    .WithMany(p => p.CrmConversationTmp)
                    .HasForeignKey(d => d.CnvsStatusId)
                    .HasConstraintName("FK_CrmConversationTmp_CrmConversationStatus");

                entity.HasOne(d => d.CnvsTopic)
                    .WithMany(p => p.CrmConversationTmp)
                    .HasForeignKey(d => d.CnvsTopicId)
                    .HasConstraintName("FK_CrmConversationTmp_CrmConversationTopics");

                entity.HasOne(d => d.CnvsUser)
                    .WithMany(p => p.CrmConversationTmpCnvsUser)
                    .HasForeignKey(d => d.CnvsUserId)
                    .HasConstraintName("FK_CrmConversationTmp_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmConversationTmpFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmConversationTmp_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmConversationTmp)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmConversationTmp_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmConversationTmpUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationTmp_Users3");
            });

            modelBuilder.Entity<CrmConversationTmpLang>(entity =>
            {
                entity.HasKey(e => e.CrmConversationLangId);

                entity.ToTable("CrmConversationTmp_Lang");

                entity.Property(e => e.CrmConversationLangId).HasColumnName("CrmConversationLangID");

                entity.Property(e => e.CnvsDesc)
                    .IsRequired()
                    .HasColumnName("cnvsDesc")
                    .HasMaxLength(2000);

                entity.Property(e => e.CnvsReferDesc)
                    .HasColumnName("cnvsReferDesc")
                    .HasMaxLength(500);

                entity.Property(e => e.CnvsSubject)
                    .HasColumnName("cnvsSubject")
                    .HasMaxLength(50);

                entity.Property(e => e.ConversationId).HasColumnName("ConversationID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Conversation)
                    .WithMany(p => p.CrmConversationTmpLang)
                    .HasForeignKey(d => d.ConversationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationTmp_Lang_CrmConversationTmp");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmConversationTmpLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationTmp_Lang_Languages");
            });

            modelBuilder.Entity<CrmConversationTopics>(entity =>
            {
                entity.HasKey(e => e.ConversationTopicsId);

                entity.Property(e => e.ConversationTopicsId).HasColumnName("ConversationTopicsID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fodefault).HasColumnName("FODefault");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.TopicDesc).HasMaxLength(200);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmConversationTopics)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmConversationTopics_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmConversationTopics)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationTopics_Users");
            });

            modelBuilder.Entity<CrmConversationTopicsLang>(entity =>
            {
                entity.ToTable("CrmConversationTopics_Lang");

                entity.Property(e => e.CrmConversationTopicsLangId).HasColumnName("CrmConversationTopicsLangID");

                entity.Property(e => e.ConversationTopicsId).HasColumnName("ConversationTopicsID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.TopicDesc).HasMaxLength(200);

                entity.HasOne(d => d.ConversationTopics)
                    .WithMany(p => p.CrmConversationTopicsLang)
                    .HasForeignKey(d => d.ConversationTopicsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationTopics_Lang_CrmConversationTopics");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmConversationTopicsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmConversationTopics_Lang_Languages");
            });

            modelBuilder.Entity<CrmDyFormFieldMasterValueDetails>(entity =>
            {
                entity.HasKey(e => e.FormFieldMasterValueDetailId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CheckedDate).HasColumnType("datetime");

                entity.Property(e => e.CheckedDatePersian).HasMaxLength(8);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CheckerUser)
                    .WithMany(p => p.CrmDyFormFieldMasterValueDetailsCheckerUser)
                    .HasForeignKey(d => d.CheckerUserId)
                    .HasConstraintName("FK_CrmDyFormFieldMasterValueDetails_CheckerUsers");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmDyFormFieldMasterValueDetailsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldMasterValueDetails_FirstRegisterUsers");

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.CrmDyFormFieldMasterValueDetails)
                    .HasForeignKey(d => d.FormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldMasterValueDetails_CrmDyForms");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmDyFormFieldMasterValueDetails)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldMasterValueDetails_Languages");

                entity.HasOne(d => d.MasterValue)
                    .WithMany(p => p.CrmDyFormFieldMasterValueDetails)
                    .HasForeignKey(d => d.MasterValueId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldMasterValueDetails_CrmDyFormFieldMasterValues");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmDyFormFieldMasterValueDetailsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldMasterValueDetails_Users");
            });

            modelBuilder.Entity<CrmDyFormFieldMasterValues>(entity =>
            {
                entity.HasKey(e => e.FormFieldMasterValueId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CheckedDate).HasColumnType("datetime");

                entity.Property(e => e.CheckedDatePersian).HasMaxLength(8);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CheckerUser)
                    .WithMany(p => p.CrmDyFormFieldMasterValuesCheckerUser)
                    .HasForeignKey(d => d.CheckerUserId)
                    .HasConstraintName("FK_CrmDyFormFieldMasterValues_CheckerUsers");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CrmDyFormFieldMasterValues)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_CrmDyFormFieldMasterValues_CrmCompany");

                entity.HasOne(d => d.CompanyPerson)
                    .WithMany(p => p.CrmDyFormFieldMasterValues)
                    .HasForeignKey(d => d.CompanyPersonId)
                    .HasConstraintName("FK_CrmDyFormFieldMasterValues_CrmCompanyPersons");

                entity.HasOne(d => d.Conversation)
                    .WithMany(p => p.CrmDyFormFieldMasterValues)
                    .HasForeignKey(d => d.ConversationId)
                    .HasConstraintName("FK_CrmDyFormFieldMasterValues_CrmConversation");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmDyFormFieldMasterValuesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldMasterValues_FirstRegisterUsers");

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.CrmDyFormFieldMasterValues)
                    .HasForeignKey(d => d.FormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldMasterValues_CrmDyForms");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmDyFormFieldMasterValues)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldMasterValues_Languages");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.CrmDyFormFieldMasterValues)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_CrmDyFormFieldMasterValues_CrmProjects");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmDyFormFieldMasterValuesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldMasterValues_Users");

                entity.HasOne(d => d.Workflow)
                    .WithMany(p => p.CrmDyFormFieldMasterValues)
                    .HasForeignKey(d => d.WorkflowId)
                    .HasConstraintName("FK_CrmDyFormFieldMasterValues_CrmDyFormWorkflows");

                entity.HasOne(d => d.WorkflowStep)
                    .WithMany(p => p.CrmDyFormFieldMasterValues)
                    .HasForeignKey(d => d.WorkflowStepId)
                    .HasConstraintName("FK_CrmDyFormFieldMasterValues_CrmDyFormWorkflowSteps");
            });

            modelBuilder.Entity<CrmDyFormFieldTypes>(entity =>
            {
                entity.HasKey(e => e.FormFieldTypeId);

                entity.Property(e => e.FormFieldTypeId).ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.TypeInWeb).HasMaxLength(50);

                entity.Property(e => e.TypeInWindows).HasMaxLength(50);

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmDyFormFieldTypesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldTypes_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmDyFormFieldTypes)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldTypes_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmDyFormFieldTypesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldTypes_Users");
            });

            modelBuilder.Entity<CrmDyFormFieldTypesLang>(entity =>
            {
                entity.HasKey(e => e.CrmDyFormFieldTypeLangId);

                entity.ToTable("CrmDyFormFieldTypes_Lang");

                entity.Property(e => e.CrmDyFormFieldTypeLangId).HasColumnName("CrmDyFormFieldTypeLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.FieldType)
                    .WithMany(p => p.CrmDyFormFieldTypesLang)
                    .HasForeignKey(d => d.FieldTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldTypes_Lang_CrmDyFormFieldTypes");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmDyFormFieldTypesLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldTypes_Lang_Languages");
            });

            modelBuilder.Entity<CrmDyFormFieldValues>(entity =>
            {
                entity.HasKey(e => e.FormFieldValueId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CrmDyFormFieldValues)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_CrmDyFormFieldValues_CrmCompany");

                entity.HasOne(d => d.CompanyPerson)
                    .WithMany(p => p.CrmDyFormFieldValues)
                    .HasForeignKey(d => d.CompanyPersonId)
                    .HasConstraintName("FK_CrmDyFormFieldValues_CrmCompanyPersons");

                entity.HasOne(d => d.Conversation)
                    .WithMany(p => p.CrmDyFormFieldValues)
                    .HasForeignKey(d => d.ConversationId)
                    .HasConstraintName("FK_CrmDyFormFieldValues_CrmConversation");

                entity.HasOne(d => d.Field)
                    .WithMany(p => p.CrmDyFormFieldValues)
                    .HasForeignKey(d => d.FieldId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldValues_CrmDyFormFields");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmDyFormFieldValuesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldValues_FirstRegisterUsers");

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.CrmDyFormFieldValues)
                    .HasForeignKey(d => d.FormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldValues_CrmDyForms");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmDyFormFieldValues)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldValues_Languages");

                entity.HasOne(d => d.MasterValue)
                    .WithMany(p => p.CrmDyFormFieldValues)
                    .HasForeignKey(d => d.MasterValueId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldValues_CrmDyFormFieldMasterValues");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.CrmDyFormFieldValues)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_CrmDyFormFieldValues_CrmProjects");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmDyFormFieldValuesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldValues_Users");
            });

            modelBuilder.Entity<CrmDyFormFieldValuesLang>(entity =>
            {
                entity.HasKey(e => e.CrmDyFormFieldValueLangId);

                entity.ToTable("CrmDyFormFieldValues_Lang");

                entity.Property(e => e.CrmDyFormFieldValueLangId).HasColumnName("CrmDyFormFieldValueLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.FieldValue)
                    .WithMany(p => p.CrmDyFormFieldValuesLang)
                    .HasForeignKey(d => d.FieldValueId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldValues_Lang_CrmDyFormFieldValues");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmDyFormFieldValuesLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFieldValues_Lang_Languages");
            });

            modelBuilder.Entity<CrmDyFormFields>(entity =>
            {
                entity.HasKey(e => e.FormFieldId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FieldTitle).IsRequired();

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ParentFieldBgColor).HasMaxLength(50);

                entity.Property(e => e.ParentFieldColor).HasMaxLength(50);

                entity.Property(e => e.PlaceholderTxt).HasMaxLength(4000);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.RegularExpressionErrorTxt).HasMaxLength(1000);

                entity.HasOne(d => d.FieldType)
                    .WithMany(p => p.CrmDyFormFields)
                    .HasForeignKey(d => d.FieldTypeId)
                    .HasConstraintName("FK_CrmDyFormFields_CrmDyFormFieldTypes");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmDyFormFieldsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFields_FirstRegisterUsers");

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.CrmDyFormFields)
                    .HasForeignKey(d => d.FormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFields_CrmDyForms");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmDyFormFields)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFields_Languages");

                entity.HasOne(d => d.RegularExpression)
                    .WithMany(p => p.CrmDyFormFields)
                    .HasForeignKey(d => d.RegularExpressionId)
                    .HasConstraintName("FK_CrmDyFormFields_CrmDyFormRegularExpressions");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmDyFormFieldsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFields_Users");
            });

            modelBuilder.Entity<CrmDyFormFieldsLang>(entity =>
            {
                entity.HasKey(e => e.CrmDyFormFieldLangId);

                entity.ToTable("CrmDyFormFields_Lang");

                entity.Property(e => e.CrmDyFormFieldLangId).HasColumnName("CrmDyFormFieldLangID");

                entity.Property(e => e.FieldTitle).IsRequired();

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PlaceholderTxt).HasMaxLength(4000);

                entity.Property(e => e.RegularExpressionErrorTxt).HasMaxLength(1000);

                entity.HasOne(d => d.Field)
                    .WithMany(p => p.CrmDyFormFieldsLang)
                    .HasForeignKey(d => d.FieldId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFields_Lang_CrmDyFormFields");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmDyFormFieldsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormFields_Lang_Languages");
            });

            modelBuilder.Entity<CrmDyFormRegularExpressions>(entity =>
            {
                entity.HasKey(e => e.FormRegularExpressionId);

                entity.Property(e => e.FormRegularExpressionId).ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.RegularExpression).HasMaxLength(4000);

                entity.Property(e => e.RegularExpressionOther).HasMaxLength(4000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.FieldType)
                    .WithMany(p => p.CrmDyFormRegularExpressions)
                    .HasForeignKey(d => d.FieldTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormRegularExpressions_CrmDyFormFieldTypes");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmDyFormRegularExpressionsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormRegularExpressions_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmDyFormRegularExpressions)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormRegularExpressions_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmDyFormRegularExpressionsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormRegularExpressions_Users");
            });

            modelBuilder.Entity<CrmDyFormRegularExpressionsLang>(entity =>
            {
                entity.HasKey(e => e.CrmDyFormRegularExpressionLangId);

                entity.ToTable("CrmDyFormRegularExpressions_Lang");

                entity.Property(e => e.CrmDyFormRegularExpressionLangId).HasColumnName("CrmDyFormRegularExpressionLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmDyFormRegularExpressionsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormRegularExpressions_Lang_Languages");

                entity.HasOne(d => d.RegularExpression)
                    .WithMany(p => p.CrmDyFormRegularExpressionsLang)
                    .HasForeignKey(d => d.RegularExpressionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormRegularExpressions_Lang_CrmDyFormRegularExpressions");
            });

            modelBuilder.Entity<CrmDyFormUserAccess>(entity =>
            {
                entity.HasKey(e => e.FormUserAccessId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmDyFormUserAccessCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormUserAccess_CrmUsers");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmDyFormUserAccessFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormUserAccess_FirstRegisterUsers");

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.CrmDyFormUserAccess)
                    .HasForeignKey(d => d.FormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormUserAccess_CrmDyForms");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmDyFormUserAccess)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormUserAccess_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmDyFormUserAccessUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormUserAccess_Users");
            });

            modelBuilder.Entity<CrmDyFormWorkflowSteps>(entity =>
            {
                entity.HasKey(e => e.FormWorkflowStepId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CheckerUserIds).HasMaxLength(4000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.MultiReferUserIds).HasMaxLength(4000);

                entity.Property(e => e.ReferUserIds).HasMaxLength(4000);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.WorkflowStepTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmDyFormWorkflowStepsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormWorkflowSteps_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmDyFormWorkflowSteps)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormWorkflowSteps_Languages");

                entity.HasOne(d => d.ReferRoll)
                    .WithMany(p => p.CrmDyFormWorkflowSteps)
                    .HasForeignKey(d => d.ReferRollId)
                    .HasConstraintName("FK_CrmDyFormWorkflowSteps_CrmsysRolls");

                entity.HasOne(d => d.SubForm)
                    .WithMany(p => p.CrmDyFormWorkflowSteps)
                    .HasForeignKey(d => d.SubFormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormWorkflowSteps_CrmDyForms");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmDyFormWorkflowStepsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormWorkflowSteps_Users");

                entity.HasOne(d => d.Workflow)
                    .WithMany(p => p.CrmDyFormWorkflowSteps)
                    .HasForeignKey(d => d.WorkflowId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormWorkflowSteps_CrmDyFormWorkflows");
            });

            modelBuilder.Entity<CrmDyFormWorkflowStepsLang>(entity =>
            {
                entity.HasKey(e => e.CrmDyFormWorkflowStepLangId);

                entity.ToTable("CrmDyFormWorkflowSteps_Lang");

                entity.Property(e => e.CrmDyFormWorkflowStepLangId).HasColumnName("CrmDyFormWorkflowStepLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.WorkflowStepTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.HasOne(d => d.FormWorkflowStep)
                    .WithMany(p => p.CrmDyFormWorkflowStepsLang)
                    .HasForeignKey(d => d.FormWorkflowStepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormWorkflowSteps_Lang_CrmDyFormWorkflowSteps");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmDyFormWorkflowStepsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormWorkflowSteps_Lang_Languages");
            });

            modelBuilder.Entity<CrmDyFormWorkflows>(entity =>
            {
                entity.HasKey(e => e.FormWorkflowId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.WorkflowTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.HasOne(d => d.DyForm)
                    .WithMany(p => p.CrmDyFormWorkflows)
                    .HasForeignKey(d => d.DyFormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormWorkflows_CrmDyForms");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmDyFormWorkflowsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormWorkflows_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmDyFormWorkflows)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormWorkflows_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmDyFormWorkflowsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormWorkflows_Users");
            });

            modelBuilder.Entity<CrmDyFormWorkflowsLang>(entity =>
            {
                entity.HasKey(e => e.CrmDyFormWorkflowLangId);

                entity.ToTable("CrmDyFormWorkflows_Lang");

                entity.Property(e => e.CrmDyFormWorkflowLangId).HasColumnName("CrmDyFormWorkflowLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.WorkflowTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.HasOne(d => d.FormWorkflow)
                    .WithMany(p => p.CrmDyFormWorkflowsLang)
                    .HasForeignKey(d => d.FormWorkflowId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormWorkflows_Lang_CrmDyFormWorkflows");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmDyFormWorkflowsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyFormWorkflows_Lang_Languages");
            });

            modelBuilder.Entity<CrmDyForms>(entity =>
            {
                entity.HasKey(e => e.FormId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CheckerUsersId).HasMaxLength(4000);

                entity.Property(e => e.EnableForUsersId).HasMaxLength(4000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FocanInsertMulti).HasColumnName("FOCanInsertMulti");

                entity.Property(e => e.FoisEnable).HasColumnName("FOIsEnable");

                entity.Property(e => e.FoisVisible).HasColumnName("FOIsVisible");

                entity.Property(e => e.FormBgColor).HasMaxLength(50);

                entity.Property(e => e.FormBody).HasColumnType("ntext");

                entity.Property(e => e.FormFooter).HasColumnType("ntext");

                entity.Property(e => e.FormHeader).HasColumnType("ntext");

                entity.Property(e => e.FormName)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FormTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FormTitleColor).HasMaxLength(50);

                entity.Property(e => e.FosysPartId).HasColumnName("FOSysPartId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.UploadFileDescription).HasMaxLength(4000);

                entity.Property(e => e.UploadFileExtension).HasMaxLength(1000);

                entity.HasOne(d => d.CrmSysPart)
                    .WithMany(p => p.CrmDyFormsCrmSysPart)
                    .HasForeignKey(d => d.CrmSysPartId)
                    .HasConstraintName("FK_CrmDyForms_CrmSystemParts");

                entity.HasOne(d => d.EnableForRoll)
                    .WithMany(p => p.CrmDyForms)
                    .HasForeignKey(d => d.EnableForRollId)
                    .HasConstraintName("FK_CrmDyForms_CrmsysRolls");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmDyFormsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyForms_FirstRegisterUsers");

                entity.HasOne(d => d.FosysPart)
                    .WithMany(p => p.CrmDyFormsFosysPart)
                    .HasForeignKey(d => d.FosysPartId)
                    .HasConstraintName("FK_CrmDyForms_FOSystemParts");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmDyForms)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyForms_Languages");

                entity.HasOne(d => d.PrintFormat)
                    .WithMany(p => p.CrmDyForms)
                    .HasForeignKey(d => d.PrintFormatId)
                    .HasConstraintName("FK_CrmDyForms_PrintFormat");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmDyFormsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyForms_Users");

                entity.HasOne(d => d.Workflow)
                    .WithMany(p => p.CrmDyForms)
                    .HasForeignKey(d => d.WorkflowId)
                    .HasConstraintName("FK_CrmDyForms_CrmDyFormWorkflows");
            });

            modelBuilder.Entity<CrmDyFormsLang>(entity =>
            {
                entity.HasKey(e => e.CrmDyFormLangId);

                entity.ToTable("CrmDyForms_Lang");

                entity.Property(e => e.CrmDyFormLangId).HasColumnName("CrmDyFormLangID");

                entity.Property(e => e.FormBody).HasColumnType("ntext");

                entity.Property(e => e.FormFooter).HasColumnType("ntext");

                entity.Property(e => e.FormHeader).HasColumnType("ntext");

                entity.Property(e => e.FormName)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FormTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.UploadFileDescription).HasMaxLength(4000);

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.CrmDyFormsLang)
                    .HasForeignKey(d => d.FormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyForms_Lang_CrmDyForms");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmDyFormsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmDyForms_Lang_Languages");
            });

            modelBuilder.Entity<CrmFileDirectoryType>(entity =>
            {
                entity.HasKey(e => e.FileDirectoryTypeId);

                entity.Property(e => e.FileDirectoryTypeId).HasColumnName("FileDirectoryTypeID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FileDirectoryType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian).HasMaxLength(8);

                entity.HasOne(d => d.FileDirectoryTypeOpr)
                    .WithMany(p => p.CrmFileDirectoryType)
                    .HasForeignKey(d => d.FileDirectoryTypeOprId)
                    .HasConstraintName("FK_CrmFileDirectoryType_CrmFileDirectoryTypeOpr");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmFileDirectoryType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmFileDirectoryType_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmFileDirectoryType)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_CrmFileDirectoryType_Users");
            });

            modelBuilder.Entity<CrmFileDirectoryTypeLang>(entity =>
            {
                entity.ToTable("CrmFileDirectoryType_Lang");

                entity.Property(e => e.CrmFileDirectoryTypeLangId).HasColumnName("CrmFileDirectoryTypeLangID");

                entity.Property(e => e.FileDirectoryType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FileDirectoryTypeId).HasColumnName("FileDirectoryTypeID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.FileDirectoryTypeNavigation)
                    .WithMany(p => p.CrmFileDirectoryTypeLang)
                    .HasForeignKey(d => d.FileDirectoryTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFileDirectoryType_Lang_CrmFileDirectoryType");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmFileDirectoryTypeLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFileDirectoryType_Lang_Languages");
            });

            modelBuilder.Entity<CrmFileDirectoryTypeOpr>(entity =>
            {
                entity.HasKey(e => e.FileDirectoryTypeOprId);

                entity.Property(e => e.FileDirectoryTypeOprId).ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FileDirectoryTypeOpr)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmFileDirectoryTypeOpr)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmFileDirectoryTypeOpr_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmFileDirectoryTypeOpr)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFileDirectoryTypeOpr_Users");
            });

            modelBuilder.Entity<CrmFileDirectoryTypeOprLang>(entity =>
            {
                entity.ToTable("CrmFileDirectoryTypeOpr_Lang");

                entity.Property(e => e.CrmFileDirectoryTypeOprLangId).HasColumnName("CrmFileDirectoryTypeOprLangID");

                entity.Property(e => e.FileDirectoryTypeOpr)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.FileDirectoryTypeOprNavigation)
                    .WithMany(p => p.CrmFileDirectoryTypeOprLang)
                    .HasForeignKey(d => d.FileDirectoryTypeOprId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFileDirectoryTypeOpr_Lang_CrmFileDirectoryTypeOpr");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmFileDirectoryTypeOprLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFileDirectoryTypeOpr_Lang_Languages");
            });

            modelBuilder.Entity<CrmFilesDirectory>(entity =>
            {
                entity.HasKey(e => e.FileDirectoryId);

                entity.Property(e => e.FileDirectoryId).HasColumnName("FileDirectoryID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CopyFromPath).HasMaxLength(200);

                entity.Property(e => e.DocDate).HasMaxLength(8);

                entity.Property(e => e.DocDateTime).HasColumnType("datetime");

                entity.Property(e => e.DocDay).HasMaxLength(20);

                entity.Property(e => e.DocTime).HasMaxLength(15);

                entity.Property(e => e.FileName).HasMaxLength(50);

                entity.Property(e => e.FilePath).HasMaxLength(200);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FolderName).HasMaxLength(50);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeOprObjectIdIi).HasColumnName("TypeOprObjectIdII");

                entity.HasOne(d => d.FileDirectoryType)
                    .WithMany(p => p.CrmFilesDirectory)
                    .HasForeignKey(d => d.FileDirectoryTypeId)
                    .HasConstraintName("FK_CrmFilesDirectory_CrmFileDirectoryType");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmFilesDirectory)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmFilesDirectory_Languages");

                entity.HasOne(d => d.Master)
                    .WithMany(p => p.CrmFilesDirectory)
                    .HasForeignKey(d => d.MasterId)
                    .HasConstraintName("FK_CrmFilesDirectory_CrmCompany");

                entity.HasOne(d => d.SubDetail)
                    .WithMany(p => p.CrmFilesDirectory)
                    .HasForeignKey(d => d.SubDetailId)
                    .HasConstraintName("FK_CrmFilesDirectory_CrmProjects");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmFilesDirectory)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFilesDirectory_Users");
            });

            modelBuilder.Entity<CrmFilesDirectoryLang>(entity =>
            {
                entity.HasKey(e => e.CrmFilesDirectoryLanId);

                entity.ToTable("CrmFilesDirectory_Lang");

                entity.Property(e => e.CrmFilesDirectoryLanId).HasColumnName("CrmFilesDirectoryLanID");

                entity.Property(e => e.FileDirectoryId).HasColumnName("FileDirectoryID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.FileDirectory)
                    .WithMany(p => p.CrmFilesDirectoryLang)
                    .HasForeignKey(d => d.FileDirectoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFilesDirectory_Lang_CrmFilesDirectory");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmFilesDirectoryLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFilesDirectory_Lang_Languages");
            });

            modelBuilder.Entity<CrmFilesDirectoryTemplate>(entity =>
            {
                entity.HasKey(e => e.FileDirectoryTemplateId);

                entity.Property(e => e.FileDirectoryTemplateId).HasColumnName("FileDirectoryTemplateID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CopyFromPath)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.FileDirectoryType)
                    .WithMany(p => p.CrmFilesDirectoryTemplate)
                    .HasForeignKey(d => d.FileDirectoryTypeId)
                    .HasConstraintName("FK_CrmFilesDirectoryTemplate_CrmFileDirectoryType");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmFilesDirectoryTemplate)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmFilesDirectoryTemplate_Languages");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.CrmFilesDirectoryTemplate)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFilesDirectoryTemplate_CrmFilesDirectoryTemplateType");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmFilesDirectoryTemplate)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFilesDirectoryTemplate_Users");
            });

            modelBuilder.Entity<CrmFilesDirectoryTemplateType>(entity =>
            {
                entity.Property(e => e.CrmFilesDirectoryTemplateTypeId)
                    .HasColumnName("CrmFilesDirectoryTemplateTypeID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FilesDirectoryTemplateType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmFilesDirectoryTemplateType)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmFilesDirectoryTemplateType_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmFilesDirectoryTemplateType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmFilesDirectoryTemplateType_Languages");
            });

            modelBuilder.Entity<CrmFoSetting>(entity =>
            {
                entity.HasKey(e => e.FoSettingId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CmpDefaultGroupIdIi).HasColumnName("CmpDefaultGroupIdII");

                entity.Property(e => e.CmpDefaultGroupIdIii).HasColumnName("CmpDefaultGroupIdIII");

                entity.Property(e => e.CmpDefaultGroupIdIv).HasColumnName("CmpDefaultGroupIdIV");

                entity.Property(e => e.CnvsDefaultDesc)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.CnvsDefaultReferDesc).HasMaxLength(500);

                entity.Property(e => e.CnvsDescTooltip).HasMaxLength(2000);

                entity.Property(e => e.EmailSubjectPatternFormula).HasMaxLength(1000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FoLogEmailAdminI).HasMaxLength(100);

                entity.Property(e => e.FoLogEmailAdminIi)
                    .HasColumnName("FoLogEmailAdminII")
                    .HasMaxLength(100);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LoginBgColor).HasMaxLength(20);

                entity.Property(e => e.LoginBgImagePath).HasMaxLength(1000);

                entity.Property(e => e.LoginBtnBgColor).HasMaxLength(20);

                entity.Property(e => e.LoginBtnFontColor).HasMaxLength(20);

                entity.Property(e => e.LoginFormTitle).HasMaxLength(100);

                entity.Property(e => e.LoginLinkColor).HasMaxLength(20);

                entity.Property(e => e.LoginRegLinkTitle).HasMaxLength(100);

                entity.Property(e => e.LoginTextBorderFcolor)
                    .HasColumnName("LoginTextBorderFColor")
                    .HasMaxLength(20);

                entity.Property(e => e.LoginTextBorderTcolor)
                    .HasColumnName("LoginTextBorderTColor")
                    .HasMaxLength(20);

                entity.Property(e => e.LoginTitle).HasMaxLength(100);

                entity.Property(e => e.PrdFcrvisible).HasColumnName("PrdFCRVisible");

                entity.Property(e => e.PrdPriceWithFcrvisible).HasColumnName("PrdPriceWithFCRVisible");

                entity.Property(e => e.PrjDefaultFocmpCanSee).HasColumnName("PrjDefaultFOCmpCanSee");

                entity.Property(e => e.PrjDefaultPostFix).HasMaxLength(200);

                entity.Property(e => e.PrjDefaultTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PrjInsertCrmProjectsForbiddenFufdpactive).HasColumnName("PrjInsertCrmProjectsForbiddenFUFDPActive");

                entity.Property(e => e.RegBgColor).HasMaxLength(20);

                entity.Property(e => e.RegBgImagePath).HasMaxLength(1000);

                entity.Property(e => e.RegBtnBgColor).HasMaxLength(20);

                entity.Property(e => e.RegBtnFontColor).HasMaxLength(20);

                entity.Property(e => e.RegFormTitle).HasMaxLength(100);

                entity.Property(e => e.RegLinkColor).HasMaxLength(20);

                entity.Property(e => e.RegLoginLinkTitle).HasMaxLength(100);

                entity.Property(e => e.RegTextBorderFcolor)
                    .HasColumnName("RegTextBorderFColor")
                    .HasMaxLength(20);

                entity.Property(e => e.RegTextBorderTcolor)
                    .HasColumnName("RegTextBorderTColor")
                    .HasMaxLength(20);

                entity.Property(e => e.RegTitle).HasMaxLength(100);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.ShpHomeGalleryIid).HasColumnName("ShpHomeGalleryIId");

                entity.Property(e => e.ShpHomeGalleryIiid).HasColumnName("ShpHomeGalleryIIId");

                entity.Property(e => e.ShpHomeGalleryIiiid).HasColumnName("ShpHomeGalleryIIIId");

                entity.Property(e => e.ShpHomePrdPartTitle).HasMaxLength(100);

                entity.Property(e => e.ShpHomeTopHeaderBgColor).HasMaxLength(20);

                entity.Property(e => e.ShpHomeTopHeaderFontColor).HasMaxLength(20);

                entity.Property(e => e.ShpLogoPathWidth110).HasMaxLength(1000);

                entity.Property(e => e.ShpLogoPathWidth215).HasMaxLength(1000);

                entity.Property(e => e.SmsBodyPatternFormula).HasMaxLength(1000);

                entity.Property(e => e.SmsSendByGsm).HasColumnName("SmsSendByGSM");

                entity.Property(e => e.SmsWebServiceNumber).HasMaxLength(50);

                entity.Property(e => e.SmsWebServicePassword).HasMaxLength(300);

                entity.Property(e => e.SmsWebServiceUrl).HasMaxLength(300);

                entity.Property(e => e.SmsWebServiceUserName).HasMaxLength(200);

                entity.Property(e => e.TicketDescTooltip).HasMaxLength(2000);

                entity.HasOne(d => d.CmpDefaultGroup)
                    .WithMany(p => p.CrmFoSetting)
                    .HasForeignKey(d => d.CmpDefaultGroupId)
                    .HasConstraintName("FK_CrmFoSetting_CrmCompanyGroups");

                entity.HasOne(d => d.CmpDefaultGroupIdIiNavigation)
                    .WithMany(p => p.CrmFoSetting)
                    .HasForeignKey(d => d.CmpDefaultGroupIdIi)
                    .HasConstraintName("FK_CrmFoSetting_CrmCompanyGroupsII");

                entity.HasOne(d => d.CmpDefaultGroupIdIiiNavigation)
                    .WithMany(p => p.CrmFoSetting)
                    .HasForeignKey(d => d.CmpDefaultGroupIdIii)
                    .HasConstraintName("FK_CrmFoSetting_CrmCompanyGroupsIII");

                entity.HasOne(d => d.CmpDefaultGroupIdIvNavigation)
                    .WithMany(p => p.CrmFoSetting)
                    .HasForeignKey(d => d.CmpDefaultGroupIdIv)
                    .HasConstraintName("FK_CrmFoSetting_CrmCompanyGroupsIV");

                entity.HasOne(d => d.CmpDefaultPresentation)
                    .WithMany(p => p.CrmFoSetting)
                    .HasForeignKey(d => d.CmpDefaultPresentationId)
                    .HasConstraintName("FK_CrmFoSetting_CrmCompanyPresentation");

                entity.HasOne(d => d.CmpDefaultReferUser)
                    .WithMany(p => p.CrmFoSettingCmpDefaultReferUser)
                    .HasForeignKey(d => d.CmpDefaultReferUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFoSetting_CmpReferUsers");

                entity.HasOne(d => d.CmpDefaultSubGroup)
                    .WithMany(p => p.CrmFoSetting)
                    .HasForeignKey(d => d.CmpDefaultSubGroupId)
                    .HasConstraintName("FK_CrmFoSetting_CrmCompanySubGroups");

                entity.HasOne(d => d.CmpDefaultType)
                    .WithMany(p => p.CrmFoSetting)
                    .HasForeignKey(d => d.CmpDefaultTypeId)
                    .HasConstraintName("FK_CrmFoSetting_CrmCompanyType");

                entity.HasOne(d => d.CnvsDefaultPriority)
                    .WithMany(p => p.CrmFoSetting)
                    .HasForeignKey(d => d.CnvsDefaultPriorityId)
                    .HasConstraintName("FK_CrmFoSetting_CrmConversationPriority");

                entity.HasOne(d => d.CnvsDefaultReferUser)
                    .WithMany(p => p.CrmFoSettingCnvsDefaultReferUser)
                    .HasForeignKey(d => d.CnvsDefaultReferUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFoSetting_CnvsReferUsers");

                entity.HasOne(d => d.CnvsDefaultStatus)
                    .WithMany(p => p.CrmFoSetting)
                    .HasForeignKey(d => d.CnvsDefaultStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFoSetting_CrmConversationStatus");

                entity.HasOne(d => d.CnvsDefaultTopic)
                    .WithMany(p => p.CrmFoSetting)
                    .HasForeignKey(d => d.CnvsDefaultTopicId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFoSetting_CrmConversationTopics");

                entity.HasOne(d => d.CnvsDefaultUser)
                    .WithMany(p => p.CrmFoSettingCnvsDefaultUser)
                    .HasForeignKey(d => d.CnvsDefaultUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFoSetting_CnvsUsers");

                entity.HasOne(d => d.EmailSetting)
                    .WithMany(p => p.CrmFoSetting)
                    .HasForeignKey(d => d.EmailSettingId)
                    .HasConstraintName("FK_CrmFoSetting_EmailSetting");

                entity.HasOne(d => d.EmailUserInfo)
                    .WithMany(p => p.CrmFoSetting)
                    .HasForeignKey(d => d.EmailUserInfoId)
                    .HasConstraintName("FK_CrmFoSetting_EmailUsersInfo");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmFoSettingFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFoSetting_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmFoSetting)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFoSetting_Languages");

                entity.HasOne(d => d.PrjDefaultCnvsStatusGroup)
                    .WithMany(p => p.CrmFoSetting)
                    .HasForeignKey(d => d.PrjDefaultCnvsStatusGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFoSetting_CrmConversationStatusGroups");

                entity.HasOne(d => d.PrjDefaultGrade)
                    .WithMany(p => p.CrmFoSetting)
                    .HasForeignKey(d => d.PrjDefaultGradeId)
                    .HasConstraintName("FK_CrmFoSetting_CrmProjectGrade");

                entity.HasOne(d => d.PrjDefaultGroup)
                    .WithMany(p => p.CrmFoSetting)
                    .HasForeignKey(d => d.PrjDefaultGroupId)
                    .HasConstraintName("FK_CrmFoSetting_CrmProjectGroups");

                entity.HasOne(d => d.PrjDefaultPriority)
                    .WithMany(p => p.CrmFoSetting)
                    .HasForeignKey(d => d.PrjDefaultPriorityId)
                    .HasConstraintName("FK_CrmFoSetting_CrmProjectPriority");

                entity.HasOne(d => d.PrjDefaultStarterUser)
                    .WithMany(p => p.CrmFoSettingPrjDefaultStarterUser)
                    .HasForeignKey(d => d.PrjDefaultStarterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFoSetting_PrjStarterUsers");

                entity.HasOne(d => d.RegDyForm)
                    .WithMany(p => p.CrmFoSetting)
                    .HasForeignKey(d => d.RegDyFormId)
                    .HasConstraintName("FK_CrmFoSetting_CrmDyForms");

                entity.HasOne(d => d.ShpHomeGalleryI)
                    .WithMany(p => p.CrmFoSettingShpHomeGalleryI)
                    .HasForeignKey(d => d.ShpHomeGalleryIid)
                    .HasConstraintName("FK_CrmFoSetting_CrmCmsGallery");

                entity.HasOne(d => d.ShpHomeGalleryIi)
                    .WithMany(p => p.CrmFoSettingShpHomeGalleryIi)
                    .HasForeignKey(d => d.ShpHomeGalleryIiid)
                    .HasConstraintName("FK_CrmFoSetting_CrmCmsGalleryII");

                entity.HasOne(d => d.ShpHomeGalleryIii)
                    .WithMany(p => p.CrmFoSettingShpHomeGalleryIii)
                    .HasForeignKey(d => d.ShpHomeGalleryIiiid)
                    .HasConstraintName("FK_CrmFoSetting_CrmCmsGalleryIII");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmFoSettingUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFoSetting_Users");
            });

            modelBuilder.Entity<CrmFoSettingLang>(entity =>
            {
                entity.HasKey(e => e.CrmFoSettingLandId);

                entity.ToTable("CrmFoSetting_Lang");

                entity.Property(e => e.CrmFoSettingLandId).HasColumnName("CrmFoSettingLandID");

                entity.Property(e => e.CnvsDefaultDesc)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.CnvsDefaultReferDesc).HasMaxLength(500);

                entity.Property(e => e.CnvsDescTooltip).HasMaxLength(2000);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LoginFormTitle).HasMaxLength(100);

                entity.Property(e => e.LoginRegLinkTitle).HasMaxLength(100);

                entity.Property(e => e.LoginTitle).HasMaxLength(100);

                entity.Property(e => e.PrjDefaultPostFix).HasMaxLength(200);

                entity.Property(e => e.PrjDefaultTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegFormTitle).HasMaxLength(100);

                entity.Property(e => e.RegLoginLinkTitle).HasMaxLength(100);

                entity.Property(e => e.RegTitle).HasMaxLength(100);

                entity.Property(e => e.ShpHomePrdPartTitle).HasMaxLength(100);

                entity.Property(e => e.TicketDescTooltip).HasMaxLength(2000);

                entity.HasOne(d => d.FoSetting)
                    .WithMany(p => p.CrmFoSettingLang)
                    .HasForeignKey(d => d.FoSettingId)
                    .HasConstraintName("FK_CrmFoSetting_Lang_CrmFoSetting");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmFoSettingLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFoSetting_Lang_Languages");
            });

            modelBuilder.Entity<CrmFund>(entity =>
            {
                entity.HasKey(e => e.FundId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FundCredit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FundDate).HasColumnType("datetime");

                entity.Property(e => e.FundDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FundDebit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FundDesc).HasMaxLength(4000);

                entity.Property(e => e.FundRemain).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmFundCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFund_CrmUsers");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmFundFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFund_FirstRegisterUsers");

                entity.HasOne(d => d.FundGroup)
                    .WithMany(p => p.CrmFund)
                    .HasForeignKey(d => d.FundGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFund_CrmFundGroups");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmFund)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFund_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmFundUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFund_Users");
            });

            modelBuilder.Entity<CrmFundGroups>(entity =>
            {
                entity.HasKey(e => e.FundGroupId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmFundGroupsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFundGroups_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmFundGroups)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFundGroups_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmFundGroupsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFundGroups_Users");
            });

            modelBuilder.Entity<CrmFundGroupsLang>(entity =>
            {
                entity.HasKey(e => e.CrmFundGroupLangId);

                entity.ToTable("CrmFundGroups_Lang");

                entity.Property(e => e.CrmFundGroupLangId).HasColumnName("CrmFundGroupLangID");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.FundGroup)
                    .WithMany(p => p.CrmFundGroupsLang)
                    .HasForeignKey(d => d.FundGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFundGroups_Lang_CrmFundGroups");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmFundGroupsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFundGroups_Lang_Languages");
            });

            modelBuilder.Entity<CrmFundLang>(entity =>
            {
                entity.ToTable("CrmFund_Lang");

                entity.Property(e => e.CrmFundLangId).HasColumnName("CrmFundLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Fund)
                    .WithMany(p => p.CrmFundLang)
                    .HasForeignKey(d => d.FundId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFund_Lang_CrmFund");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmFundLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmFund_Lang_Languages");
            });

            modelBuilder.Entity<CrmImportFromExcel>(entity =>
            {
                entity.Property(e => e.CmpAccInquiry)
                    .HasColumnName("cmpAccInquiry")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpAccountNumber)
                    .HasColumnName("cmpAccountNumber")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpActivityType)
                    .HasColumnName("cmpActivityType")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpAddress)
                    .HasColumnName("cmpAddress")
                    .HasMaxLength(250);

                entity.Property(e => e.CmpAddressDesc)
                    .HasColumnName("cmpAddressDesc")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpBuyLimit)
                    .HasColumnName("cmpBuyLimit")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpCode)
                    .HasColumnName("cmpCode")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CmpCoordinateLastDatePersian)
                    .HasColumnName("cmpCoordinateLastDatePersian")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CmpCoordinateLatitude)
                    .HasColumnName("cmpCoordinateLatitude")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpCoordinateLongitude)
                    .HasColumnName("cmpCoordinateLongitude")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpCoordinateZoomLevel).HasColumnName("cmpCoordinateZoomLevel");

                entity.Property(e => e.CmpDescription)
                    .HasColumnName("cmpDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpEconomicCode)
                    .HasColumnName("cmpEconomicCode")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CmpEffectiveDatePersian)
                    .HasColumnName("cmpEffectiveDatePersian")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CmpEffectiveDateTime)
                    .HasColumnName("cmpEffectiveDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.CmpEmail)
                    .HasColumnName("cmpEmail")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpFame)
                    .HasColumnName("cmpFame")
                    .HasMaxLength(200);

                entity.Property(e => e.CmpFax)
                    .HasColumnName("cmpFax")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CmpFaxDesc)
                    .HasColumnName("cmpFaxDesc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CmpFreight)
                    .HasColumnName("cmpFreight")
                    .HasMaxLength(200);

                entity.Property(e => e.CmpInquiry)
                    .HasColumnName("cmpInquiry")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpInteresting)
                    .HasColumnName("cmpInteresting")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpKind).HasColumnName("cmpKind");

                entity.Property(e => e.CmpMobile)
                    .HasColumnName("cmpMobile")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CmpName)
                    .HasColumnName("cmpName")
                    .HasMaxLength(300);

                entity.Property(e => e.CmpNameEng)
                    .HasColumnName("cmpNameEng")
                    .HasMaxLength(300);

                entity.Property(e => e.CmpNationalCode)
                    .HasColumnName("cmpNationalCode")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CmpNumber).HasColumnName("cmpNumber");

                entity.Property(e => e.CmpPassword)
                    .HasColumnName("cmpPassword")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpPostBox)
                    .HasColumnName("cmpPostBox")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CmpPreTel)
                    .HasColumnName("cmpPreTel")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CmpPreTelIi)
                    .HasColumnName("cmpPreTelII")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CmpRegistrationNumber)
                    .HasColumnName("cmpRegistrationNumber")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CmpSpecialPoint)
                    .HasColumnName("cmpSpecialPoint")
                    .HasMaxLength(500);

                entity.Property(e => e.CmpSpecialWordForCi)
                    .HasColumnName("cmpSpecialWordForCI")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CmpTel)
                    .HasColumnName("cmpTel")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CmpTelDesc)
                    .HasColumnName("cmpTelDesc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CmpTelIi)
                    .HasColumnName("cmpTelII")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CmpTelIidesc)
                    .HasColumnName("cmpTelIIDesc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CmpTelUpTo)
                    .HasColumnName("cmpTelUpTo")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CmpTelUpToIi)
                    .HasColumnName("cmpTelUpToII")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CmpUserName)
                    .HasColumnName("cmpUserName")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpWebSite)
                    .HasColumnName("cmpWebSite")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpZipCode)
                    .HasColumnName("cmpZipCode")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CnvsDateTime)
                    .HasColumnName("cnvsDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.CnvsDesc)
                    .HasColumnName("cnvsDesc")
                    .HasMaxLength(2000);

                entity.Property(e => e.CnvsFirstRegisterDateTime)
                    .HasColumnName("cnvsFirstRegisterDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.CnvsReferDesc)
                    .HasColumnName("cnvsReferDesc")
                    .HasMaxLength(500);

                entity.Property(e => e.CnvsRemindDate)
                    .HasColumnName("cnvsRemindDate")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CnvsRemindDateForAllarm)
                    .HasColumnName("cnvsRemindDateForAllarm")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CnvsRemindDateTime)
                    .HasColumnName("cnvsRemindDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.CnvsRemindDateTimeForAllarm)
                    .HasColumnName("cnvsRemindDateTimeForAllarm")
                    .HasColumnType("datetime");

                entity.Property(e => e.CnvsRemindTime)
                    .HasColumnName("cnvsRemindTime")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.ErrorMessage).HasMaxLength(4000);

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ImportDateTime).HasColumnType("datetime");

                entity.Property(e => e.PrjDesc)
                    .HasColumnName("prjDesc")
                    .HasMaxLength(300);

                entity.Property(e => e.PrjPostFix)
                    .HasColumnName("prjPostFix")
                    .HasMaxLength(200);

                entity.Property(e => e.PrjRemindDate)
                    .HasColumnName("prjRemindDate")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.PrjRemindDateTime)
                    .HasColumnName("prjRemindDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrjTitle)
                    .HasColumnName("prjTitle")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsAddress)
                    .HasColumnName("prsAddress")
                    .HasMaxLength(250);

                entity.Property(e => e.PrsAddressDesc)
                    .HasColumnName("prsAddressDesc")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsBirthDate)
                    .HasColumnName("prsBirthDate")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.PrsBirthDateTime)
                    .HasColumnName("prsBirthDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrsDescription)
                    .HasColumnName("prsDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.PrsEmail)
                    .HasColumnName("prsEmail")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsEmailIi)
                    .HasColumnName("prsEmailII")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFax)
                    .HasColumnName("prsFax")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.PrsFaxDesc)
                    .HasColumnName("prsFaxDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsFname)
                    .HasColumnName("prsFName")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsImportDateTime)
                    .HasColumnName("prsImportDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrsLname)
                    .HasColumnName("prsLName")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsMarriageDate)
                    .HasColumnName("prsMarriageDate")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.PrsMarriageDateTime)
                    .HasColumnName("prsMarriageDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrsMobile)
                    .HasColumnName("prsMobile")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.PrsNationalCode)
                    .HasColumnName("prsNationalCode")
                    .HasMaxLength(30);

                entity.Property(e => e.PrsPostBox)
                    .HasColumnName("prsPostBox")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrsPreTel)
                    .HasColumnName("prsPreTel")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PrsTel)
                    .HasColumnName("prsTel")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.PrsTelDesc)
                    .HasColumnName("prsTelDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsTelIi)
                    .HasColumnName("prsTelII")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.PrsTelUpTo)
                    .HasColumnName("prsTelUpTo")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PrsTitleId).HasColumnName("prsTitleId");

                entity.Property(e => e.PrsWebSite)
                    .HasColumnName("prsWebSite")
                    .HasMaxLength(50);

                entity.Property(e => e.PrsZipCode)
                    .HasColumnName("prsZipCode")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmImportFromExcelFields>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.FieldCaption).HasMaxLength(200);

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FieldType).HasMaxLength(150);
            });

            modelBuilder.Entity<CrmInternalMessage>(entity =>
            {
                entity.HasKey(e => e.InternalMessageId);

                entity.Property(e => e.InternalMessageId).HasColumnName("InternalMessageID");

                entity.Property(e => e.ApiId).HasMaxLength(200);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.MsgActiveInCycle).HasColumnName("msgActiveInCycle");

                entity.Property(e => e.MsgAttachRecId).HasColumnName("msgAttachRecId");

                entity.Property(e => e.MsgBody).HasColumnName("msgBody");

                entity.Property(e => e.MsgFromUserId).HasColumnName("msgFromUserId");

                entity.Property(e => e.MsgIsFinalised).HasColumnName("msgIsFinalised");

                entity.Property(e => e.MsgLastGroupId).HasColumnName("msgLastGroupId");

                entity.Property(e => e.MsgMasterId).HasColumnName("msgMasterId");

                entity.Property(e => e.MsgSubject)
                    .HasColumnName("msgSubject")
                    .HasMaxLength(200);

                entity.Property(e => e.MsgTypeId).HasColumnName("msgTypeId");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmInternalMessage)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmInternalMessage_Languages");

                entity.HasOne(d => d.MsgFromUser)
                    .WithMany(p => p.CrmInternalMessage)
                    .HasForeignKey(d => d.MsgFromUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessage_Users");

                entity.HasOne(d => d.MsgType)
                    .WithMany(p => p.CrmInternalMessage)
                    .HasForeignKey(d => d.MsgTypeId)
                    .HasConstraintName("FK_CrmInternalMessage_CrmInternalMessageType");
            });

            modelBuilder.Entity<CrmInternalMessageDefaultContext>(entity =>
            {
                entity.HasKey(e => e.InternalMessageDefaultContextId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Col1).HasMaxLength(2000);

                entity.Property(e => e.Col10).HasMaxLength(2000);

                entity.Property(e => e.Col11).HasMaxLength(2000);

                entity.Property(e => e.Col12).HasMaxLength(2000);

                entity.Property(e => e.Col13).HasMaxLength(2000);

                entity.Property(e => e.Col14).HasMaxLength(2000);

                entity.Property(e => e.Col15).HasMaxLength(2000);

                entity.Property(e => e.Col2).HasMaxLength(2000);

                entity.Property(e => e.Col3).HasMaxLength(2000);

                entity.Property(e => e.Col4).HasMaxLength(2000);

                entity.Property(e => e.Col5).HasMaxLength(2000);

                entity.Property(e => e.Col6).HasMaxLength(2000);

                entity.Property(e => e.Col7).HasMaxLength(2000);

                entity.Property(e => e.Col8).HasMaxLength(2000);

                entity.Property(e => e.Col9).HasMaxLength(2000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmInternalMessageDefaultContext)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmInternalMessageDefaultContext_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmInternalMessageDefaultContext)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessageDefaultContext_Users");
            });

            modelBuilder.Entity<CrmInternalMessageDefaultContextLang>(entity =>
            {
                entity.ToTable("CrmInternalMessageDefaultContext_Lang");

                entity.Property(e => e.CrmInternalMessageDefaultContextLangId).HasColumnName("CrmInternalMessageDefaultContextLangID");

                entity.Property(e => e.Col1).HasMaxLength(2000);

                entity.Property(e => e.Col10).HasMaxLength(2000);

                entity.Property(e => e.Col11).HasMaxLength(2000);

                entity.Property(e => e.Col12).HasMaxLength(2000);

                entity.Property(e => e.Col13).HasMaxLength(2000);

                entity.Property(e => e.Col14).HasMaxLength(2000);

                entity.Property(e => e.Col15).HasMaxLength(2000);

                entity.Property(e => e.Col2).HasMaxLength(2000);

                entity.Property(e => e.Col3).HasMaxLength(2000);

                entity.Property(e => e.Col4).HasMaxLength(2000);

                entity.Property(e => e.Col5).HasMaxLength(2000);

                entity.Property(e => e.Col6).HasMaxLength(2000);

                entity.Property(e => e.Col7).HasMaxLength(2000);

                entity.Property(e => e.Col8).HasMaxLength(2000);

                entity.Property(e => e.Col9).HasMaxLength(2000);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.InternalMessageDefaultContext)
                    .WithMany(p => p.CrmInternalMessageDefaultContextLang)
                    .HasForeignKey(d => d.InternalMessageDefaultContextId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessageDefaultContext_Lang_CrmInternalMessageDefaultContext");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmInternalMessageDefaultContextLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessageDefaultContext_Lang_Languages");
            });

            modelBuilder.Entity<CrmInternalMessageDetails>(entity =>
            {
                entity.HasKey(e => e.InternalMessageDetailId);

                entity.HasIndex(e => e.MsgdInternalMessageId)
                    .HasDatabaseName("IX_CrmInternalMessageDetails_InternalMessageId");

                entity.Property(e => e.InternalMessageDetailId).HasColumnName("InternalMessageDetailID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.MsgdAttachFile)
                    .HasColumnName("msgdAttachFile")
                    .HasMaxLength(200);

                entity.Property(e => e.MsgdAttachRecDesc)
                    .HasColumnName("msgdAttachRecDesc")
                    .HasMaxLength(100);

                entity.Property(e => e.MsgdAttachRecDescI)
                    .HasColumnName("msgdAttachRecDescI")
                    .HasMaxLength(100);

                entity.Property(e => e.MsgdAttachRecId).HasColumnName("msgdAttachRecId");

                entity.Property(e => e.MsgdAttachRecIdI).HasColumnName("msgdAttachRecIdI");

                entity.Property(e => e.MsgdFromUserId).HasColumnName("msgdFromUserId");

                entity.Property(e => e.MsgdGroupId).HasColumnName("msgdGroupId");

                entity.Property(e => e.MsgdInternalMessageId).HasColumnName("msgdInternalMessageId");

                entity.Property(e => e.MsgdIsDeleted).HasColumnName("msgdIsDeleted");

                entity.Property(e => e.MsgdIsDraft).HasColumnName("msgdIsDraft");

                entity.Property(e => e.MsgdIsRead)
                    .HasColumnName("msgdIsRead")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.MsgdOldTypeId).HasColumnName("msgdOldTypeId");

                entity.Property(e => e.MsgdPriorityId).HasColumnName("msgdPriorityId");

                entity.Property(e => e.MsgdReadDate)
                    .HasColumnName("msgdReadDate")
                    .HasMaxLength(8);

                entity.Property(e => e.MsgdReadDateTime)
                    .HasColumnName("msgdReadDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.MsgdReadTime)
                    .HasColumnName("msgdReadTime")
                    .HasMaxLength(20);

                entity.Property(e => e.MsgdReceiveDate)
                    .HasColumnName("msgdReceiveDate")
                    .HasMaxLength(8);

                entity.Property(e => e.MsgdReceiveDateTime)
                    .HasColumnName("msgdReceiveDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.MsgdReceiveTime)
                    .HasColumnName("msgdReceiveTime")
                    .HasMaxLength(20);

                entity.Property(e => e.MsgdSendDate)
                    .IsRequired()
                    .HasColumnName("msgdSendDate")
                    .HasMaxLength(8);

                entity.Property(e => e.MsgdSendDateTime)
                    .HasColumnName("msgdSendDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.MsgdSendTime)
                    .IsRequired()
                    .HasColumnName("msgdSendTime")
                    .HasMaxLength(20);

                entity.Property(e => e.MsgdToUserId).HasColumnName("msgdToUserId");

                entity.Property(e => e.MsgdTypeId).HasColumnName("msgdTypeId");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmInternalMessageDetailsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmInternalMessageDetails_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmInternalMessageDetails)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmInternalMessageDetails_Languages");

                entity.HasOne(d => d.MsgdFromUser)
                    .WithMany(p => p.CrmInternalMessageDetailsMsgdFromUser)
                    .HasForeignKey(d => d.MsgdFromUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessageDetails_Users");

                entity.HasOne(d => d.MsgdGroup)
                    .WithMany(p => p.CrmInternalMessageDetails)
                    .HasForeignKey(d => d.MsgdGroupId)
                    .HasConstraintName("FK_CrmInternalMessageDetails_CrmInternalMessageGroup");

                entity.HasOne(d => d.MsgdInternalMessage)
                    .WithMany(p => p.CrmInternalMessageDetails)
                    .HasForeignKey(d => d.MsgdInternalMessageId)
                    .HasConstraintName("FK_CrmInternalMessageDetails_CrmInternalMessage");

                entity.HasOne(d => d.MsgdToUser)
                    .WithMany(p => p.CrmInternalMessageDetailsMsgdToUser)
                    .HasForeignKey(d => d.MsgdToUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessageDetails_Users1");

                entity.HasOne(d => d.MsgdType)
                    .WithMany(p => p.CrmInternalMessageDetails)
                    .HasForeignKey(d => d.MsgdTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessageDetails_CrmInternalMessageType");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmInternalMessageDetailsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessageDetails_Users2");
            });

            modelBuilder.Entity<CrmInternalMessageGroup>(entity =>
            {
                entity.HasKey(e => e.InternalMessageGroupId);

                entity.Property(e => e.InternalMessageGroupId).HasColumnName("InternalMessageGroupID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.InternalMessageGroup)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmInternalMessageGroup)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmInternalMessageGroup_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmInternalMessageGroup)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessageGroup_Users");
            });

            modelBuilder.Entity<CrmInternalMessageGroupLang>(entity =>
            {
                entity.ToTable("CrmInternalMessageGroup_Lang");

                entity.Property(e => e.CrmInternalMessageGroupLangId).HasColumnName("CrmInternalMessageGroupLangID");

                entity.Property(e => e.InternalMessageGroup)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.InternalMessageGroupId).HasColumnName("InternalMessageGroupID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.InternalMessageGroupNavigation)
                    .WithMany(p => p.CrmInternalMessageGroupLang)
                    .HasForeignKey(d => d.InternalMessageGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessageGroup_Lang_CrmInternalMessageGroup");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmInternalMessageGroupLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessageGroup_Lang_Languages");
            });

            modelBuilder.Entity<CrmInternalMessageLang>(entity =>
            {
                entity.ToTable("CrmInternalMessage_Lang");

                entity.Property(e => e.CrmInternalMessageLangId).HasColumnName("CrmInternalMessageLangID");

                entity.Property(e => e.InternalMessageId).HasColumnName("InternalMessageID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.MsgBody).HasColumnName("msgBody");

                entity.Property(e => e.MsgSubject)
                    .HasColumnName("msgSubject")
                    .HasMaxLength(200);

                entity.HasOne(d => d.InternalMessage)
                    .WithMany(p => p.CrmInternalMessageLang)
                    .HasForeignKey(d => d.InternalMessageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessage_Lang_CrmInternalMessage");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmInternalMessageLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessage_Lang_Languages");
            });

            modelBuilder.Entity<CrmInternalMessagePriority>(entity =>
            {
                entity.HasKey(e => e.InternalMessagePriorityId);

                entity.Property(e => e.InternalMessagePriorityId).HasColumnName("InternalMessagePriorityID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.InternalMessagePriority)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian).HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmInternalMessagePriority)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmInternalMessagePriority_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmInternalMessagePriority)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_CrmInternalMessagePriority_Users");
            });

            modelBuilder.Entity<CrmInternalMessagePriorityLang>(entity =>
            {
                entity.ToTable("CrmInternalMessagePriority_Lang");

                entity.Property(e => e.CrmInternalMessagePriorityLangId).HasColumnName("CrmInternalMessagePriorityLangID");

                entity.Property(e => e.InternalMessagePriority)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InternalMessagePriorityId).HasColumnName("InternalMessagePriorityID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.InternalMessagePriorityNavigation)
                    .WithMany(p => p.CrmInternalMessagePriorityLang)
                    .HasForeignKey(d => d.InternalMessagePriorityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessagePriority_Lang_CrmInternalMessagePriority");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmInternalMessagePriorityLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessagePriority_Lang_Languages");
            });

            modelBuilder.Entity<CrmInternalMessageSelectReceiver>(entity =>
            {
                entity.HasKey(e => new { e.CrmUserId, e.UserId });

                entity.Property(e => e.CrmUserId).HasColumnName("crmUserId");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian).HasMaxLength(8);

                entity.Property(e => e.Val).HasMaxLength(200);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmInternalMessageSelectReceiver)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmInternalMessageSelectReceiver_Users");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmInternalMessageSelectReceiver)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmInternalMessageSelectReceiver_Languages");
            });

            modelBuilder.Entity<CrmInternalMessageTreeType>(entity =>
            {
                entity.HasKey(e => e.InternalMessageTreeTypeId);

                entity.Property(e => e.InternalMessageTreeTypeId).HasColumnName("InternalMessageTreeTypeID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.MessageTreeType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmInternalMessageTreeTypeFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmInternalMessageTreeType_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmInternalMessageTreeType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmInternalMessageTreeType_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmInternalMessageTreeTypeUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessageTreeType_Users");
            });

            modelBuilder.Entity<CrmInternalMessageTreeTypeLang>(entity =>
            {
                entity.ToTable("CrmInternalMessageTreeType_Lang");

                entity.Property(e => e.CrmInternalMessageTreeTypeLangId).HasColumnName("CrmInternalMessageTreeTypeLangID");

                entity.Property(e => e.InternalMessageTreeTypeId).HasColumnName("InternalMessageTreeTypeID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.MessageTreeType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.InternalMessageTreeType)
                    .WithMany(p => p.CrmInternalMessageTreeTypeLang)
                    .HasForeignKey(d => d.InternalMessageTreeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessageTreeType_Lang_CrmInternalMessageTreeType");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmInternalMessageTreeTypeLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessageTreeType_Lang_Languages");
            });

            modelBuilder.Entity<CrmInternalMessageType>(entity =>
            {
                entity.HasKey(e => e.InternalMessageTypeId);

                entity.Property(e => e.InternalMessageTypeId)
                    .HasColumnName("InternalMessageTypeID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.MessageType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian).HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmInternalMessageType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmInternalMessageType_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmInternalMessageType)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_CrmInternalMessageType_Users");
            });

            modelBuilder.Entity<CrmInternalMessageTypeLang>(entity =>
            {
                entity.ToTable("CrmInternalMessageType_Lang");

                entity.Property(e => e.CrmInternalMessageTypeLangId).HasColumnName("CrmInternalMessageTypeLangID");

                entity.Property(e => e.InternalMessageTypeId).HasColumnName("InternalMessageTypeID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.MessageType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.InternalMessageType)
                    .WithMany(p => p.CrmInternalMessageTypeLang)
                    .HasForeignKey(d => d.InternalMessageTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessageType_Lang_CrmInternalMessageType");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmInternalMessageTypeLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmInternalMessageType_Lang_Languages");
            });

            modelBuilder.Entity<CrmKnowledgeTank>(entity =>
            {
                entity.HasKey(e => e.KnowledgeTankId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.KnlgGroupId).HasColumnName("knlgGroupId");

                entity.Property(e => e.KnlgKnowledge).HasColumnName("knlgKnowledge");

                entity.Property(e => e.KnlgPriorityId).HasColumnName("knlgPriorityId");

                entity.Property(e => e.KnlgSigns).HasColumnName("knlgSigns");

                entity.Property(e => e.KnlgTitle)
                    .IsRequired()
                    .HasColumnName("knlgTitle")
                    .HasMaxLength(200);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmKnowledgeTank)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmKnowledgeTank_Users");

                entity.HasOne(d => d.KnlgGroup)
                    .WithMany(p => p.CrmKnowledgeTank)
                    .HasForeignKey(d => d.KnlgGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmKnowledgeTank_CrmKnowledgeTankGroup");

                entity.HasOne(d => d.KnlgPriority)
                    .WithMany(p => p.CrmKnowledgeTank)
                    .HasForeignKey(d => d.KnlgPriorityId)
                    .HasConstraintName("FK_CrmKnowledgeTank_CrmKnowledgeTankPriority");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmKnowledgeTank)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmKnowledgeTank_Languages");
            });

            modelBuilder.Entity<CrmKnowledgeTankGroup>(entity =>
            {
                entity.HasKey(e => e.KnowledgeTankGroupId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.KnowledgeTankGroupDesc).HasMaxLength(1000);

                entity.Property(e => e.KnowledgeTankGroupTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmKnowledgeTankGroup)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmKnowledgeTankGroup_Users");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmKnowledgeTankGroup)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmKnowledgeTankGroup_Languages");
            });

            modelBuilder.Entity<CrmKnowledgeTankGroupLang>(entity =>
            {
                entity.ToTable("CrmKnowledgeTankGroup_Lang");

                entity.Property(e => e.CrmKnowledgeTankGroupLangId).HasColumnName("CrmKnowledgeTankGroupLangID");

                entity.Property(e => e.KnowledgeTankGroupDesc).HasMaxLength(1000);

                entity.Property(e => e.KnowledgeTankGroupTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.KnowledgeTankGroup)
                    .WithMany(p => p.CrmKnowledgeTankGroupLang)
                    .HasForeignKey(d => d.KnowledgeTankGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmKnowledgeTankGroup_Lang_CrmKnowledgeTankGroup");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmKnowledgeTankGroupLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmKnowledgeTankGroup_Lang_Languages");
            });

            modelBuilder.Entity<CrmKnowledgeTankGroupPermission>(entity =>
            {
                entity.HasKey(e => e.KnowledgeTankGroupPermissionId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmKnowledgeTankGroupPermissionFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmKnowledgeTankGroupPermission_Users20");

                entity.HasOne(d => d.KnowledgeTankGroup)
                    .WithMany(p => p.CrmKnowledgeTankGroupPermission)
                    .HasForeignKey(d => d.KnowledgeTankGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmKnowledgeTankGroupPermission_CrmKnowledgeTankGroup");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmKnowledgeTankGroupPermission)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmKnowledgeTankGroupPermission_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmKnowledgeTankGroupPermissionUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmKnowledgeTankGroupPermission_Users");

                entity.HasOne(d => d.UserRoll)
                    .WithMany(p => p.CrmKnowledgeTankGroupPermission)
                    .HasForeignKey(d => d.UserRollId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmKnowledgeTankGroupPermission_CrmsysRolls");
            });

            modelBuilder.Entity<CrmKnowledgeTankLang>(entity =>
            {
                entity.ToTable("CrmKnowledgeTank_Lang");

                entity.Property(e => e.CrmKnowledgeTankLangId).HasColumnName("CrmKnowledgeTankLangID");

                entity.Property(e => e.KnlgKnowledge).HasColumnName("knlgKnowledge");

                entity.Property(e => e.KnlgSigns).HasColumnName("knlgSigns");

                entity.Property(e => e.KnlgTitle)
                    .IsRequired()
                    .HasColumnName("knlgTitle")
                    .HasMaxLength(200);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.KnowledgeTank)
                    .WithMany(p => p.CrmKnowledgeTankLang)
                    .HasForeignKey(d => d.KnowledgeTankId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmKnowledgeTank_Lang_CrmKnowledgeTank");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmKnowledgeTankLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmKnowledgeTank_Lang_Languages");
            });

            modelBuilder.Entity<CrmKnowledgeTankPriority>(entity =>
            {
                entity.HasKey(e => e.KnowledgeTankPriorityId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.KnowledgeTankPriorityDesc).HasMaxLength(1000);

                entity.Property(e => e.KnowledgeTankPriorityTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmKnowledgeTankPriority)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmKnowledgeTankPriority_Users");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmKnowledgeTankPriority)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmKnowledgeTankPriority_Languages");
            });

            modelBuilder.Entity<CrmKnowledgeTankPriorityLang>(entity =>
            {
                entity.ToTable("CrmKnowledgeTankPriority_Lang");

                entity.Property(e => e.CrmKnowledgeTankPriorityLangId).HasColumnName("CrmKnowledgeTankPriorityLangID");

                entity.Property(e => e.KnowledgeTankPriorityDesc).HasMaxLength(1000);

                entity.Property(e => e.KnowledgeTankPriorityTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.KnowledgeTankPriority)
                    .WithMany(p => p.CrmKnowledgeTankPriorityLang)
                    .HasForeignKey(d => d.KnowledgeTankPriorityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmKnowledgeTankPriority_Lang_CrmKnowledgeTankPriority");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmKnowledgeTankPriorityLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmKnowledgeTankPriority_Lang_Languages");
            });

            modelBuilder.Entity<CrmLeave>(entity =>
            {
                entity.HasKey(e => e.LeaveId)
                    .HasName("PK_CrmUserLeave");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FromDate).HasMaxLength(8);

                entity.Property(e => e.FromTime).HasMaxLength(20);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.HourCount).HasMaxLength(50);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Place).HasMaxLength(100);

                entity.Property(e => e.Reason).HasMaxLength(200);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.ToDate).HasMaxLength(8);

                entity.Property(e => e.ToTime).HasMaxLength(20);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmLeave)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmLeave_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLeave)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmLeave_Languages");
            });

            modelBuilder.Entity<CrmLeaveKinds>(entity =>
            {
                entity.HasKey(e => e.LeaveKindId);

                entity.Property(e => e.LeaveKindId).HasColumnName("LeaveKindID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LeaveKind)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmLeaveKinds)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmLeaveKinds_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLeaveKinds)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmLeaveKinds_Languages");
            });

            modelBuilder.Entity<CrmLeaveStatus>(entity =>
            {
                entity.HasKey(e => e.LeaveStatusId);

                entity.Property(e => e.LeaveStatusId).HasColumnName("LeaveStatusID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LeaveStatus)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmLeaveStatus)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmLeaveStatus_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLeaveStatus)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmLeaveStatus_Languages");
            });

            modelBuilder.Entity<CrmLeaveStayType>(entity =>
            {
                entity.HasKey(e => e.LeaveStayTypeId);

                entity.Property(e => e.LeaveStayTypeId).HasColumnName("LeaveStayTypeID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LeaveStayType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmLeaveStayType)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmLeaveStayType_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLeaveStayType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmLeaveStayType_Languages");
            });

            modelBuilder.Entity<CrmLeaveType>(entity =>
            {
                entity.HasKey(e => e.LeaveTypeId);

                entity.Property(e => e.LeaveTypeId)
                    .HasColumnName("LeaveTypeID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LeaveType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmLeaveType)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmLeaveType_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLeaveType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmLeaveType_Languages");
            });

            modelBuilder.Entity<CrmLeaveVehicleType>(entity =>
            {
                entity.HasKey(e => e.LeavdVehicleTypeId);

                entity.Property(e => e.LeavdVehicleTypeId).HasColumnName("LeavdVehicleTypeID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LeaveVehicleType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmLeaveVehicleType)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmLeaveVehicleType_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLeaveVehicleType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmLeaveVehicleType_Languages");
            });

            modelBuilder.Entity<CrmLinkAccNoAvSetting>(entity =>
            {
                entity.HasKey(e => e.LinkAccNoAvSettingId);

                entity.Property(e => e.LinkAccNoAvSettingId).ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ObjectType).HasMaxLength(50);

                entity.Property(e => e.PartDescription).HasMaxLength(2000);

                entity.Property(e => e.PartField).HasMaxLength(200);

                entity.Property(e => e.PartLabelTitle).HasMaxLength(200);

                entity.Property(e => e.PartTitle)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.PartValue).HasMaxLength(200);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmLinkAccNoAvSettingFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccNoAvSetting_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLinkAccNoAvSetting)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccNoAvSetting_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmLinkAccNoAvSettingUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccNoAvSetting_Users");
            });

            modelBuilder.Entity<CrmLinkAccNoAvSettingDetails>(entity =>
            {
                entity.HasKey(e => e.LinkAccNoAvSettingDetailId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PartField).HasMaxLength(200);

                entity.Property(e => e.PartValue).HasMaxLength(200);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmLinkAccNoAvSettingDetailsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccNoAvSettingDetails_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLinkAccNoAvSettingDetails)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccNoAvSettingDetails_Languages");

                entity.HasOne(d => d.LinkAccNoAvSetting)
                    .WithMany(p => p.CrmLinkAccNoAvSettingDetails)
                    .HasForeignKey(d => d.LinkAccNoAvSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccNoAvSettingDetails_CrmLinkAccNoAvSetting");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmLinkAccNoAvSettingDetailsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccNoAvSettingDetails_Users");
            });

            modelBuilder.Entity<CrmLinkAccNoAvSettingDetailsLang>(entity =>
            {
                entity.HasKey(e => e.CrmLinkAccNoAvSettingDetailLangId);

                entity.ToTable("CrmLinkAccNoAvSettingDetails_Lang");

                entity.Property(e => e.CrmLinkAccNoAvSettingDetailLangId).HasColumnName("CrmLinkAccNoAvSettingDetailLangID");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLinkAccNoAvSettingDetailsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccNoAvSettingDetails_Lang_Languages");

                entity.HasOne(d => d.LinkAccNoAvSettingDetail)
                    .WithMany(p => p.CrmLinkAccNoAvSettingDetailsLang)
                    .HasForeignKey(d => d.LinkAccNoAvSettingDetailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccNoAvSettingDetails_Lang_CrmLinkAccNoAvSettingDetails");
            });

            modelBuilder.Entity<CrmLinkAccNoAvSettingLang>(entity =>
            {
                entity.ToTable("CrmLinkAccNoAvSetting_Lang");

                entity.Property(e => e.CrmLinkAccNoAvSettingLangId).HasColumnName("CrmLinkAccNoAvSettingLangID");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PartDescription).HasMaxLength(2000);

                entity.Property(e => e.PartLabelTitle).HasMaxLength(200);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLinkAccNoAvSettingLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccNoAvSetting_Lang_Languages");

                entity.HasOne(d => d.LinkAccNoAvSetting)
                    .WithMany(p => p.CrmLinkAccNoAvSettingLang)
                    .HasForeignKey(d => d.LinkAccNoAvSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccNoAvSetting_Lang_CrmLinkAccNoAvSetting");
            });

            modelBuilder.Entity<CrmLinkAccSetting>(entity =>
            {
                entity.HasKey(e => e.LinkAccSettingId);

                entity.Property(e => e.LinkAccSettingId).ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ObjectType).HasMaxLength(50);

                entity.Property(e => e.PartDescription).HasMaxLength(2000);

                entity.Property(e => e.PartField).HasMaxLength(200);

                entity.Property(e => e.PartLabelTitle).HasMaxLength(200);

                entity.Property(e => e.PartTitle)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.PartValue).HasMaxLength(200);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmLinkAccSettingFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccSetting_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLinkAccSetting)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccSetting_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmLinkAccSettingUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccSetting_Users");
            });

            modelBuilder.Entity<CrmLinkAccSettingDetails>(entity =>
            {
                entity.HasKey(e => e.LinkAccSettingDetailId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PartField).HasMaxLength(200);

                entity.Property(e => e.PartValue).HasMaxLength(200);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmLinkAccSettingDetailsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccSettingDetails_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLinkAccSettingDetails)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccSettingDetails_Languages");

                entity.HasOne(d => d.LinkAccSetting)
                    .WithMany(p => p.CrmLinkAccSettingDetails)
                    .HasForeignKey(d => d.LinkAccSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccSettingDetails_CrmLinkAccSetting");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmLinkAccSettingDetailsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccSettingDetails_Users");
            });

            modelBuilder.Entity<CrmLinkAccSettingDetailsLang>(entity =>
            {
                entity.HasKey(e => e.CrmLinkAccSettingDetailLangId);

                entity.ToTable("CrmLinkAccSettingDetails_Lang");

                entity.Property(e => e.CrmLinkAccSettingDetailLangId).HasColumnName("CrmLinkAccSettingDetailLangID");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLinkAccSettingDetailsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccSettingDetails_Lang_Languages");

                entity.HasOne(d => d.LinkAccSettingDetail)
                    .WithMany(p => p.CrmLinkAccSettingDetailsLang)
                    .HasForeignKey(d => d.LinkAccSettingDetailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccSettingDetails_Lang_CrmLinkAccSettingDetails");
            });

            modelBuilder.Entity<CrmLinkAccSettingLang>(entity =>
            {
                entity.ToTable("CrmLinkAccSetting_Lang");

                entity.Property(e => e.CrmLinkAccSettingLangId).HasColumnName("CrmLinkAccSettingLangID");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PartDescription).HasMaxLength(2000);

                entity.Property(e => e.PartLabelTitle).HasMaxLength(200);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLinkAccSettingLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccSetting_Lang_Languages");

                entity.HasOne(d => d.LinkAccSetting)
                    .WithMany(p => p.CrmLinkAccSettingLang)
                    .HasForeignKey(d => d.LinkAccSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccSetting_Lang_CrmLinkAccSetting");
            });

            modelBuilder.Entity<CrmLinkAccSystems>(entity =>
            {
                entity.HasKey(e => e.LinkAccSystemId);

                entity.Property(e => e.LinkAccSystemId).ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SystemTitle).HasMaxLength(200);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmLinkAccSystemsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccSystems_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLinkAccSystems)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccSystems_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmLinkAccSystemsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccSystems_Users");
            });

            modelBuilder.Entity<CrmLinkAccTarazSetting>(entity =>
            {
                entity.HasKey(e => e.LinkAccTarazSettingId);

                entity.Property(e => e.LinkAccTarazSettingId).ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ObjectType).HasMaxLength(50);

                entity.Property(e => e.PartDescription).HasMaxLength(2000);

                entity.Property(e => e.PartField).HasMaxLength(200);

                entity.Property(e => e.PartLabelTitle).HasMaxLength(200);

                entity.Property(e => e.PartTitle)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.PartValue).HasMaxLength(200);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmLinkAccTarazSettingFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccTarazSetting_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLinkAccTarazSetting)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccTarazSetting_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmLinkAccTarazSettingUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccTarazSetting_Users");
            });

            modelBuilder.Entity<CrmLinkAccTarazSettingDetails>(entity =>
            {
                entity.HasKey(e => e.LinkAccTarazSettingDetailId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PartField).HasMaxLength(200);

                entity.Property(e => e.PartValue).HasMaxLength(200);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmLinkAccTarazSettingDetailsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccTarazSettingDetails_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLinkAccTarazSettingDetails)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccTarazSettingDetails_Languages");

                entity.HasOne(d => d.LinkAccTarazSetting)
                    .WithMany(p => p.CrmLinkAccTarazSettingDetails)
                    .HasForeignKey(d => d.LinkAccTarazSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccTarazSettingDetails_CrmLinkAccTarazSetting");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmLinkAccTarazSettingDetailsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccTarazSettingDetails_Users");
            });

            modelBuilder.Entity<CrmLinkAccTarazSettingDetailsLang>(entity =>
            {
                entity.HasKey(e => e.CrmLinkAccTarazSettingDetailLangId);

                entity.ToTable("CrmLinkAccTarazSettingDetails_Lang");

                entity.Property(e => e.CrmLinkAccTarazSettingDetailLangId).HasColumnName("CrmLinkAccTarazSettingDetailLangID");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLinkAccTarazSettingDetailsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccTarazSettingDetails_Lang_Languages");

                entity.HasOne(d => d.LinkAccTarazSettingDetail)
                    .WithMany(p => p.CrmLinkAccTarazSettingDetailsLang)
                    .HasForeignKey(d => d.LinkAccTarazSettingDetailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccTarazSettingDetails_Lang_CrmLinkAccTarazSettingDetails");
            });

            modelBuilder.Entity<CrmLinkAccTarazSettingLang>(entity =>
            {
                entity.ToTable("CrmLinkAccTarazSetting_Lang");

                entity.Property(e => e.CrmLinkAccTarazSettingLangId).HasColumnName("CrmLinkAccTarazSettingLangID");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PartDescription).HasMaxLength(2000);

                entity.Property(e => e.PartLabelTitle).HasMaxLength(200);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLinkAccTarazSettingLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccTarazSetting_Lang_Languages");

                entity.HasOne(d => d.LinkAccTarazSetting)
                    .WithMany(p => p.CrmLinkAccTarazSettingLang)
                    .HasForeignKey(d => d.LinkAccTarazSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkAccTarazSetting_Lang_CrmLinkAccTarazSetting");
            });

            modelBuilder.Entity<CrmLinkedCompany>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CrmLinkedCompanyCompany)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkedCompany_CrmCompany");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmLinkedCompanyFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkedCompany_Users");

                entity.HasOne(d => d.LinkedCompany)
                    .WithMany(p => p.CrmLinkedCompanyLinkedCompany)
                    .HasForeignKey(d => d.LinkedCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkedCompany_CrmCompany1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmLinkedCompanyUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkedCompany_Users1");
            });

            modelBuilder.Entity<CrmLinkedType>(entity =>
            {
                entity.HasKey(e => e.LinkedTypeId);

                entity.Property(e => e.LinkedTypeId)
                    .HasColumnName("LinkedTypeID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LinkTypeName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmLinkedType)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmLinkedType_Users");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLinkedType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmLinkedType_Languages");
            });

            modelBuilder.Entity<CrmLinkedTypeLang>(entity =>
            {
                entity.ToTable("CrmLinkedType_Lang");

                entity.Property(e => e.CrmLinkedTypeLangId).HasColumnName("CrmLinkedTypeLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LinkTypeName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LinkedTypeId).HasColumnName("LinkedTypeID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLinkedTypeLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkedType_Lang_Languages");

                entity.HasOne(d => d.LinkedType)
                    .WithMany(p => p.CrmLinkedTypeLang)
                    .HasForeignKey(d => d.LinkedTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkedType_Lang_CrmLinkedType");
            });

            modelBuilder.Entity<CrmLinkedUsers>(entity =>
            {
                entity.HasIndex(e => e.CrmUserId);

                entity.HasIndex(e => e.LinkedUserId);

                entity.HasIndex(e => new { e.LinkedTypeId, e.CrmUserId, e.LinkedUserId })
                    .HasDatabaseName("IX_CrmLinkedUsers")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmLinkedUsersCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkedUsers_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmLinkedUsersFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmLinkedUsers_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmLinkedUsers)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmLinkedUsers_Languages");

                entity.HasOne(d => d.LinkedType)
                    .WithMany(p => p.CrmLinkedUsers)
                    .HasForeignKey(d => d.LinkedTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkedUsers_CrmLinkedType");

                entity.HasOne(d => d.LinkedUser)
                    .WithMany(p => p.CrmLinkedUsersLinkedUser)
                    .HasForeignKey(d => d.LinkedUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkedUsers_Users1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmLinkedUsersUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmLinkedUsers_Users2");
            });

            modelBuilder.Entity<CrmOperationsType>(entity =>
            {
                entity.HasKey(e => e.OperationsTypeId);

                entity.Property(e => e.OperationsTypeId).HasColumnName("OperationsTypeID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmOperationsTypeFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmOperationsType_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmOperationsType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmOperationsType_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmOperationsTypeUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmOperationsType_Users");
            });

            modelBuilder.Entity<CrmOperationsTypeLang>(entity =>
            {
                entity.ToTable("CrmOperationsType_Lang");

                entity.Property(e => e.CrmOperationsTypeLangId).HasColumnName("CrmOperationsTypeLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.OperationsTypeId).HasColumnName("OperationsTypeID");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmOperationsTypeLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmOperationsType_Lang_Languages");

                entity.HasOne(d => d.OperationsType)
                    .WithMany(p => p.CrmOperationsTypeLang)
                    .HasForeignKey(d => d.OperationsTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmOperationsType_Lang_CrmOperationsType");
            });

            modelBuilder.Entity<CrmPersonDepartments>(entity =>
            {
                entity.HasKey(e => e.PersonDepartmentId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PersonDepartment)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmPersonDepartments)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmPersonDepartments_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmPersonDepartments)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmPersonDepartments_Users");
            });

            modelBuilder.Entity<CrmPersonDepartmentsLang>(entity =>
            {
                entity.ToTable("CrmPersonDepartments_Lang");

                entity.Property(e => e.CrmPersonDepartmentsLangId).HasColumnName("CrmPersonDepartmentsLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PersonDepartment)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmPersonDepartmentsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmPersonDepartments_Lang_Languages");

                entity.HasOne(d => d.PersonDepartmentNavigation)
                    .WithMany(p => p.CrmPersonDepartmentsLang)
                    .HasForeignKey(d => d.PersonDepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmPersonDepartments_Lang_CrmPersonDepartments");
            });

            modelBuilder.Entity<CrmPersonGroups>(entity =>
            {
                entity.HasKey(e => e.PersonGroupId);

                entity.Property(e => e.PersonGroupId).HasColumnName("PersonGroupID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PersonGroup).HasMaxLength(100);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmPersonGroups)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmPersonGroups_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmPersonGroups)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmPersonGroups_Users");
            });

            modelBuilder.Entity<CrmPersonGroupsLang>(entity =>
            {
                entity.ToTable("CrmPersonGroups_Lang");

                entity.Property(e => e.CrmPersonGroupsLangId).HasColumnName("CrmPersonGroupsLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PersonGroup).HasMaxLength(100);

                entity.Property(e => e.PersonGroupId).HasColumnName("PersonGroupID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmPersonGroupsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmPersonGroups_Lang_Languages");

                entity.HasOne(d => d.PersonGroupNavigation)
                    .WithMany(p => p.CrmPersonGroupsLang)
                    .HasForeignKey(d => d.PersonGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmPersonGroups_Lang_CrmPersonGroups");
            });

            modelBuilder.Entity<CrmPersonJobs>(entity =>
            {
                entity.HasKey(e => e.PersonJobId);

                entity.Property(e => e.PersonJobId).HasColumnName("PersonJobID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Jobs)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmPersonJobs)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmPersonJobs_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmPersonJobs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmPersonJobs_Users");
            });

            modelBuilder.Entity<CrmPersonJobsLang>(entity =>
            {
                entity.ToTable("CrmPersonJobs_Lang");

                entity.Property(e => e.CrmPersonJobsLangId).HasColumnName("CrmPersonJobsLangID");

                entity.Property(e => e.Jobs)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PersonJobId).HasColumnName("PersonJobID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmPersonJobsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmPersonJobs_Lang_Languages");

                entity.HasOne(d => d.PersonJob)
                    .WithMany(p => p.CrmPersonJobsLang)
                    .HasForeignKey(d => d.PersonJobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmPersonJobs_Lang_CrmPersonJobs");
            });

            modelBuilder.Entity<CrmPersonPicture>(entity =>
            {
                entity.HasKey(e => e.PersonPictureId);

                entity.Property(e => e.PersonPictureId).HasColumnName("PersonPictureID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PersonPicture)
                    .IsRequired()
                    .HasColumnType("image");

                entity.Property(e => e.PictureDesc).HasMaxLength(50);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CompanyPerson)
                    .WithMany(p => p.CrmPersonPicture)
                    .HasForeignKey(d => d.CompanyPersonId)
                    .HasConstraintName("FK_CrmPersonPicture_CrmCompanyPersons");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmPersonPictureFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmPersonPicture_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmPersonPicture)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmPersonPicture_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmPersonPictureUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmPersonPicture_Users");
            });

            modelBuilder.Entity<CrmPersonTitle>(entity =>
            {
                entity.HasKey(e => e.PersonTitleId);

                entity.Property(e => e.PersonTitleId).HasColumnName("PersonTitleID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PersonTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmPersonTitle)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmPersonTitle_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmPersonTitle)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmPersonTitle_Users");
            });

            modelBuilder.Entity<CrmPersonTitleLang>(entity =>
            {
                entity.ToTable("CrmPersonTitle_Lang");

                entity.Property(e => e.CrmPersonTitleLangId).HasColumnName("CrmPersonTitleLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PersonTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PersonTitleId).HasColumnName("PersonTitleID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmPersonTitleLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmPersonTitle_Lang_Languages");

                entity.HasOne(d => d.PersonTitleNavigation)
                    .WithMany(p => p.CrmPersonTitleLang)
                    .HasForeignKey(d => d.PersonTitleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmPersonTitle_Lang_CrmPersonTitle");
            });

            modelBuilder.Entity<CrmPersonType>(entity =>
            {
                entity.HasKey(e => e.PersonTypeId);

                entity.Property(e => e.PersonTypeId).HasColumnName("PersonTypeID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PersonType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmPersonType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmPersonType_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmPersonType)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmPersonType_Users");
            });

            modelBuilder.Entity<CrmPersonTypeLang>(entity =>
            {
                entity.ToTable("CrmPersonType_Lang");

                entity.Property(e => e.CrmPersonTypeLangId).HasColumnName("CrmPersonTypeLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PersonType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PersonTypeId).HasColumnName("PersonTypeID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmPersonTypeLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmPersonType_Lang_Languages");

                entity.HasOne(d => d.PersonTypeNavigation)
                    .WithMany(p => p.CrmPersonTypeLang)
                    .HasForeignKey(d => d.PersonTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmPersonType_Lang_CrmPersonType");
            });

            modelBuilder.Entity<CrmProjectDefualtValue>(entity =>
            {
                entity.HasKey(e => e.ProjectDefualtValueId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DefualtValue)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FieldTitle)
                    .WithMany(p => p.CrmProjectDefualtValue)
                    .HasForeignKey(d => d.FieldTitleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectDefualtValue_CrmProjectFieldTitle");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectDefualtValue)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmProjectDefualtValue_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmProjectDefualtValue)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectDefualtValue_Users");
            });

            modelBuilder.Entity<CrmProjectDefualtValueLang>(entity =>
            {
                entity.HasKey(e => e.ProjectDefualtValueLangId);

                entity.ToTable("CrmProjectDefualtValue_Lang");

                entity.Property(e => e.ProjectDefualtValueLangId).HasColumnName("ProjectDefualtValueLangID");

                entity.Property(e => e.DefualtValue).HasMaxLength(200);

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectDefualtValueLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectDefualtValue_Lang_Languages");

                entity.HasOne(d => d.ProjectDefualtValue)
                    .WithMany(p => p.CrmProjectDefualtValueLang)
                    .HasForeignKey(d => d.ProjectDefualtValueId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectDefualtValue_Lang_CrmProjectDefualtValue");
            });

            modelBuilder.Entity<CrmProjectFieldTitle>(entity =>
            {
                entity.HasKey(e => e.ProjectFieldTitleId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.FieldTitle)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectFieldTitle)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmProjectFieldTitle_Languages");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.CrmProjectFieldTitle)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_CrmProjectFieldTitle_CrmProjects");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmProjectFieldTitle)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectFieldTitle_Users");
            });

            modelBuilder.Entity<CrmProjectFieldTitleLang>(entity =>
            {
                entity.ToTable("CrmProjectFieldTitle_Lang");

                entity.Property(e => e.CrmProjectFieldTitleLangId).HasColumnName("CrmProjectFieldTitleLangID");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.FieldTitle)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectFieldTitleLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectFieldTitle_Lang_Languages");

                entity.HasOne(d => d.ProjectFieldTitle)
                    .WithMany(p => p.CrmProjectFieldTitleLang)
                    .HasForeignKey(d => d.ProjectFieldTitleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectFieldTitle_Lang_CrmProjectFieldTitle");
            });

            modelBuilder.Entity<CrmProjectFieldValueType>(entity =>
            {
                entity.HasKey(e => e.ProjectFieldValueTypeId);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ValueTypeTitle).HasMaxLength(100);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmProjectFieldValueType)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmProjectFieldValueType_Users25");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectFieldValueType)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectFieldValueType_Languages");
            });

            modelBuilder.Entity<CrmProjectGrade>(entity =>
            {
                entity.HasKey(e => e.ProjectGradeId);

                entity.Property(e => e.ProjectGradeId).HasColumnName("ProjectGradeID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProjectGrade)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectGrade)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmProjectGrade_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmProjectGrade)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectGrade_Users");
            });

            modelBuilder.Entity<CrmProjectGradeLang>(entity =>
            {
                entity.HasKey(e => e.CrmProjectGradeId);

                entity.ToTable("CrmProjectGrade_Lang");

                entity.Property(e => e.CrmProjectGradeId).HasColumnName("CrmProjectGradeID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProjectGrade)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProjectGradeId).HasColumnName("ProjectGradeID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectGradeLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectGrade_Lang_Languages");

                entity.HasOne(d => d.ProjectGradeNavigation)
                    .WithMany(p => p.CrmProjectGradeLang)
                    .HasForeignKey(d => d.ProjectGradeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectGrade_Lang_CrmProjectGrade");
            });

            modelBuilder.Entity<CrmProjectGroups>(entity =>
            {
                entity.HasKey(e => e.ProjectGroupId);

                entity.Property(e => e.ProjectGroupId).HasColumnName("ProjectGroupID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProjectGroup)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmProjectGroups)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmProjectGroups_Users");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectGroups)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmProjectGroups_Languages");
            });

            modelBuilder.Entity<CrmProjectGroupsLang>(entity =>
            {
                entity.HasKey(e => e.ProjectGroupsLangId);

                entity.ToTable("CrmProjectGroups_Lang");

                entity.Property(e => e.ProjectGroupsLangId).HasColumnName("ProjectGroupsLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProjectGroup)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProjectGroupId).HasColumnName("ProjectGroupID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectGroupsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectGroups_Lang_Languages");

                entity.HasOne(d => d.ProjectGroupNavigation)
                    .WithMany(p => p.CrmProjectGroupsLang)
                    .HasForeignKey(d => d.ProjectGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectGroups_Lang_CrmProjectGroups");
            });

            modelBuilder.Entity<CrmProjectGroupsMulti>(entity =>
            {
                entity.HasKey(e => e.ProjectGroupsMultiId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProjectGroupsMultiDesc).HasMaxLength(200);

                entity.Property(e => e.ProjectGroupsMultiName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectGroupsMulti)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmProjectGroupsMulti_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmProjectGroupsMulti)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectGroupsMulti_Users");
            });

            modelBuilder.Entity<CrmProjectGroupsMultiI>(entity =>
            {
                entity.HasKey(e => e.ProjectGroupsMultiIid);

                entity.Property(e => e.ProjectGroupsMultiIid).HasColumnName("ProjectGroupsMultiIId");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProjectGroupsMultiIdesc)
                    .HasColumnName("ProjectGroupsMultiIDesc")
                    .HasMaxLength(200);

                entity.Property(e => e.ProjectGroupsMultiIname)
                    .IsRequired()
                    .HasColumnName("ProjectGroupsMultiIName")
                    .HasMaxLength(100);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectGroupsMultiI)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmProjectGroupsMultiI_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmProjectGroupsMultiI)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectGroupsMultiI_Users");
            });

            modelBuilder.Entity<CrmProjectGroupsMultiILang>(entity =>
            {
                entity.HasKey(e => e.ProjectGroupsMultiIlangId);

                entity.ToTable("CrmProjectGroupsMultiI_Lang");

                entity.Property(e => e.ProjectGroupsMultiIlangId).HasColumnName("ProjectGroupsMultiILangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProjectGroupsMultiIdesc)
                    .HasColumnName("ProjectGroupsMultiIDesc")
                    .HasMaxLength(200);

                entity.Property(e => e.ProjectGroupsMultiIid).HasColumnName("ProjectGroupsMultiIId");

                entity.Property(e => e.ProjectGroupsMultiIname)
                    .IsRequired()
                    .HasColumnName("ProjectGroupsMultiIName")
                    .HasMaxLength(100);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectGroupsMultiILang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectGroupsMultiI_Lang_Languages");

                entity.HasOne(d => d.ProjectGroupsMultiI)
                    .WithMany(p => p.CrmProjectGroupsMultiILang)
                    .HasForeignKey(d => d.ProjectGroupsMultiIid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectGroupsMultiI_Lang_CrmProjectGroupsMultiI");
            });

            modelBuilder.Entity<CrmProjectGroupsMultiLang>(entity =>
            {
                entity.HasKey(e => e.ProjectGroupsMultiLangId);

                entity.ToTable("CrmProjectGroupsMulti_Lang");

                entity.Property(e => e.ProjectGroupsMultiLangId).HasColumnName("ProjectGroupsMultiLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProjectGroupsMultiDesc).HasMaxLength(200);

                entity.Property(e => e.ProjectGroupsMultiName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectGroupsMultiLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectGroupsMulti_Lang_Languages");

                entity.HasOne(d => d.ProjectGroupsMulti)
                    .WithMany(p => p.CrmProjectGroupsMultiLang)
                    .HasForeignKey(d => d.ProjectGroupsMultiId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectGroupsMulti_Lang_CrmProjectGroupsMulti");
            });

            modelBuilder.Entity<CrmProjectInformations>(entity =>
            {
                entity.HasKey(e => e.ProjectInformationId);

                entity.HasIndex(e => new { e.ProjectId, e.FieldTitleId })
                    .HasDatabaseName("IX_CrmProjectInformations")
                    .IsUnique();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.FieldValue).HasMaxLength(500);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FieldTitle)
                    .WithMany(p => p.CrmProjectInformations)
                    .HasForeignKey(d => d.FieldTitleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectInformations_CrmProjectFieldTitle");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmProjectInformationsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmProjectInformations_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectInformations)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmProjectInformations_Languages");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.CrmProjectInformations)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectInformations_CrmProjects");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmProjectInformationsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectInformations_Users");
            });

            modelBuilder.Entity<CrmProjectInformationsLang>(entity =>
            {
                entity.HasKey(e => e.ProjectInformationLangId);

                entity.ToTable("CrmProjectInformations_Lang");

                entity.Property(e => e.ProjectInformationLangId).HasColumnName("ProjectInformationLangID");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.FieldValue).HasMaxLength(500);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectInformationsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectInformations_Lang_Languages");

                entity.HasOne(d => d.ProjectInformation)
                    .WithMany(p => p.CrmProjectInformationsLang)
                    .HasForeignKey(d => d.ProjectInformationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectInformations_Lang_CrmProjectInformations");
            });

            modelBuilder.Entity<CrmProjectMultiGroups>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.ProjectGroupsMultiId });

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmProjectMultiGroupsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmProjectMultiGroups_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectMultiGroups)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmProjectMultiGroups_Languages");

                entity.HasOne(d => d.ProjectGroupsMulti)
                    .WithMany(p => p.CrmProjectMultiGroups)
                    .HasForeignKey(d => d.ProjectGroupsMultiId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectMultiGroups_CrmProjectGroupsMulti");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmProjectMultiGroupsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectMultiGroups_Users");
            });

            modelBuilder.Entity<CrmProjectMultiIgroups>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.ProjectGroupsMultiIid });

                entity.ToTable("CrmProjectMultiIGroups");

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.Property(e => e.ProjectGroupsMultiIid).HasColumnName("ProjectGroupsMultiIId");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmProjectMultiIgroupsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmProjectMultiIGroups_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectMultiIgroups)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmProjectMultiIGroups_Languages");

                entity.HasOne(d => d.ProjectGroupsMultiI)
                    .WithMany(p => p.CrmProjectMultiIgroups)
                    .HasForeignKey(d => d.ProjectGroupsMultiIid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectMultiIGroups_CrmProjectGroupsMultiI");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmProjectMultiIgroupsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectMultiIGroups_Users");
            });

            modelBuilder.Entity<CrmProjectPriority>(entity =>
            {
                entity.HasKey(e => e.ProjectPriorityId);

                entity.Property(e => e.ProjectPriorityId).HasColumnName("ProjectPriorityID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Color).HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Priority)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PriorityDesc).HasMaxLength(200);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmProjectPriorityFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmProjectPriority_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectPriority)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmProjectPriority_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmProjectPriorityUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectPriority_Users");
            });

            modelBuilder.Entity<CrmProjectPriorityLang>(entity =>
            {
                entity.ToTable("CrmProjectPriority_Lang");

                entity.Property(e => e.CrmProjectPriorityLangId).HasColumnName("CrmProjectPriorityLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Priority)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PriorityDesc).HasMaxLength(200);

                entity.Property(e => e.ProjectPriorityId).HasColumnName("ProjectPriorityID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectPriorityLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectPriority_Lang_Languages");

                entity.HasOne(d => d.ProjectPriority)
                    .WithMany(p => p.CrmProjectPriorityLang)
                    .HasForeignKey(d => d.ProjectPriorityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectPriority_Lang_CrmProjectPriority");
            });

            modelBuilder.Entity<CrmProjectTitles>(entity =>
            {
                entity.HasKey(e => e.ProjectTitleId);

                entity.Property(e => e.ProjectTitleId).HasColumnName("ProjectTitleID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProjectTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProjectTitleDesc).HasMaxLength(300);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmProjectTitlesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmProjectTitles_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectTitles)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmProjectTitles_Languages");

                entity.HasOne(d => d.ProjectTitleGrade)
                    .WithMany(p => p.CrmProjectTitles)
                    .HasForeignKey(d => d.ProjectTitleGradeId)
                    .HasConstraintName("FK_CrmProjectTitles_CrmProjectGrade");

                entity.HasOne(d => d.ProjectTitleGroup)
                    .WithMany(p => p.CrmProjectTitles)
                    .HasForeignKey(d => d.ProjectTitleGroupId)
                    .HasConstraintName("FK_CrmProjectTitles_CrmProjectGroups");

                entity.HasOne(d => d.ProjectTitlePriority)
                    .WithMany(p => p.CrmProjectTitles)
                    .HasForeignKey(d => d.ProjectTitlePriorityId)
                    .HasConstraintName("FK_CrmProjectTitles_CrmProjectPriority");

                entity.HasOne(d => d.ProjectTitleStatusGroup)
                    .WithMany(p => p.CrmProjectTitles)
                    .HasForeignKey(d => d.ProjectTitleStatusGroupId)
                    .HasConstraintName("FK_CrmProjectTitles_CrmConversationStatusGroups");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmProjectTitlesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectTitles_Users");
            });

            modelBuilder.Entity<CrmProjectTitlesLang>(entity =>
            {
                entity.ToTable("CrmProjectTitles_Lang");

                entity.Property(e => e.CrmProjectTitlesLangId).HasColumnName("CrmProjectTitlesLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProjectTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProjectTitleDesc).HasMaxLength(300);

                entity.Property(e => e.ProjectTitleId).HasColumnName("ProjectTitleID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectTitlesLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectTitles_Lang_Languages");

                entity.HasOne(d => d.ProjectTitleNavigation)
                    .WithMany(p => p.CrmProjectTitlesLang)
                    .HasForeignKey(d => d.ProjectTitleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectTitles_Lang_CrmProjectTitles");
            });

            modelBuilder.Entity<CrmProjects>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.HasIndex(e => e.PrjCompanyId)
                    .HasDatabaseName("IX_CrmProjects_CompanyId");

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDateTime).HasColumnType("datetime");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrjCompanyId).HasColumnName("prjCompanyId");

                entity.Property(e => e.PrjDesc)
                    .HasColumnName("prjDesc")
                    .HasMaxLength(300);

                entity.Property(e => e.PrjFinishedDate)
                    .HasColumnName("prjFinishedDate")
                    .HasMaxLength(8);

                entity.Property(e => e.PrjFinishedDateTime)
                    .HasColumnName("prjFinishedDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrjFinishedDay)
                    .HasColumnName("prjFinishedDay")
                    .HasMaxLength(50);

                entity.Property(e => e.PrjFinishedStatusId).HasColumnName("prjFinishedStatusId");

                entity.Property(e => e.PrjFinishedTime)
                    .HasColumnName("prjFinishedTime")
                    .HasMaxLength(15);

                entity.Property(e => e.PrjFinishedUserId).HasColumnName("prjFinishedUserId");

                entity.Property(e => e.PrjFirstRegisterDate)
                    .IsRequired()
                    .HasColumnName("prjFirstRegisterDate")
                    .HasMaxLength(8);

                entity.Property(e => e.PrjFirstRegisterDateTime)
                    .HasColumnName("prjFirstRegisterDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrjFirstRegisterUserId).HasColumnName("prjFirstRegisterUserId");

                entity.Property(e => e.PrjFocmpCanSee).HasColumnName("prjFOCmpCanSee");

                entity.Property(e => e.PrjGradeId).HasColumnName("prjGradeId");

                entity.Property(e => e.PrjGroupId).HasColumnName("prjGroupId");

                entity.Property(e => e.PrjHaveSms).HasColumnName("prjHaveSms");

                entity.Property(e => e.PrjIsFinished).HasColumnName("prjIsFinished");

                entity.Property(e => e.PrjIsTicket).HasColumnName("prjIsTicket");

                entity.Property(e => e.PrjOrderView).HasColumnName("prjOrderView");

                entity.Property(e => e.PrjPostFix)
                    .HasColumnName("prjPostFix")
                    .HasMaxLength(200);

                entity.Property(e => e.PrjPriorityId).HasColumnName("prjPriorityId");

                entity.Property(e => e.PrjRemindDate)
                    .HasColumnName("prjRemindDate")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.PrjRemindDateTime)
                    .HasColumnName("prjRemindDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrjSmsPrsIds)
                    .HasColumnName("prjSmsPrsIds")
                    .HasMaxLength(3000);

                entity.Property(e => e.PrjSmsSendDate)
                    .HasColumnName("prjSmsSendDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrjSmsSendDatePersian)
                    .HasColumnName("prjSmsSendDatePersian")
                    .HasMaxLength(8);

                entity.Property(e => e.PrjSmsText)
                    .HasColumnName("prjSmsText")
                    .HasMaxLength(2000);

                entity.Property(e => e.PrjStartDate)
                    .HasColumnName("prjStartDate")
                    .HasMaxLength(8);

                entity.Property(e => e.PrjStartDateTime)
                    .HasColumnName("prjStartDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrjStartDay)
                    .HasColumnName("prjStartDay")
                    .HasMaxLength(20);

                entity.Property(e => e.PrjStartTime)
                    .HasColumnName("prjStartTime")
                    .HasMaxLength(15);

                entity.Property(e => e.PrjStarterUserId).HasColumnName("prjStarterUserId");

                entity.Property(e => e.PrjTitle)
                    .IsRequired()
                    .HasColumnName("prjTitle")
                    .HasMaxLength(100);

                entity.Property(e => e.PrjUserDepartmentId).HasColumnName("prjUserDepartmentId");

                entity.Property(e => e.PrjcnvsStatusGroupId).HasColumnName("prjcnvsStatusGroupId");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmProjectsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmProjects_Users4");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjects)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmProjects_Languages");

                entity.HasOne(d => d.PrjCompany)
                    .WithMany(p => p.CrmProjects)
                    .HasForeignKey(d => d.PrjCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjects_CrmCompany");

                entity.HasOne(d => d.PrjFinishedStatus)
                    .WithMany(p => p.CrmProjects)
                    .HasForeignKey(d => d.PrjFinishedStatusId)
                    .HasConstraintName("FK_CrmProjects_CrmConversationStatus");

                entity.HasOne(d => d.PrjFinishedUser)
                    .WithMany(p => p.CrmProjectsPrjFinishedUser)
                    .HasForeignKey(d => d.PrjFinishedUserId)
                    .HasConstraintName("FK_CrmProjects_Users1");

                entity.HasOne(d => d.PrjFirstRegisterUser)
                    .WithMany(p => p.CrmProjectsPrjFirstRegisterUser)
                    .HasForeignKey(d => d.PrjFirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjects_Users2");

                entity.HasOne(d => d.PrjGrade)
                    .WithMany(p => p.CrmProjects)
                    .HasForeignKey(d => d.PrjGradeId)
                    .HasConstraintName("FK_CrmProjects_CrmProjectGrade");

                entity.HasOne(d => d.PrjGroup)
                    .WithMany(p => p.CrmProjects)
                    .HasForeignKey(d => d.PrjGroupId)
                    .HasConstraintName("FK_CrmProjects_CrmProjectGroups");

                entity.HasOne(d => d.PrjPriority)
                    .WithMany(p => p.CrmProjects)
                    .HasForeignKey(d => d.PrjPriorityId)
                    .HasConstraintName("FK_CrmProjects_CrmProjectPriority");

                entity.HasOne(d => d.PrjStarterUser)
                    .WithMany(p => p.CrmProjectsPrjStarterUser)
                    .HasForeignKey(d => d.PrjStarterUserId)
                    .HasConstraintName("FK_CrmProjects_Users");

                entity.HasOne(d => d.PrjUserDepartment)
                    .WithMany(p => p.CrmProjects)
                    .HasForeignKey(d => d.PrjUserDepartmentId)
                    .HasConstraintName("FK_CrmProjects_UserDepartments");

                entity.HasOne(d => d.PrjcnvsStatusGroup)
                    .WithMany(p => p.CrmProjects)
                    .HasForeignKey(d => d.PrjcnvsStatusGroupId)
                    .HasConstraintName("FK_CrmProjects_CrmConversationStatusGroups");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmProjectsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjects_Users3");
            });

            modelBuilder.Entity<CrmProjectsForbiddenForUser>(entity =>
            {
                entity.HasKey(e => e.ProjectsForbiddenForUserId);

                entity.Property(e => e.ProjectsForbiddenForUserId).HasColumnName("ProjectsForbiddenForUserID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ForbiddenProjectTitle).HasMaxLength(100);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmProjectsForbiddenForUserCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .HasConstraintName("FK_CrmProjectsForbiddenForUser_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmProjectsForbiddenForUserFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectsForbiddenForUser_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectsForbiddenForUser)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmProjectsForbiddenForUser_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmProjectsForbiddenForUserUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectsForbiddenForUser_Users2");
            });

            modelBuilder.Entity<CrmProjectsForbiddenForUserLang>(entity =>
            {
                entity.ToTable("CrmProjectsForbiddenForUser_Lang");

                entity.Property(e => e.CrmProjectsForbiddenForUserLangId).HasColumnName("CrmProjectsForbiddenForUserLangID");

                entity.Property(e => e.ForbiddenProjectTitle).HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProjectsForbiddenForUserId).HasColumnName("ProjectsForbiddenForUserID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectsForbiddenForUserLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectsForbiddenForUser_Lang_Languages");

                entity.HasOne(d => d.ProjectsForbiddenForUser)
                    .WithMany(p => p.CrmProjectsForbiddenForUserLang)
                    .HasForeignKey(d => d.ProjectsForbiddenForUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectsForbiddenForUser_Lang_CrmProjectsForbiddenForUser");
            });

            modelBuilder.Entity<CrmProjectsLang>(entity =>
            {
                entity.ToTable("CrmProjects_Lang");

                entity.Property(e => e.CrmProjectsLangId).HasColumnName("CrmProjectsLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrjDesc)
                    .HasColumnName("prjDesc")
                    .HasMaxLength(300);

                entity.Property(e => e.PrjPostFix)
                    .HasColumnName("prjPostFix")
                    .HasMaxLength(200);

                entity.Property(e => e.PrjTitle)
                    .IsRequired()
                    .HasColumnName("prjTitle")
                    .HasMaxLength(100);

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjects_Lang_Languages");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.CrmProjectsLang)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjects_Lang_CrmProjects");
            });

            modelBuilder.Entity<CrmProjectsTmp>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDateTime).HasColumnType("datetime");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrjCompanyId).HasColumnName("prjCompanyId");

                entity.Property(e => e.PrjDesc)
                    .HasColumnName("prjDesc")
                    .HasMaxLength(300);

                entity.Property(e => e.PrjFinishedDate)
                    .HasColumnName("prjFinishedDate")
                    .HasMaxLength(8);

                entity.Property(e => e.PrjFinishedDateTime)
                    .HasColumnName("prjFinishedDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrjFinishedDay)
                    .HasColumnName("prjFinishedDay")
                    .HasMaxLength(50);

                entity.Property(e => e.PrjFinishedStatusId).HasColumnName("prjFinishedStatusId");

                entity.Property(e => e.PrjFinishedTime)
                    .HasColumnName("prjFinishedTime")
                    .HasMaxLength(15);

                entity.Property(e => e.PrjFinishedUserId).HasColumnName("prjFinishedUserId");

                entity.Property(e => e.PrjFirstRegisterDate)
                    .IsRequired()
                    .HasColumnName("prjFirstRegisterDate")
                    .HasMaxLength(8);

                entity.Property(e => e.PrjFirstRegisterDateTime)
                    .HasColumnName("prjFirstRegisterDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrjFirstRegisterUserId).HasColumnName("prjFirstRegisterUserId");

                entity.Property(e => e.PrjFocmpCanSee).HasColumnName("prjFOCmpCanSee");

                entity.Property(e => e.PrjGradeId).HasColumnName("prjGradeId");

                entity.Property(e => e.PrjGroupId).HasColumnName("prjGroupId");

                entity.Property(e => e.PrjInsertForbidden).HasColumnName("prjInsertForbidden");

                entity.Property(e => e.PrjIsFinished).HasColumnName("prjIsFinished");

                entity.Property(e => e.PrjIsTicket).HasColumnName("prjIsTicket");

                entity.Property(e => e.PrjOrderView).HasColumnName("prjOrderView");

                entity.Property(e => e.PrjPostFix)
                    .HasColumnName("prjPostFix")
                    .HasMaxLength(200);

                entity.Property(e => e.PrjPriorityId).HasColumnName("prjPriorityId");

                entity.Property(e => e.PrjRemindDate)
                    .HasColumnName("prjRemindDate")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.PrjRemindDateTime)
                    .HasColumnName("prjRemindDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrjStartDate)
                    .HasColumnName("prjStartDate")
                    .HasMaxLength(8);

                entity.Property(e => e.PrjStartDateTime)
                    .HasColumnName("prjStartDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrjStartDay)
                    .HasColumnName("prjStartDay")
                    .HasMaxLength(20);

                entity.Property(e => e.PrjStartTime)
                    .HasColumnName("prjStartTime")
                    .HasMaxLength(15);

                entity.Property(e => e.PrjStarterUserId).HasColumnName("prjStarterUserId");

                entity.Property(e => e.PrjTitle)
                    .IsRequired()
                    .HasColumnName("prjTitle")
                    .HasMaxLength(100);

                entity.Property(e => e.PrjUserDepartmentId).HasColumnName("prjUserDepartmentId");

                entity.Property(e => e.PrjcnvsStatusGroupId).HasColumnName("prjcnvsStatusGroupId");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmProjectsTmpFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmProjectsTmp_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectsTmp)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmProjectsTmp_Languages");

                entity.HasOne(d => d.PrjCompany)
                    .WithMany(p => p.CrmProjectsTmp)
                    .HasForeignKey(d => d.PrjCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectsTmp_CrmCompanyTmp");

                entity.HasOne(d => d.PrjFinishedStatus)
                    .WithMany(p => p.CrmProjectsTmp)
                    .HasForeignKey(d => d.PrjFinishedStatusId)
                    .HasConstraintName("FK_CrmProjectsTmp_CrmConversationStatus");

                entity.HasOne(d => d.PrjFinishedUser)
                    .WithMany(p => p.CrmProjectsTmpPrjFinishedUser)
                    .HasForeignKey(d => d.PrjFinishedUserId)
                    .HasConstraintName("FK_CrmProjectsTmp_Users1");

                entity.HasOne(d => d.PrjFirstRegisterUser)
                    .WithMany(p => p.CrmProjectsTmpPrjFirstRegisterUser)
                    .HasForeignKey(d => d.PrjFirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectsTmp_Users2");

                entity.HasOne(d => d.PrjGrade)
                    .WithMany(p => p.CrmProjectsTmp)
                    .HasForeignKey(d => d.PrjGradeId)
                    .HasConstraintName("FK_CrmProjectsTmp_CrmProjectGrade");

                entity.HasOne(d => d.PrjGroup)
                    .WithMany(p => p.CrmProjectsTmp)
                    .HasForeignKey(d => d.PrjGroupId)
                    .HasConstraintName("FK_CrmProjectsTmp_CrmProjectGroups");

                entity.HasOne(d => d.PrjPriority)
                    .WithMany(p => p.CrmProjectsTmp)
                    .HasForeignKey(d => d.PrjPriorityId)
                    .HasConstraintName("FK_CrmProjectsTmp_CrmProjectPriority");

                entity.HasOne(d => d.PrjStarterUser)
                    .WithMany(p => p.CrmProjectsTmpPrjStarterUser)
                    .HasForeignKey(d => d.PrjStarterUserId)
                    .HasConstraintName("FK_CrmProjectsTmp_Users");

                entity.HasOne(d => d.PrjUserDepartment)
                    .WithMany(p => p.CrmProjectsTmp)
                    .HasForeignKey(d => d.PrjUserDepartmentId)
                    .HasConstraintName("FK_CrmProjectsTmp_UserDepartments");

                entity.HasOne(d => d.PrjcnvsStatusGroup)
                    .WithMany(p => p.CrmProjectsTmp)
                    .HasForeignKey(d => d.PrjcnvsStatusGroupId)
                    .HasConstraintName("FK_CrmProjectsTmp_CrmConversationStatusGroups");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmProjectsTmpUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectsTmp_Users3");
            });

            modelBuilder.Entity<CrmProjectsTmpLang>(entity =>
            {
                entity.HasKey(e => e.CrmProjectsLangId);

                entity.ToTable("CrmProjectsTmp_Lang");

                entity.Property(e => e.CrmProjectsLangId).HasColumnName("CrmProjectsLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrjDesc)
                    .HasColumnName("prjDesc")
                    .HasMaxLength(300);

                entity.Property(e => e.PrjPostFix)
                    .HasColumnName("prjPostFix")
                    .HasMaxLength(200);

                entity.Property(e => e.PrjTitle)
                    .IsRequired()
                    .HasColumnName("prjTitle")
                    .HasMaxLength(100);

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmProjectsTmpLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectsTmp_Lang_Languages");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.CrmProjectsTmpLang)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmProjectsTmp_Lang_CrmProjectsTmp");
            });

            modelBuilder.Entity<CrmShowTableFieldInFo>(entity =>
            {
                entity.ToTable("CrmShowTableFieldInFO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FieldName).HasMaxLength(500);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.TableName).HasMaxLength(300);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmShowTableFieldInFoFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmShowTableFieldInFO_Users");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmShowTableFieldInFo)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmShowTableFieldInFO_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmShowTableFieldInFoUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmShowTableFieldInFO_Users1");
            });

            modelBuilder.Entity<CrmSystemParts>(entity =>
            {
                entity.HasKey(e => e.SystemPartId);

                entity.Property(e => e.SystemPartId).ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Part)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PartTitle)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmSystemPartsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmSystemParts_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmSystemParts)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmSystemParts_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmSystemPartsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmSystemParts_Users");
            });

            modelBuilder.Entity<CrmSystemPartsLang>(entity =>
            {
                entity.HasKey(e => e.CrmSystemPartLangId);

                entity.ToTable("CrmSystemParts_Lang");

                entity.Property(e => e.CrmSystemPartLangId).HasColumnName("CrmSystemPartLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PartTitle)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmSystemPartsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmSystemParts_Lang_Languages");

                entity.HasOne(d => d.SystemPart)
                    .WithMany(p => p.CrmSystemPartsLang)
                    .HasForeignKey(d => d.SystemPartId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmSystemParts_Lang_CrmSystemParts");
            });

            modelBuilder.Entity<CrmTelegBotChatMessage>(entity =>
            {
                entity.HasKey(e => e.TelegBotChatMessageId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DownloadFilePath).HasMaxLength(4000);

                entity.Property(e => e.EditDate).HasColumnType("datetime");

                entity.Property(e => e.ErrorMessage).HasMaxLength(4000);

                entity.Property(e => e.FileExensions).HasMaxLength(50);

                entity.Property(e => e.FileId).HasMaxLength(500);

                entity.Property(e => e.FilePath).HasMaxLength(4000);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Latitude).HasMaxLength(100);

                entity.Property(e => e.Logitude).HasMaxLength(100);

                entity.Property(e => e.MessageLanguageCode).HasMaxLength(50);

                entity.Property(e => e.ReadDateTime).HasColumnType("datetime");

                entity.Property(e => e.SendDateTime).HasColumnType("datetime");

                entity.Property(e => e.SentDateTime).HasColumnType("datetime");

                entity.Property(e => e.TextCaption).HasMaxLength(4000);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmTelegBotChatMessage)
                    .HasForeignKey(d => d.CrmUserId)
                    .HasConstraintName("FK_CrmTelegBotChatMessage_Users");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmTelegBotChatMessage)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmTelegBotChatMessage_Languages");

                entity.HasOne(d => d.MessageType)
                    .WithMany(p => p.CrmTelegBotChatMessage)
                    .HasForeignKey(d => d.MessageTypeId)
                    .HasConstraintName("FK_CrmTelegBotChatMessage_CrmTelegBotMessageType");
            });

            modelBuilder.Entity<CrmTelegBotContacts>(entity =>
            {
                entity.HasKey(e => e.TelegBotContactId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName).HasMaxLength(500);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LastName).HasMaxLength(500);

                entity.Property(e => e.PhoneNumber).HasMaxLength(50);

                entity.Property(e => e.Picture).HasColumnType("image");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian).HasMaxLength(8);

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(500);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CrmTelegBotContacts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_CrmTelegBotContacts_CrmCompany");

                entity.HasOne(d => d.CompanyPerson)
                    .WithMany(p => p.CrmTelegBotContacts)
                    .HasForeignKey(d => d.CompanyPersonId)
                    .HasConstraintName("FK_CrmTelegBotContacts_CrmCompanyPersons");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmTelegBotContactsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmTelegBotContacts_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmTelegBotContacts)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmTelegBotContacts_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmTelegBotContactsUser)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_CrmTelegBotContacts_Users");
            });

            modelBuilder.Entity<CrmTelegBotMessageType>(entity =>
            {
                entity.HasKey(e => e.TelegBotMessageTypeId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.MessageType)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmTelegBotMessageType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmTelegBotMessageType_Languages");
            });

            modelBuilder.Entity<CrmTelegBotSetting>(entity =>
            {
                entity.HasKey(e => e.TelegBotSettingId);

                entity.Property(e => e.About).HasMaxLength(1000);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Caption).HasMaxLength(500);

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageCollation).HasMaxLength(50);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Picture).HasColumnType("image");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian).HasMaxLength(8);

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.UserName).HasMaxLength(500);

                entity.Property(e => e.WelcomeMessage).HasMaxLength(4000);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmTelegBotSettingFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmTelegBotSetting_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmTelegBotSetting)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmTelegBotSetting_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmTelegBotSettingUser)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_CrmTelegBotSetting_Users");
            });

            modelBuilder.Entity<CrmTelegChatMessage>(entity =>
            {
                entity.HasKey(e => e.TelegChatMessageId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DownloadFilePath).HasMaxLength(4000);

                entity.Property(e => e.EditDate).HasColumnType("datetime");

                entity.Property(e => e.ErrorMessage).HasMaxLength(4000);

                entity.Property(e => e.FileExensions).HasMaxLength(50);

                entity.Property(e => e.FileId).HasMaxLength(500);

                entity.Property(e => e.FilePath).HasMaxLength(4000);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Latitude).HasMaxLength(100);

                entity.Property(e => e.Logitude).HasMaxLength(100);

                entity.Property(e => e.MessageLanguageCode).HasMaxLength(50);

                entity.Property(e => e.ReadDateTime).HasColumnType("datetime");

                entity.Property(e => e.SendDateTime).HasColumnType("datetime");

                entity.Property(e => e.SentDateTime).HasColumnType("datetime");

                entity.Property(e => e.TextCaption).HasMaxLength(4000);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.CrmTelegChatMessage)
                    .HasForeignKey(d => d.CrmUserId)
                    .HasConstraintName("FK_CrmTelegChatMessage_Users");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmTelegChatMessage)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmTelegChatMessage_Languages");

                entity.HasOne(d => d.MessageType)
                    .WithMany(p => p.CrmTelegChatMessage)
                    .HasForeignKey(d => d.MessageTypeId)
                    .HasConstraintName("FK_CrmTelegChatMessage_CrmTelegMessageType");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.CrmTelegChatMessage)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("FK_CrmTelegChatMessage_CrmTelegSetting");
            });

            modelBuilder.Entity<CrmTelegContacts>(entity =>
            {
                entity.HasKey(e => e.TelegContactId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName).HasMaxLength(500);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LastMessageDate).HasColumnType("datetime");

                entity.Property(e => e.LastName).HasMaxLength(500);

                entity.Property(e => e.PhoneNumber).HasMaxLength(50);

                entity.Property(e => e.Picture).HasColumnType("image");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian).HasMaxLength(8);

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(500);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CrmTelegContacts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_CrmTelegContacts_CrmCompany");

                entity.HasOne(d => d.CompanyPerson)
                    .WithMany(p => p.CrmTelegContacts)
                    .HasForeignKey(d => d.CompanyPersonId)
                    .HasConstraintName("FK_CrmTelegContacts_CrmCompanyPersons");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmTelegContactsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmTelegContacts_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmTelegContacts)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmTelegContacts_Languages");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.CrmTelegContacts)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("FK_CrmTelegContacts_CrmTelegSetting");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmTelegContactsUser)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_CrmTelegContacts_Users");
            });

            modelBuilder.Entity<CrmTelegMessageType>(entity =>
            {
                entity.HasKey(e => e.TelegMessageTypeId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.MessageType)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmTelegMessageType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmTelegMessageType_Languages");
            });

            modelBuilder.Entity<CrmTelegSetting>(entity =>
            {
                entity.HasKey(e => e.TelegSettingId);

                entity.Property(e => e.AppApiHash)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.AppTitle)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProfilePicture).HasColumnType("image");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmTelegSettingFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmTelegSetting_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmTelegSetting)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmTelegSetting_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmTelegSettingUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmTelegSetting_Users");
            });

            modelBuilder.Entity<CrmTempEmails>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Body).HasMaxLength(2000);

                entity.Property(e => e.BodyLangType).HasMaxLength(50);

                entity.Property(e => e.CmpName)
                    .HasColumnName("cmpName")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpTitle)
                    .HasColumnName("cmpTitle")
                    .HasMaxLength(100);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.EmailPartI)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmailPartIi)
                    .IsRequired()
                    .HasColumnName("EmailPartII")
                    .HasMaxLength(50);

                entity.Property(e => e.EmailPartIii)
                    .IsRequired()
                    .HasColumnName("EmailPartIII")
                    .HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Mobile).HasMaxLength(20);

                entity.Property(e => e.PersonName).HasMaxLength(500);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PrsFname)
                    .HasColumnName("PrsFName")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsJob).HasMaxLength(100);

                entity.Property(e => e.PrsLname)
                    .HasColumnName("PrsLName")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsRegisterUserId).HasColumnName("prsRegisterUserId");

                entity.Property(e => e.PrsTitle).HasMaxLength(100);

                entity.Property(e => e.Selector)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Subject).HasMaxLength(200);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmTempEmailsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmTempEmails_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmTempEmails)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmTempEmails_Languages");

                entity.HasOne(d => d.PrsRegisterUser)
                    .WithMany(p => p.CrmTempEmailsPrsRegisterUser)
                    .HasForeignKey(d => d.PrsRegisterUserId)
                    .HasConstraintName("FK_CrmTempEmails_Users1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmTempEmailsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmTempEmails_Users");
            });

            modelBuilder.Entity<CrmTimeAttendance>(entity =>
            {
                entity.HasKey(e => e.TimeAttendanceId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.TmDate)
                    .HasColumnName("tmDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TmDatePersian)
                    .IsRequired()
                    .HasColumnName("tmDatePersian")
                    .HasMaxLength(8);

                entity.Property(e => e.TmDay).HasColumnName("tmDay");

                entity.Property(e => e.TmDayOfWeek).HasColumnName("tmDayOfWeek");

                entity.Property(e => e.TmDescription)
                    .HasColumnName("tmDescription")
                    .HasMaxLength(300);

                entity.Property(e => e.TmEntryBase)
                    .HasColumnName("tmEntryBase")
                    .HasColumnType("datetime");

                entity.Property(e => e.TmEntryDelay).HasColumnName("tmEntryDelay");

                entity.Property(e => e.TmEntryDelayAllowMin).HasColumnName("tmEntryDelayAllowMin");

                entity.Property(e => e.TmEntryRegisterIp)
                    .HasColumnName("tmEntryRegisterIP")
                    .HasMaxLength(50);

                entity.Property(e => e.TmEntryTime)
                    .HasColumnName("tmEntryTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.TmExitBase)
                    .HasColumnName("tmExitBase")
                    .HasColumnType("datetime");

                entity.Property(e => e.TmExitHurry).HasColumnName("tmExitHurry");

                entity.Property(e => e.TmExitHurryAllowMin).HasColumnName("tmExitHurryAllowMin");

                entity.Property(e => e.TmExitRegisterIp)
                    .HasColumnName("tmExitRegisterIP")
                    .HasMaxLength(50);

                entity.Property(e => e.TmExitTime)
                    .HasColumnName("tmExitTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.TmTypeId).HasColumnName("tmTypeId");

                entity.Property(e => e.TmUserId).HasColumnName("tmUserId");

                entity.Property(e => e.TmYear1).HasColumnName("tmYear1");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmTimeAttendanceFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmTimeAttendance_Users2");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmTimeAttendance)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmTimeAttendance_Languages");

                entity.HasOne(d => d.TmUser)
                    .WithMany(p => p.CrmTimeAttendanceTmUser)
                    .HasForeignKey(d => d.TmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmTimeAttendance_Users1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmTimeAttendanceUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmTimeAttendance_Users");
            });

            modelBuilder.Entity<CrmTimeAttendanceBase>(entity =>
            {
                entity.HasKey(e => e.TimeAttendanceBaseId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.TmbDay).HasColumnName("tmbDay");

                entity.Property(e => e.TmbEntryAllowMin).HasColumnName("tmbEntryAllowMin");

                entity.Property(e => e.TmbEntryBase)
                    .IsRequired()
                    .HasColumnName("tmbEntryBase")
                    .HasMaxLength(50);

                entity.Property(e => e.TmbExitAllowMin).HasColumnName("tmbExitAllowMin");

                entity.Property(e => e.TmbExitBase)
                    .IsRequired()
                    .HasColumnName("tmbExitBase")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmTimeAttendanceBaseFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmTimeAttendanceBase_Users");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmTimeAttendanceBase)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmTimeAttendanceBase_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmTimeAttendanceBaseUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmTimeAttendanceBase_Users1");
            });

            modelBuilder.Entity<CrmTimeAttendanceLog>(entity =>
            {
                entity.HasKey(e => e.TimeAttendanceLogId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.TmlDate)
                    .HasColumnName("tmlDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TmlDatePersian)
                    .IsRequired()
                    .HasColumnName("tmlDatePersian")
                    .HasMaxLength(8);

                entity.Property(e => e.TmlDay).HasColumnName("tmlDay");

                entity.Property(e => e.TmlDayOfWeek).HasColumnName("tmlDayOfWeek");

                entity.Property(e => e.TmlDescription)
                    .HasColumnName("tmlDescription")
                    .HasMaxLength(300);

                entity.Property(e => e.TmlEntryRegisterIp)
                    .HasColumnName("tmlEntryRegisterIP")
                    .HasMaxLength(50);

                entity.Property(e => e.TmlEntryTime)
                    .HasColumnName("tmlEntryTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.TmlExitRegisterIp)
                    .HasColumnName("tmlExitRegisterIP")
                    .HasMaxLength(50);

                entity.Property(e => e.TmlExitTime)
                    .HasColumnName("tmlExitTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.TmlTypeId).HasColumnName("tmlTypeId");

                entity.Property(e => e.TmlUserId).HasColumnName("tmlUserId");

                entity.Property(e => e.TmlYear1).HasColumnName("tmlYear1");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmTimeAttendanceLogFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmTimeAttendanceLog_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmTimeAttendanceLog)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmTimeAttendanceLog_Languages");

                entity.HasOne(d => d.TmlUser)
                    .WithMany(p => p.CrmTimeAttendanceLogTmlUser)
                    .HasForeignKey(d => d.TmlUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmTimeAttendanceLog_Users");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmTimeAttendanceLogUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmTimeAttendanceLog_Users2");
            });

            modelBuilder.Entity<CrmUserNotes>(entity =>
            {
                entity.HasKey(e => e.NoteId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Note).HasMaxLength(1000);

                entity.Property(e => e.Note1).HasMaxLength(1000);

                entity.Property(e => e.Note2).HasMaxLength(1000);

                entity.Property(e => e.Note3).HasMaxLength(1000);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmUserNotesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmUserNotes_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmUserNotes)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmUserNotes_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmUserNotesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmUserNotes_Users");
            });

            modelBuilder.Entity<CrmUserTaskGroups>(entity =>
            {
                entity.HasKey(e => e.UserTaskGroupId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.UserTaskGroup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmUserTaskGroupsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmUserTaskGroups_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmUserTaskGroups)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmUserTaskGroups_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmUserTaskGroupsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmUserTaskGroups_Users");
            });

            modelBuilder.Entity<CrmUserTaskGroupsLang>(entity =>
            {
                entity.ToTable("CrmUserTaskGroups_Lang");

                entity.Property(e => e.CrmUserTaskGroupsLangId).HasColumnName("CrmUserTaskGroupsLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.UserTaskGroup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmUserTaskGroupsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmUserTaskGroups_Lang_Languages");

                entity.HasOne(d => d.UserTaskGroupNavigation)
                    .WithMany(p => p.CrmUserTaskGroupsLang)
                    .HasForeignKey(d => d.UserTaskGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmUserTaskGroups_Lang_CrmUserTaskGroups");
            });

            modelBuilder.Entity<CrmUserTaskPriorities>(entity =>
            {
                entity.HasKey(e => e.UserTaskPriorityId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Color).HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Priority)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PriorityDesc).HasMaxLength(50);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmUserTaskPrioritiesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmUserTaskPriorities_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmUserTaskPriorities)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmUserTaskPriorities_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmUserTaskPrioritiesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmUserTaskPriorities_Users");
            });

            modelBuilder.Entity<CrmUserTaskPrioritiesLang>(entity =>
            {
                entity.ToTable("CrmUserTaskPriorities_Lang");

                entity.Property(e => e.CrmUserTaskPrioritiesLangId).HasColumnName("CrmUserTaskPrioritiesLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Priority)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PriorityDesc).HasMaxLength(50);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmUserTaskPrioritiesLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmUserTaskPriorities_Lang_Languages");

                entity.HasOne(d => d.UserTaskPriority)
                    .WithMany(p => p.CrmUserTaskPrioritiesLang)
                    .HasForeignKey(d => d.UserTaskPriorityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmUserTaskPriorities_Lang_CrmUserTaskPriorities");
            });

            modelBuilder.Entity<CrmUserTasks>(entity =>
            {
                entity.HasKey(e => e.UserTaskId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.UserTaskDate).HasColumnType("datetime");

                entity.Property(e => e.UserTaskDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.UserTaskDescription).HasMaxLength(2000);

                entity.Property(e => e.UserTaskRemindDate).HasMaxLength(8);

                entity.Property(e => e.UserTaskRemindDateTime).HasColumnType("datetime");

                entity.Property(e => e.UserTaskRemindTime).HasMaxLength(12);

                entity.Property(e => e.UserTaskTime).HasMaxLength(12);

                entity.Property(e => e.UserTaskTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmUserTasksFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmUserTasks_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmUserTasks)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmUserTasks_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmUserTasksUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmUserTasks_Users");

                entity.HasOne(d => d.UserTaskGroup)
                    .WithMany(p => p.CrmUserTasks)
                    .HasForeignKey(d => d.UserTaskGroupId)
                    .HasConstraintName("FK_CrmUserTasks_CrmUserTaskGroups");

                entity.HasOne(d => d.UserTaskPriority)
                    .WithMany(p => p.CrmUserTasks)
                    .HasForeignKey(d => d.UserTaskPriorityId)
                    .HasConstraintName("FK_CrmUserTasks_CrmUserTaskPriorities");
            });

            modelBuilder.Entity<CrmUserTasksLang>(entity =>
            {
                entity.ToTable("CrmUserTasks_Lang");

                entity.Property(e => e.CrmUserTasksLangId).HasColumnName("CrmUserTasksLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.UserTaskDescription).HasMaxLength(2000);

                entity.Property(e => e.UserTaskTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmUserTasksLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmUserTasks_Lang_Languages");

                entity.HasOne(d => d.UserTask)
                    .WithMany(p => p.CrmUserTasksLang)
                    .HasForeignKey(d => d.UserTaskId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmUserTasks_Lang_CrmUserTasks");
            });

            modelBuilder.Entity<CrmVersionUpgrade>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.GuId)
                    .HasColumnName("guId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ReleaseDate).HasColumnType("datetime");

                entity.Property(e => e.ReleaseDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Upgraded).HasDefaultValueSql("(0)");

                entity.Property(e => e.UpgradedDate).HasColumnType("datetime");

                entity.Property(e => e.UpgradedDatePersian).HasMaxLength(8);

                entity.Property(e => e.UpgradedUserId).HasColumnName("UpgradedUserID");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmVersionUpgrade)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmVersionUpgrade_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmVersionUpgrade)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmVersionUpgrade_Languages");
            });

            modelBuilder.Entity<CrmVersionUpgradeDetails>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ActionValue).HasMaxLength(4000);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RunDate).HasColumnType("datetime");

                entity.Property(e => e.RunDatePersian).HasMaxLength(8);

                entity.Property(e => e.Succeed)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Version).HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmVersionUpgradeDetails)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmVersionUpgradeDetails_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmVersionUpgradeDetails)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmVersionUpgradeDetails_Languages");
            });

            modelBuilder.Entity<CrmVersions>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ReleaseDate).HasColumnType("datetime");

                entity.Property(e => e.ReleaseDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmVersions)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmVersions_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmVersions)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmVersions_Languages");
            });

            modelBuilder.Entity<CrmWebSetting>(entity =>
            {
                entity.HasKey(e => e.WebSettingId);

                entity.Property(e => e.WebSettingId)
                    .HasColumnName("WebSettingID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Key)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.KeyFa).HasMaxLength(200);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.RregularExpression).HasMaxLength(500);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment(@" numeric
 text
 date
 textarea
 boolean
 password");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnType("text");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmWebSettingFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmWebSetting_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmWebSetting)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmWebSetting_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmWebSettingUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmWebSetting_Users");
            });

            modelBuilder.Entity<CrmsysCideviceType>(entity =>
            {
                entity.HasKey(e => e.CideviceTypeId);

                entity.ToTable("CrmsysCIDeviceType");

                entity.Property(e => e.CideviceTypeId)
                    .HasColumnName("CIDeviceTypeId")
                    .ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cidesc)
                    .HasColumnName("CIDesc")
                    .HasMaxLength(500);

                entity.Property(e => e.CideviceType)
                    .IsRequired()
                    .HasColumnName("CIDeviceType")
                    .HasMaxLength(100);

                entity.Property(e => e.CideviceTypeMode).HasColumnName("CIDeviceTypeMode");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmsysCideviceType)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmsysCIDeviceType_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmsysCideviceType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmsysCIDeviceType_Languages");
            });

            modelBuilder.Entity<CrmsysCipopUpSetting>(entity =>
            {
                entity.HasKey(e => e.CipopUpSettingId);

                entity.ToTable("CrmsysCIPopUpSetting");

                entity.Property(e => e.CipopUpSettingId).HasColumnName("CIPopUpSettingID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PatternForCallTime).HasMaxLength(500);

                entity.Property(e => e.PatternForLastProject).HasMaxLength(500);

                entity.Property(e => e.PatternForLastcnvsRefUser).HasMaxLength(500);

                entity.Property(e => e.PatternForLastcnvsStatus).HasMaxLength(500);

                entity.Property(e => e.PatternForLastcnvscmpPerson).HasMaxLength(500);

                entity.Property(e => e.PatternForLineNumber).HasMaxLength(500);

                entity.Property(e => e.PatternForPhoneName).HasMaxLength(500);

                entity.Property(e => e.PatternForPhoneNumber).HasMaxLength(500);

                entity.Property(e => e.PatternForcmpActivityType).HasMaxLength(500);

                entity.Property(e => e.PatternForcmpCity).HasMaxLength(500);

                entity.Property(e => e.PatternForcmpCiword)
                    .HasColumnName("PatternForcmpCIWord")
                    .HasMaxLength(500);

                entity.Property(e => e.PatternForcmpCompanyGroup).HasMaxLength(500);

                entity.Property(e => e.PatternForcmpCompanyGroupIi)
                    .HasColumnName("PatternForcmpCompanyGroupII")
                    .HasMaxLength(500);

                entity.Property(e => e.PatternForcmpCompanyGroupIii)
                    .HasColumnName("PatternForcmpCompanyGroupIII")
                    .HasMaxLength(500);

                entity.Property(e => e.PatternForcmpCompanyGroupIv)
                    .HasColumnName("PatternForcmpCompanyGroupIV")
                    .HasMaxLength(500);

                entity.Property(e => e.PatternForcmpCompanyType).HasMaxLength(500);

                entity.Property(e => e.PatternForcmpCountry).HasMaxLength(500);

                entity.Property(e => e.PatternForcmpName).HasMaxLength(500);

                entity.Property(e => e.PatternForcmpPresentation).HasMaxLength(500);

                entity.Property(e => e.PatternForcmpProvince).HasMaxLength(500);

                entity.Property(e => e.PatternForcmpPrsName).HasMaxLength(500);

                entity.Property(e => e.PatternForcmpReferUser).HasMaxLength(500);

                entity.Property(e => e.PatternForcmpSubGroupName).HasMaxLength(500);

                entity.Property(e => e.PatternFormulaPopUp).HasMaxLength(4000);

                entity.Property(e => e.PopUpWinFormIdeActive).HasColumnName("PopUpWinFormIDeActive");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SettingTitle)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmsysCipopUpSettingFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmsysCIPopUpSetting_Users");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmsysCipopUpSetting)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmsysCIPopUpSetting_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmsysCipopUpSettingUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmsysCIPopUpSetting_Users1");
            });

            modelBuilder.Entity<CrmsysCisetting>(entity =>
            {
                entity.ToTable("CrmsysCISetting");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CiserverIp)
                    .HasColumnName("CIServerIP")
                    .HasMaxLength(50);

                entity.Property(e => e.ComPort)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ComSetting)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Dbname)
                    .HasColumnName("DBName")
                    .HasMaxLength(50);

                entity.Property(e => e.DeviceName).HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Spass)
                    .HasColumnName("SPass")
                    .HasMaxLength(50);

                entity.Property(e => e.SrvName).HasMaxLength(50);

                entity.Property(e => e.Suser)
                    .HasColumnName("SUser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.DeviceType)
                    .WithMany(p => p.CrmsysCisetting)
                    .HasForeignKey(d => d.DeviceTypeId)
                    .HasConstraintName("FK_CrmsysCISetting_CrmsysCIDeviceType");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmsysCisetting)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmsysCISetting_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmsysCisetting)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmsysCISetting_Languages");
            });

            modelBuilder.Entity<CrmsysDbobjects>(entity =>
            {
                entity.HasKey(e => e.DbobjectId);

                entity.ToTable("CrmsysDBObjects");

                entity.Property(e => e.DbobjectId).HasColumnName("DBObjectId");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DbobjectName)
                    .IsRequired()
                    .HasColumnName("DBObjectName")
                    .HasMaxLength(50);

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FieldTitle).HasMaxLength(100);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmsysDbobjects)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmsysDBObjects_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmsysDbobjects)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmsysDBObjects_Languages");
            });

            modelBuilder.Entity<CrmsysDbobjectsLang>(entity =>
            {
                entity.ToTable("CrmsysDBObjects_Lang");

                entity.Property(e => e.CrmsysDbobjectsLangId).HasColumnName("CrmsysDBObjectsLangID");

                entity.Property(e => e.DbobjectId).HasColumnName("DBObjectId");

                entity.Property(e => e.FieldTitle).HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Dbobject)
                    .WithMany(p => p.CrmsysDbobjectsLang)
                    .HasForeignKey(d => d.DbobjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmsysDBObjects_Lang_CrmsysDBObjects");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmsysDbobjectsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmsysDBObjects_Lang_Languages");
            });

            modelBuilder.Entity<CrmsysDbtempInfo>(entity =>
            {
                entity.ToTable("CrmsysDBTempInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Txt).HasColumnName("TXT");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmsysDbtempInfoFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmsysDBTempInfo_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmsysDbtempInfo)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmsysDBTempInfo_Languages");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.CrmsysDbtempInfo)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("FK_CrmsysDBTempInfo_CrmsysDBTempInfoType");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmsysDbtempInfoUser)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_CrmsysDBTempInfo_Users");
            });

            modelBuilder.Entity<CrmsysDbtempInfoType>(entity =>
            {
                entity.HasKey(e => e.TypeId);

                entity.ToTable("CrmsysDBTempInfoType");

                entity.Property(e => e.TypeId).ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmsysDbtempInfoType)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmsysDBTempInfoType_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmsysDbtempInfoType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmsysDBTempInfoType_Languages");
            });

            modelBuilder.Entity<CrmsysFormActions>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ActionPersianName).HasMaxLength(200);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmsysFormActions)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmsysFormActions_Users20");

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.CrmsysFormActions)
                    .HasForeignKey(d => d.FormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmsysFormActions_CrmsysForms");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmsysFormActions)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmsysFormActions_Languages");
            });

            modelBuilder.Entity<CrmsysFormActionsLang>(entity =>
            {
                entity.HasKey(e => e.CrmsysFormActionsLangId);

                entity.ToTable("CrmsysFormActions_Lang");

                entity.Property(e => e.CrmsysFormActionsLangId).HasColumnName("CrmsysFormActionsLangID");

                entity.Property(e => e.ActionPersianName).HasMaxLength(200);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.CrmsysFormActionsLang)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmsysFormActions_Lang_CrmsysFormActions");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmsysFormActionsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmsysFormActions_Lang_Languages");
            });

            modelBuilder.Entity<CrmsysFormObjectProperties>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ObjectName).HasMaxLength(50);

                entity.Property(e => e.ObjectPersianName).HasMaxLength(100);

                entity.Property(e => e.ObjectType).HasMaxLength(50);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian).HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmsysFormObjectPropertiesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmsysFormObjectProperties_Users2");

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.CrmsysFormObjectProperties)
                    .HasForeignKey(d => d.FormId)
                    .HasConstraintName("FK_CrmsysFormObjectProperties_CrmsysForms");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmsysFormObjectProperties)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmsysFormObjectProperties_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmsysFormObjectPropertiesUser)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_CrmsysFormObjectProperties_Users");
            });

            modelBuilder.Entity<CrmsysFormObjectPropertiesLang>(entity =>
            {
                entity.HasKey(e => e.CrmsysFormObjectPropertiesLangId);

                entity.ToTable("CrmsysFormObjectProperties_Lang");

                entity.Property(e => e.CrmsysFormObjectPropertiesLangId).HasColumnName("CrmsysFormObjectPropertiesLangID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ObjectPersianName).HasMaxLength(100);

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.CrmsysFormObjectPropertiesLang)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmsysFormObjectProperties_Lang_CrmsysFormObjectProperties");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmsysFormObjectPropertiesLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmsysFormObjectProperties_Lang_Languages");
            });

            modelBuilder.Entity<CrmsysForms>(entity =>
            {
                entity.HasIndex(e => e.FormName)
                    .HasDatabaseName("IX_CrmsysForms")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FormName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FormPersianName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmsysForms)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmsysForms_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmsysForms)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmsysForms_Languages");
            });

            modelBuilder.Entity<CrmsysFormsLang>(entity =>
            {
                entity.HasKey(e => e.CrmsysFormsLangId);

                entity.ToTable("CrmsysForms_Lang");

                entity.Property(e => e.CrmsysFormsLangId).HasColumnName("CrmsysFormsLangID");

                entity.Property(e => e.FormPersianName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.CrmsysFormsLang)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmsysForms_Lang_CrmsysForms");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmsysFormsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmsysForms_Lang_Languages");
            });

            modelBuilder.Entity<CrmsysManageAlarmChanges>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.LastChangeTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<CrmsysManageInternalMessageChanges>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.LastChangeTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<CrmsysRollPermission>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmsysRollPermission)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmsysRollPermission_Users20");

                entity.HasOne(d => d.FormAction)
                    .WithMany(p => p.CrmsysRollPermission)
                    .HasForeignKey(d => d.FormActionId)
                    .HasConstraintName("FK_CrmsysRollPermission_CrmsysFormActions");

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.CrmsysRollPermission)
                    .HasForeignKey(d => d.FormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmsysRollPermission_CrmsysForms");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmsysRollPermission)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmsysRollPermission_Languages");

                entity.HasOne(d => d.Roll)
                    .WithMany(p => p.CrmsysRollPermission)
                    .HasForeignKey(d => d.RollId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmsysRollPermission_CrmsysRolls");
            });

            modelBuilder.Entity<CrmsysRolls>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LimitOrderDiscountPercent).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.LimitPreOrderDiscountPercent).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.RollName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmsysRolls)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmsysRolls_Users");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmsysRolls)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmsysRolls_Languages");
            });

            modelBuilder.Entity<CrmsysRollsLang>(entity =>
            {
                entity.HasKey(e => e.CrmsysRollsLangId);

                entity.ToTable("CrmsysRolls_Lang");

                entity.Property(e => e.CrmsysRollsLangId).HasColumnName("CrmsysRollsLangID");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RollName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.CrmsysRollsLang)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmsysRolls_Lang_CrmsysRolls");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmsysRollsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmsysRolls_Lang_Languages");
            });

            modelBuilder.Entity<CrmsysSetting>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.AppFilePath).HasMaxLength(300);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CallerIdoldVersion)
                    .HasColumnName("CallerIDOldVersion")
                    .HasMaxLength(50);

                entity.Property(e => e.CallerIdserverIp)
                    .HasColumnName("CallerIDServerIP")
                    .HasMaxLength(50);

                entity.Property(e => e.CallerIdversion)
                    .HasColumnName("CallerIDVersion")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpQdefCountryId).HasColumnName("cmpQDefCountryId");

                entity.Property(e => e.CmpQdefPrintAfterSave).HasColumnName("cmpQDefPrintAfterSave");

                entity.Property(e => e.CmpQdefProjectGroupId).HasColumnName("cmpQDefProjectGroupId");

                entity.Property(e => e.CmpQdefProjectTitle)
                    .HasColumnName("cmpQDefProjectTitle")
                    .HasMaxLength(100);

                entity.Property(e => e.CmpQdefcnvsTopicId).HasColumnName("cmpQDefcnvsTopicId");

                entity.Property(e => e.CmpQnotNullProjectGrade).HasColumnName("cmpQNotNullProjectGrade");

                entity.Property(e => e.CmpQnotNullProjectGroup).HasColumnName("cmpQNotNullProjectGroup");

                entity.Property(e => e.CmpQnotNullProjectPriority).HasColumnName("cmpQNotNullProjectPriority");

                entity.Property(e => e.CoLoGo).HasColumnType("image");

                entity.Property(e => e.CoName).HasMaxLength(200);

                entity.Property(e => e.DefaultLanguageId).HasColumnName("DefaultLanguageID");

                entity.Property(e => e.EconomicCode).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fourl)
                    .HasColumnName("FOUrl")
                    .HasMaxLength(500);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LinkAccOldVersion).HasMaxLength(50);

                entity.Property(e => e.LinkAccVersion).HasMaxLength(50);

                entity.Property(e => e.LockCounter).HasMaxLength(10);

                entity.Property(e => e.LockNu)
                    .HasColumnName("LockNU")
                    .HasMaxLength(10);

                entity.Property(e => e.LockSerial).HasMaxLength(50);

                entity.Property(e => e.NationalCode).HasMaxLength(50);

                entity.Property(e => e.PrdBarcodeFormula).HasMaxLength(4000);

                entity.Property(e => e.PublicNotice).HasMaxLength(500);

                entity.Property(e => e.QuickAddress).HasMaxLength(50);

                entity.Property(e => e.RecordingVoiceServerIp)
                    .HasColumnName("RecordingVoiceServerIP")
                    .HasMaxLength(300);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegistrationNumber).HasMaxLength(50);

                entity.Property(e => e.SantralPreNumber).HasMaxLength(20);

                entity.Property(e => e.ServerIp)
                    .HasColumnName("ServerIP")
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceAutoSmsip).HasColumnName("ServiceAutoSMSIP");

                entity.Property(e => e.ServiceBuyOrdIp).HasColumnName("ServiceBuyOrdIP");

                entity.Property(e => e.ServiceCiip).HasColumnName("ServiceCIIP");

                entity.Property(e => e.ServiceDecimalIp).HasColumnName("ServiceDecimalIP");

                entity.Property(e => e.ServiceEmailIp).HasColumnName("ServiceEmailIP");

                entity.Property(e => e.ServiceFadeAc).HasColumnName("ServiceFADeAc");

                entity.Property(e => e.ServiceLetterIp).HasColumnName("ServiceLetterIP");

                entity.Property(e => e.ServicePrip).HasColumnName("ServicePRIP");

                entity.Property(e => e.ServiceRip).HasColumnName("ServiceRIP");

                entity.Property(e => e.ServiceSgip).HasColumnName("ServiceSGIP");

                entity.Property(e => e.ServiceSip).HasColumnName("ServiceSIP");

                entity.Property(e => e.SmsgsmserviceOldVersion)
                    .HasColumnName("SMSGSMServiceOldVersion")
                    .HasMaxLength(50);

                entity.Property(e => e.SmsgsmserviceVersion)
                    .HasColumnName("SMSGSMServiceVersion")
                    .HasMaxLength(50);

                entity.Property(e => e.SmsserviceOldVersion)
                    .HasColumnName("SMSServiceOldVersion")
                    .HasMaxLength(50);

                entity.Property(e => e.SmsserviceVersion)
                    .HasColumnName("SMSServiceVersion")
                    .HasMaxLength(50);

                entity.Property(e => e.Telephone).HasMaxLength(50);

                entity.Property(e => e.WebSite).HasMaxLength(50);

                entity.Property(e => e.ZipCode).HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmsysSettingFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CrmsysSetting_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmsysSetting)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CrmsysSetting_Languages");

                entity.HasOne(d => d.LinkAccSystem)
                    .WithMany(p => p.CrmsysSetting)
                    .HasForeignKey(d => d.LinkAccSystemId)
                    .HasConstraintName("FK_CrmsysSetting_CrmLinkAccSystems");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmsysSettingUser)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_CrmsysSetting_Users");
            });

            modelBuilder.Entity<CrmsysSettingLang>(entity =>
            {
                entity.HasKey(e => e.CrmsysSettingLangId);

                entity.ToTable("CrmsysSetting_Lang");

                entity.Property(e => e.CrmsysSettingLangId).HasColumnName("CrmsysSettingLangID");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.CoName).HasMaxLength(200);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PublicNotice).HasMaxLength(500);

                entity.Property(e => e.QuickAddress).HasMaxLength(50);

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.CrmsysSettingLang)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmsysSetting_Lang_CrmsysSetting");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmsysSettingLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrmsysSetting_Lang_Languages");
            });

            modelBuilder.Entity<CrmtmpManageTellNumber>(entity =>
            {
                entity.ToTable("CRMtmpManageTellNumber");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CmpCityId).HasColumnName("cmpCityId");

                entity.Property(e => e.CmpFax)
                    .HasColumnName("cmpFax")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpFaxNew)
                    .HasColumnName("cmpFaxNew")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpId).HasColumnName("cmpId");

                entity.Property(e => e.CmpPreTel)
                    .HasColumnName("cmpPreTel")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpPreTelIi)
                    .HasColumnName("cmpPreTelII")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpPreTelIinew)
                    .HasColumnName("cmpPreTelIINew")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpPreTelNew)
                    .HasColumnName("cmpPreTelNew")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpTel)
                    .HasColumnName("cmpTel")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpTelIi)
                    .HasColumnName("cmpTelII")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpTelIinew)
                    .HasColumnName("cmpTelIINew")
                    .HasMaxLength(50);

                entity.Property(e => e.CmpTelNew)
                    .HasColumnName("cmpTelNew")
                    .HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Mode).HasColumnName("mode");

                entity.Property(e => e.PrsId).HasColumnName("prsId");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.CrmtmpManageTellNumberFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_CRMtmpManageTellNumber_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CrmtmpManageTellNumber)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_CRMtmpManageTellNumber_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CrmtmpManageTellNumberUser)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_CRMtmpManageTellNumber_Users");
            });

            modelBuilder.Entity<Education>(entity =>
            {
                entity.Property(e => e.EducationId).HasColumnName("EducationID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Education1)
                    .IsRequired()
                    .HasColumnName("Education")
                    .HasMaxLength(100);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.EducationFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_Education_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.Education)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_Education_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.EducationUser)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Education_Users");
            });

            modelBuilder.Entity<EducationLang>(entity =>
            {
                entity.ToTable("Education_Lang");

                entity.Property(e => e.EducationLangId).HasColumnName("EducationLangID");

                entity.Property(e => e.Education)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.EducationId).HasColumnName("EducationID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.EducationNavigation)
                    .WithMany(p => p.EducationLang)
                    .HasForeignKey(d => d.EducationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Education_Lang_Education");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.EducationLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Education_Lang_Languages");
            });

            modelBuilder.Entity<EmailDefaultBodyText>(entity =>
            {
                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Body)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(150);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.EmailDefaultBodyTextFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailDefaultBodyText_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.EmailDefaultBodyText)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailDefaultBodyText_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.EmailDefaultBodyTextUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailDefaultBodyText_Users");
            });

            modelBuilder.Entity<EmailDefaultBodyTextLang>(entity =>
            {
                entity.ToTable("EmailDefaultBodyText_Lang");

                entity.Property(e => e.EmailDefaultBodyTextLangId).HasColumnName("EmailDefaultBodyTextLangID");

                entity.Property(e => e.Body)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Title).HasMaxLength(150);

                entity.HasOne(d => d.EmailDefaultBodyText)
                    .WithMany(p => p.EmailDefaultBodyTextLang)
                    .HasForeignKey(d => d.EmailDefaultBodyTextId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailDefaultBodyText_Lang_EmailDefaultBodyText");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.EmailDefaultBodyTextLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailDefaultBodyText_Lang_Languages");
            });

            modelBuilder.Entity<EmailReceive>(entity =>
            {
                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Bcc).HasMaxLength(4000);

                entity.Property(e => e.Cc).HasMaxLength(4000);

                entity.Property(e => e.EmailDate).HasColumnType("datetime");

                entity.Property(e => e.EmailDatePersian).HasMaxLength(8);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FolderName).HasMaxLength(100);

                entity.Property(e => e.FromUserEmail).HasMaxLength(500);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.MessageId).HasMaxLength(2000);

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.ReadDate).HasColumnType("datetime");

                entity.Property(e => e.ReadDatePersian).HasMaxLength(8);

                entity.Property(e => e.ReceiveDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiveDatePersian).HasMaxLength(8);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Subject).HasMaxLength(1000);

                entity.Property(e => e.ToUserEmail).HasMaxLength(500);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.EmailReceive)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_EmailReceive_CrmCompany");

                entity.HasOne(d => d.CompanyPerson)
                    .WithMany(p => p.EmailReceive)
                    .HasForeignKey(d => d.CompanyPersonId)
                    .HasConstraintName("FK_EmailReceive_CrmCompanyPersons");

                entity.HasOne(d => d.EmailReceiveFolder)
                    .WithMany(p => p.EmailReceive)
                    .HasForeignKey(d => d.EmailReceiveFolderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailReceive_EmailReceiveFolders");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.EmailReceiveFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailReceive_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.EmailReceive)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailReceive_Languages");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.EmailReceive)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_EmailReceive_CrmProjects");

                entity.HasOne(d => d.ToUserEmailUserInfo)
                    .WithMany(p => p.EmailReceive)
                    .HasForeignKey(d => d.ToUserEmailUserInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailReceive_EmailUsersInfo");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.EmailReceiveUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailReceive_Users");
            });

            modelBuilder.Entity<EmailReceiveAttachments>(entity =>
            {
                entity.HasKey(e => e.EmailReceiveAttachmentId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ContentId).HasMaxLength(2000);

                entity.Property(e => e.FileName).HasMaxLength(500);

                entity.Property(e => e.FileType).HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SaveFilePath).HasMaxLength(2000);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.EmailReceiveAttachments)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_EmailReceiveAttachments_CrmCompany");

                entity.HasOne(d => d.CompanyPerson)
                    .WithMany(p => p.EmailReceiveAttachments)
                    .HasForeignKey(d => d.CompanyPersonId)
                    .HasConstraintName("FK_EmailReceiveAttachments_CrmCompanyPersons");

                entity.HasOne(d => d.EmailReceive)
                    .WithMany(p => p.EmailReceiveAttachments)
                    .HasForeignKey(d => d.EmailReceiveId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailReceiveAttachments_EmailReceive");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.EmailReceiveAttachmentsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailReceiveAttachments_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.EmailReceiveAttachments)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailReceiveAttachments_Languages");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.EmailReceiveAttachments)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_EmailReceiveAttachments_CrmProjects");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.EmailReceiveAttachmentsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailReceiveAttachments_Users");
            });

            modelBuilder.Entity<EmailReceiveFolders>(entity =>
            {
                entity.HasKey(e => e.EmailReceiveFolderId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FolderName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.EmailUsersInfo)
                    .WithMany(p => p.EmailReceiveFolders)
                    .HasForeignKey(d => d.EmailUsersInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailReceiveFolders_EmailUsersInfo");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.EmailReceiveFoldersFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailReceiveFolders_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.EmailReceiveFolders)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailReceiveFolders_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.EmailReceiveFoldersUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailReceiveFolders_Users");
            });

            modelBuilder.Entity<EmailSendAttachment>(entity =>
            {
                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FilePath)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.EmailSendHeader)
                    .WithMany(p => p.EmailSendAttachment)
                    .HasForeignKey(d => d.EmailSendHeaderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailSendAttachment_EmailSendHeader");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.EmailSendAttachment)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_EmailSendAttachment_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.EmailSendAttachment)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_EmailSendAttachment_Languages");
            });

            modelBuilder.Entity<EmailSendDetail>(entity =>
            {
                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.EmailCmpName).HasMaxLength(500);

                entity.Property(e => e.EmailCmpPrsName).HasMaxLength(500);

                entity.Property(e => e.EmailPrsJob).HasMaxLength(500);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SendDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SendDateTime).HasColumnType("datetime");

                entity.Property(e => e.SendedDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SendedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.EmailCmp)
                    .WithMany(p => p.EmailSendDetail)
                    .HasForeignKey(d => d.EmailCmpId)
                    .HasConstraintName("FK_EmailSendDetail_CrmCompany");

                entity.HasOne(d => d.EmailCmpPrj)
                    .WithMany(p => p.EmailSendDetail)
                    .HasForeignKey(d => d.EmailCmpPrjId)
                    .HasConstraintName("FK_EmailSendDetail_CrmProjects");

                entity.HasOne(d => d.EmailCmpPrs)
                    .WithMany(p => p.EmailSendDetail)
                    .HasForeignKey(d => d.EmailCmpPrsId)
                    .HasConstraintName("FK_EmailSendDetail_CrmCompanyPersons");

                entity.HasOne(d => d.EmailSendHeader)
                    .WithMany(p => p.EmailSendDetail)
                    .HasForeignKey(d => d.EmailSendHeaderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailSendDetail_EmailSendHeader");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.EmailSendDetail)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_EmailSendDetail_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.EmailSendDetail)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_EmailSendDetail_Languages");
            });

            modelBuilder.Entity<EmailSendHeader>(entity =>
            {
                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Body).HasColumnType("text");

                entity.Property(e => e.EndDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.EndDateTime).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.StartDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.StartDateTime).HasColumnType("datetime");

                entity.Property(e => e.Subject).HasMaxLength(500);

                entity.HasOne(d => d.EmailSetting)
                    .WithMany(p => p.EmailSendHeader)
                    .HasForeignKey(d => d.EmailSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailSendHeader_EmailSetting");

                entity.HasOne(d => d.EmailUsersInfo)
                    .WithMany(p => p.EmailSendHeader)
                    .HasForeignKey(d => d.EmailUsersInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailSendHeader_EmailUsersInfo");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.EmailSendHeaderFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_EmailSendHeader_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.EmailSendHeader)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_EmailSendHeader_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.EmailSendHeaderUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailSendHeader_Users");
            });

            modelBuilder.Entity<EmailSetting>(entity =>
            {
                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CmpPattern).HasMaxLength(50);

                entity.Property(e => e.CmpPrsJobPattern).HasMaxLength(50);

                entity.Property(e => e.CmpPrsPattern).HasMaxLength(50);

                entity.Property(e => e.EmailBulkingDailyEndTime)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EmailBulkingDailyStarTime)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EmailSenderEditorFilePath).HasMaxLength(1000);

                entity.Property(e => e.EmailSp)
                    .HasColumnName("EmailSP")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EmailSu)
                    .HasColumnName("EmailSU")
                    .HasMaxLength(50);

                entity.Property(e => e.EmailsAttachFilePath).HasMaxLength(500);

                entity.Property(e => e.EmailsAttachShareFilePath).HasMaxLength(500);

                entity.Property(e => e.EmailsAttachShareFilePathFtp).HasMaxLength(500);

                entity.Property(e => e.EmailsPdfbodyFilePath)
                    .HasColumnName("EmailsPDFBodyFilePath")
                    .HasMaxLength(500);

                entity.Property(e => e.EmailsPdfbodyFilePathFtp)
                    .HasColumnName("EmailsPDFBodyFilePathFtp")
                    .HasMaxLength(500);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.EmailSettingFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_EmailSetting_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.EmailSetting)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_EmailSetting_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.EmailSettingUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailSetting_Users");
            });

            modelBuilder.Entity<EmailUserDefaultSetting>(entity =>
            {
                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EudBody)
                    .HasColumnName("eudBody")
                    .HasMaxLength(2000);

                entity.Property(e => e.EudTitle)
                    .IsRequired()
                    .HasColumnName("eudTitle")
                    .HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.EmailUserDefaultSettingFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailUserDefaultSetting_Users");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.EmailUserDefaultSetting)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_EmailUserDefaultSetting_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.EmailUserDefaultSettingUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailUserDefaultSetting_Users1");
            });

            modelBuilder.Entity<EmailUserTempTank>(entity =>
            {
                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.EmailCmpName).HasMaxLength(500);

                entity.Property(e => e.EmailCmpPrsName).HasMaxLength(500);

                entity.Property(e => e.EmailPrsJob).HasMaxLength(500);

                entity.Property(e => e.FilePath).HasMaxLength(500);

                entity.Property(e => e.FilePathIi)
                    .HasColumnName("FilePathII")
                    .HasMaxLength(500);

                entity.Property(e => e.FilePathIii)
                    .HasColumnName("FilePathIII")
                    .HasMaxLength(500);

                entity.Property(e => e.FilePathIv)
                    .HasColumnName("FilePathIV")
                    .HasMaxLength(500);

                entity.Property(e => e.FilePathV).HasMaxLength(500);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.EmailCmp)
                    .WithMany(p => p.EmailUserTempTank)
                    .HasForeignKey(d => d.EmailCmpId)
                    .HasConstraintName("FK_EmailUserTempTank_CrmCompany");

                entity.HasOne(d => d.EmailCmpPrj)
                    .WithMany(p => p.EmailUserTempTank)
                    .HasForeignKey(d => d.EmailCmpPrjId)
                    .HasConstraintName("FK_EmailUserTempTank_CrmProjects");

                entity.HasOne(d => d.EmailCmpPrs)
                    .WithMany(p => p.EmailUserTempTank)
                    .HasForeignKey(d => d.EmailCmpPrsId)
                    .HasConstraintName("FK_EmailUserTempTank_CrmCompanyPersons");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.EmailUserTempTankFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_EmailUserTempTank_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.EmailUserTempTank)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_EmailUserTempTank_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.EmailUserTempTankUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailUserTempTank_Users");
            });

            modelBuilder.Entity<EmailUsersInfo>(entity =>
            {
                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EuAutoDeleteReceivedEmail).HasColumnName("euAutoDeleteReceivedEmail");

                entity.Property(e => e.EuIsActive)
                    .IsRequired()
                    .HasColumnName("euIsActive")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EuNikeEmail)
                    .IsRequired()
                    .HasColumnName("euNikeEmail")
                    .HasMaxLength(100);

                entity.Property(e => e.EuNikeName)
                    .IsRequired()
                    .HasColumnName("euNikeName")
                    .HasMaxLength(100);

                entity.Property(e => e.EuPassword)
                    .IsRequired()
                    .HasColumnName("euPassword")
                    .HasMaxLength(100);

                entity.Property(e => e.EuPop3port).HasColumnName("euPOP3Port");

                entity.Property(e => e.EuPop3server)
                    .IsRequired()
                    .HasColumnName("euPOP3Server")
                    .HasMaxLength(100);

                entity.Property(e => e.EuPop3useSsl).HasColumnName("euPOP3UseSsl");

                entity.Property(e => e.EuSmtpserver)
                    .IsRequired()
                    .HasColumnName("euSMTPServer")
                    .HasMaxLength(100);

                entity.Property(e => e.EuUserId).HasColumnName("euUserId");

                entity.Property(e => e.EuUserName)
                    .IsRequired()
                    .HasColumnName("euUserName")
                    .HasMaxLength(100);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.EuUser)
                    .WithMany(p => p.EmailUsersInfoEuUser)
                    .HasForeignKey(d => d.EuUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailUsersInfo_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.EmailUsersInfoFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailUsersInfo_Users2");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.EmailUsersInfo)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_EmailUsersInfo_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.EmailUsersInfoUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailUsersInfo_Users1");
            });

            modelBuilder.Entity<Languages>(entity =>
            {
                entity.HasKey(e => e.LanguageId);

                entity.Property(e => e.LanguageId)
                    .HasColumnName("LanguageID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageCollation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LanguageDirection)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.LanguagesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_Languages_Users1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.LanguagesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Languages_Users");
            });

            modelBuilder.Entity<MobApiAndTableDetail>(entity =>
            {
                entity.HasKey(e => e.ApiAndTableDetailId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.MobApiAndTableDetailFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_MobApiAndTableDetail_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.MobApiAndTableDetail)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_MobApiAndTableDetail_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MobApiAndTableDetailUser)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_MobApiAndTableDetail_Users");
            });

            modelBuilder.Entity<MobCompanyAppInfo>(entity =>
            {
                entity.Property(e => e.MobCompanyAppInfoId).HasColumnName("MobCompanyAppInfoID");

                entity.Property(e => e.AppName).HasMaxLength(200);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cmp)
                    .HasColumnName("cmp")
                    .HasMaxLength(300);

                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");

                entity.Property(e => e.CompanyPersonId).HasColumnName("CompanyPersonID");

                entity.Property(e => e.DownloadUrl)
                    .HasColumnName("DownloadURL")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ExtraCode)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ImeiCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LastVersion).HasMaxLength(50);

                entity.Property(e => e.NewVersionDownloadUrl).HasColumnName("NewVersionDownloadURL");

                entity.Property(e => e.RegisterCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.WcfUrl)
                    .HasColumnName("WcfURL")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.MobCompanyAppInfo)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobCompanyAppInfo_CrmCompany");

                entity.HasOne(d => d.CompanyPerson)
                    .WithMany(p => p.MobCompanyAppInfo)
                    .HasForeignKey(d => d.CompanyPersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobCompanyAppInfo_CrmCompanyPersons");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.MobCompanyAppInfoFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobCompanyAppInfo_Users");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.MobCompanyAppInfo)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobCompanyAppInfo_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MobCompanyAppInfoUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobCompanyAppInfo_Users1");
            });

            modelBuilder.Entity<MobErrorLogs>(entity =>
            {
                entity.HasKey(e => e.MobErrorLogId);

                entity.Property(e => e.ActivityName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ApiVersion)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ApplicationVersion)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Cause).IsRequired();

                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.CompanyPersonId).HasColumnName("CompanyPersonID");

                entity.Property(e => e.DeviceResolution)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.InternetType)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PersonName)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<MyWebsites>(entity =>
            {
                entity.HasIndex(e => e.Website)
                    .HasDatabaseName("IX_MyWebsites")
                    .IsUnique();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Website)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.MyWebsites)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_MyWebsites_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.MyWebsites)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_MyWebsites_Languages");
            });

            modelBuilder.Entity<PayRollItemTypes>(entity =>
            {
                entity.HasKey(e => e.PayRollItemTypeId);

                entity.Property(e => e.PayRollItemTypeId).ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ItemType)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.PayRollItemTypesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollItemTypes_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.PayRollItemTypes)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollItemTypes_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PayRollItemTypesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollItemTypes_Users");
            });

            modelBuilder.Entity<PayRollItemTypesLang>(entity =>
            {
                entity.HasKey(e => e.PayRollItemTypeLangId);

                entity.ToTable("PayRollItemTypes_Lang");

                entity.Property(e => e.PayRollItemTypeLangId).HasColumnName("PayRollItemTypeLangID");

                entity.Property(e => e.ItemType)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.PayRollItemTypesLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollItemTypes_Lang_Languages");

                entity.HasOne(d => d.PayRollItemType)
                    .WithMany(p => p.PayRollItemTypesLang)
                    .HasForeignKey(d => d.PayRollItemTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollItemTypes_Lang_PayRollItemTypes");
            });

            modelBuilder.Entity<PayRollItems>(entity =>
            {
                entity.HasKey(e => e.PayRollItemId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ItemDefaultValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ItemFormulaTag).HasMaxLength(100);

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.PayRollItemsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollItems_FirstRegisterUsers");

                entity.HasOne(d => d.ItemType)
                    .WithMany(p => p.PayRollItems)
                    .HasForeignKey(d => d.ItemTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollItems_PayRollItemTypes");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.PayRollItems)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollItems_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PayRollItemsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollItems_Users");
            });

            modelBuilder.Entity<PayRollItemsLang>(entity =>
            {
                entity.HasKey(e => e.PayRollItemLangId);

                entity.ToTable("PayRollItems_Lang");

                entity.Property(e => e.PayRollItemLangId).HasColumnName("PayRollItemLangID");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.PayRollItemsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollItems_Lang_Languages");

                entity.HasOne(d => d.PayRollItem)
                    .WithMany(p => p.PayRollItemsLang)
                    .HasForeignKey(d => d.PayRollItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollItems_Lang_PayRollItems");
            });

            modelBuilder.Entity<PayRollUserCycle>(entity =>
            {
                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CycleDate).HasColumnType("datetime");

                entity.Property(e => e.CycleDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CycleTitle)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.CycleVerifiedDate).HasColumnType("datetime");

                entity.Property(e => e.CycleVerifiedDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.PayRollUserCycleCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserCycle_CrmUsers");

                entity.HasOne(d => d.CyclePrintFormat)
                    .WithMany(p => p.PayRollUserCycle)
                    .HasForeignKey(d => d.CyclePrintFormatId)
                    .HasConstraintName("FK_PayRollUserCycle_PrintFormat");

                entity.HasOne(d => d.CycleVerifierUser)
                    .WithMany(p => p.PayRollUserCycleCycleVerifierUser)
                    .HasForeignKey(d => d.CycleVerifierUserId)
                    .HasConstraintName("FK_PayRollUserCycle_CycleVerifierUsers");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.PayRollUserCycleFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserCycle_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.PayRollUserCycle)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserCycle_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PayRollUserCycleUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserCycle_Users");
            });

            modelBuilder.Entity<PayRollUserCycleItemValues>(entity =>
            {
                entity.HasKey(e => e.PayRollUserCycleItemValueId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.UsefulIds).HasMaxLength(2000);

                entity.Property(e => e.Value).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.PayRollUserCycleItemValuesCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserCycleItemValues_CrmUsers");

                entity.HasOne(d => d.Cycle)
                    .WithMany(p => p.PayRollUserCycleItemValues)
                    .HasForeignKey(d => d.CycleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserCycleItemValues_PayRollUserCycle");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.PayRollUserCycleItemValuesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserCycleItemValues_FirstRegisterUsers");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.PayRollUserCycleItemValues)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserCycleItemValues_PayRollItems");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.PayRollUserCycleItemValues)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserCycleItemValues_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PayRollUserCycleItemValuesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserCycleItemValues_Users");
            });

            modelBuilder.Entity<PayRollUserCycleLang>(entity =>
            {
                entity.ToTable("PayRollUserCycle_Lang");

                entity.Property(e => e.PayRollUserCycleLangId).HasColumnName("PayRollUserCycleLangID");

                entity.Property(e => e.CycleTitle)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.PayRollUserCycleLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserCycle_Lang_Languages");

                entity.HasOne(d => d.PayRollUserCycle)
                    .WithMany(p => p.PayRollUserCycleLang)
                    .HasForeignKey(d => d.PayRollUserCycleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserCycle_Lang_PayRollUserCycle");
            });

            modelBuilder.Entity<PayRollUserDefaultItems>(entity =>
            {
                entity.HasKey(e => e.PayRollUserDefaultItemId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.PayRollUserDefaultItemsCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserDefaultItems_CrmUsers");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.PayRollUserDefaultItemsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserDefaultItems_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.PayRollUserDefaultItems)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserDefaultItems_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PayRollUserDefaultItemsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserDefaultItems_Users");

                entity.HasOne(d => d.UserItem)
                    .WithMany(p => p.PayRollUserDefaultItems)
                    .HasForeignKey(d => d.UserItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserDefaultItems_PayRollItems");
            });

            modelBuilder.Entity<PayRollUserPaymentTypes>(entity =>
            {
                entity.HasKey(e => e.PayRollUserPaymentTypeId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.PayRollUserPaymentTypesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserPaymentTypes_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.PayRollUserPaymentTypes)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserPaymentTypes_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PayRollUserPaymentTypesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserPaymentTypes_Users");
            });

            modelBuilder.Entity<PayRollUserPaymentTypesLang>(entity =>
            {
                entity.HasKey(e => e.PayRollUserPaymentTypeLangId);

                entity.ToTable("PayRollUserPaymentTypes_Lang");

                entity.Property(e => e.PayRollUserPaymentTypeLangId).HasColumnName("PayRollUserPaymentTypeLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.PayRollUserPaymentTypesLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserPaymentTypes_Lang_Languages");

                entity.HasOne(d => d.PayRollUserPaymentType)
                    .WithMany(p => p.PayRollUserPaymentTypesLang)
                    .HasForeignKey(d => d.PayRollUserPaymentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserPaymentTypes_Lang_PayRollUserPaymentTypes");
            });

            modelBuilder.Entity<PayRollUserPayments>(entity =>
            {
                entity.HasKey(e => e.PayRollUserPaymentId);

                entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentNumber).HasMaxLength(300);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.UserAccountNumber).HasMaxLength(300);

                entity.HasOne(d => d.Cycle)
                    .WithMany(p => p.PayRollUserPayments)
                    .HasForeignKey(d => d.CycleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserPayments_PayRollUserCycle");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.PayRollUserPaymentsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserPayments_FirstRegisterUsers");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.PayRollUserPayments)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserPayments_Languages");

                entity.HasOne(d => d.PayType)
                    .WithMany(p => p.PayRollUserPayments)
                    .HasForeignKey(d => d.PayTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserPayments_PayRollUserPaymentTypes");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PayRollUserPaymentsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserPayments_Users");
            });

            modelBuilder.Entity<PayRollUserPaymentsLang>(entity =>
            {
                entity.HasKey(e => e.PayRollUserPaymentLangId);

                entity.ToTable("PayRollUserPayments_Lang");

                entity.Property(e => e.PayRollUserPaymentLangId).HasColumnName("PayRollUserPaymentLangID");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.PayRollUserPaymentsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserPayments_Lang_Languages");

                entity.HasOne(d => d.PayRollUserPayment)
                    .WithMany(p => p.PayRollUserPaymentsLang)
                    .HasForeignKey(d => d.PayRollUserPaymentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayRollUserPayments_Lang_PayRollUserPayments");
            });

            modelBuilder.Entity<PrintFormat>(entity =>
            {
                entity.Property(e => e.PrintFormatId).HasColumnName("PrintFormatID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FileNameWeb)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.PrintFormatFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_PrintFormat_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.PrintFormat)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_PrintFormat_Languages");

                entity.HasOne(d => d.PrintFormatType)
                    .WithMany(p => p.PrintFormat)
                    .HasForeignKey(d => d.PrintFormatTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrintFormat_PrintFormatType");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PrintFormatUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrintFormat_Users");
            });

            modelBuilder.Entity<PrintFormatLang>(entity =>
            {
                entity.ToTable("PrintFormat_Lang");

                entity.Property(e => e.PrintFormatLangId).HasColumnName("PrintFormatLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrintFormatId).HasColumnName("PrintFormatID");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.PrintFormatLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrintFormat_Lang_Languages");

                entity.HasOne(d => d.PrintFormat)
                    .WithMany(p => p.PrintFormatLang)
                    .HasForeignKey(d => d.PrintFormatId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrintFormat_Lang_PrintFormat");
            });

            modelBuilder.Entity<PrintFormatType>(entity =>
            {
                entity.Property(e => e.PrintFormatTypeId)
                    .HasColumnName("PrintFormatTypeID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrintFormatType1)
                    .HasColumnName("PrintFormatType")
                    .HasMaxLength(200);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.PrintFormatTypeFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_PrintFormatType_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.PrintFormatType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_PrintFormatType_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PrintFormatTypeUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrintFormatType_Users");
            });

            modelBuilder.Entity<PrintFormatTypeLang>(entity =>
            {
                entity.ToTable("PrintFormatType_Lang");

                entity.Property(e => e.PrintFormatTypeLangId).HasColumnName("PrintFormatTypeLangID");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrintFormatType).HasMaxLength(200);

                entity.Property(e => e.PrintFormatTypeId).HasColumnName("PrintFormatTypeID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.PrintFormatTypeLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrintFormatType_Lang_Languages");

                entity.HasOne(d => d.PrintFormatTypeNavigation)
                    .WithMany(p => p.PrintFormatTypeLang)
                    .HasForeignKey(d => d.PrintFormatTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrintFormatType_Lang_PrintFormatType");
            });

            modelBuilder.Entity<Projects>(entity =>
            {
                entity.Property(e => e.AboutCompany).HasMaxLength(100);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(150);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LogoPath).HasMaxLength(50);

                entity.Property(e => e.LogoPic).HasColumnType("image");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldVersion).HasMaxLength(50);

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.Value).HasMaxLength(150);

                entity.Property(e => e.Version).HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.Projects)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_Projects_Users");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.Projects)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_Projects_Languages");
            });

            modelBuilder.Entity<ProjectsLang>(entity =>
            {
                entity.HasKey(e => e.ProjectsLangId);

                entity.ToTable("Projects_Lang");

                entity.Property(e => e.ProjectsLangId).HasColumnName("ProjectsLangID");

                entity.Property(e => e.AboutCompany).HasMaxLength(100);

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(150);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.ProjectsLang)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Projects_Lang_Projects");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.ProjectsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Projects_Lang_Languages");
            });

            modelBuilder.Entity<Province>(entity =>
            {
                entity.Property(e => e.ProvinceId).HasColumnName("ProvinceID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Province1)
                    .IsRequired()
                    .HasColumnName("Province")
                    .HasMaxLength(50);

                entity.Property(e => e.ProvinceCode).HasMaxLength(15);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Province)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Province_Country");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.ProvinceFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_Province_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.Province)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_Province_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ProvinceUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Province_Users");
            });

            modelBuilder.Entity<ProvinceLang>(entity =>
            {
                entity.ToTable("Province_Lang");

                entity.Property(e => e.ProvinceLangId).HasColumnName("ProvinceLangID");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Province)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProvinceId).HasColumnName("ProvinceID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.ProvinceLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Province_Lang_Languages");

                entity.HasOne(d => d.ProvinceNavigation)
                    .WithMany(p => p.ProvinceLang)
                    .HasForeignKey(d => d.ProvinceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Province_Lang_Province");
            });

            modelBuilder.Entity<SecLetterDefaultSettings>(entity =>
            {
                entity.HasKey(e => e.LetterDefaultSettingId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Ldannex)
                    .HasColumnName("LDAnnex")
                    .HasMaxLength(100);

                entity.Property(e => e.LdcmpNickName)
                    .HasColumnName("LDcmpNickName")
                    .HasMaxLength(500);

                entity.Property(e => e.LdcmpPersonNickName)
                    .HasColumnName("LDcmpPersonNickName")
                    .HasMaxLength(500);

                entity.Property(e => e.Ldcontext)
                    .HasColumnName("LDContext")
                    .HasColumnType("ntext");

                entity.Property(e => e.Ldfooter)
                    .HasColumnName("LDFooter")
                    .HasMaxLength(500);

                entity.Property(e => e.Ldheader)
                    .HasColumnName("LDHeader")
                    .HasMaxLength(500);

                entity.Property(e => e.LdprintFormatId).HasColumnName("LDPrintFormatId");

                entity.Property(e => e.LdreferUserId).HasColumnName("LDReferUserId");

                entity.Property(e => e.LdsigningI)
                    .HasColumnName("LDSigningI")
                    .HasMaxLength(100);

                entity.Property(e => e.LdsigningIi)
                    .HasColumnName("LDSigningII")
                    .HasMaxLength(100);

                entity.Property(e => e.LdsigningIii)
                    .HasColumnName("LDSigningIII")
                    .HasMaxLength(100);

                entity.Property(e => e.LdsigningIv)
                    .HasColumnName("LDSigningIV")
                    .HasMaxLength(100);

                entity.Property(e => e.Ldsubject)
                    .HasColumnName("LDSubject")
                    .HasMaxLength(500);

                entity.Property(e => e.Ldtitle)
                    .IsRequired()
                    .HasColumnName("LDTitle")
                    .HasMaxLength(50);

                entity.Property(e => e.LdverifierRequestId).HasColumnName("LDVerifierRequestId");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SecLetterDefaultSettingsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecLetterDefaultSettings_Users");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SecLetterDefaultSettings)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_SecLetterDefaultSettings_Languages");

                entity.HasOne(d => d.LdprintFormat)
                    .WithMany(p => p.SecLetterDefaultSettings)
                    .HasForeignKey(d => d.LdprintFormatId)
                    .HasConstraintName("FK_SecLetterDefaultSettings_PrintFormat");

                entity.HasOne(d => d.LdreferUser)
                    .WithMany(p => p.SecLetterDefaultSettingsLdreferUser)
                    .HasForeignKey(d => d.LdreferUserId)
                    .HasConstraintName("FK_SecLetterDefaultSettings_Users2");

                entity.HasOne(d => d.LdverifierRequest)
                    .WithMany(p => p.SecLetterDefaultSettingsLdverifierRequest)
                    .HasForeignKey(d => d.LdverifierRequestId)
                    .HasConstraintName("FK_SecLetterDefaultSettings_Users3");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SecLetterDefaultSettingsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecLetterDefaultSettings_Users1");
            });

            modelBuilder.Entity<SecLetterDefaultSettingsLang>(entity =>
            {
                entity.ToTable("SecLetterDefaultSettings_Lang");

                entity.Property(e => e.SecLetterDefaultSettingsLangId).HasColumnName("SecLetterDefaultSettingsLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Ldannex)
                    .HasColumnName("LDAnnex")
                    .HasMaxLength(100);

                entity.Property(e => e.LdcmpNickName)
                    .HasColumnName("LDcmpNickName")
                    .HasMaxLength(500);

                entity.Property(e => e.LdcmpPersonNickName)
                    .HasColumnName("LDcmpPersonNickName")
                    .HasMaxLength(500);

                entity.Property(e => e.Ldcontext)
                    .HasColumnName("LDContext")
                    .HasColumnType("ntext");

                entity.Property(e => e.Ldfooter)
                    .HasColumnName("LDFooter")
                    .HasMaxLength(500);

                entity.Property(e => e.Ldheader)
                    .HasColumnName("LDHeader")
                    .HasMaxLength(500);

                entity.Property(e => e.LdsigningI)
                    .HasColumnName("LDSigningI")
                    .HasMaxLength(100);

                entity.Property(e => e.LdsigningIi)
                    .HasColumnName("LDSigningII")
                    .HasMaxLength(100);

                entity.Property(e => e.LdsigningIii)
                    .HasColumnName("LDSigningIII")
                    .HasMaxLength(100);

                entity.Property(e => e.LdsigningIv)
                    .HasColumnName("LDSigningIV")
                    .HasMaxLength(100);

                entity.Property(e => e.Ldsubject)
                    .HasColumnName("LDSubject")
                    .HasMaxLength(500);

                entity.Property(e => e.Ldtitle)
                    .IsRequired()
                    .HasColumnName("LDTitle")
                    .HasMaxLength(50);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SecLetterDefaultSettingsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecLetterDefaultSettings_Lang_Languages");

                entity.HasOne(d => d.LetterDefaultSetting)
                    .WithMany(p => p.SecLetterDefaultSettingsLang)
                    .HasForeignKey(d => d.LetterDefaultSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecLetterDefaultSettings_Lang_SecLetterDefaultSettings");
            });

            modelBuilder.Entity<SecLetterType>(entity =>
            {
                entity.HasKey(e => e.LetterTypeId);

                entity.Property(e => e.LetterTypeId).ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LetterTypeTitle)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SecLetterTypeFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecLetterType_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SecLetterType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_SecLetterType_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SecLetterTypeUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecLetterType_Users");
            });

            modelBuilder.Entity<SecLetterTypeLang>(entity =>
            {
                entity.ToTable("SecLetterType_Lang");

                entity.Property(e => e.SecLetterTypeLangId).HasColumnName("SecLetterTypeLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LetterTypeTitle)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SecLetterTypeLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecLetterType_Lang_Languages");

                entity.HasOne(d => d.LetterType)
                    .WithMany(p => p.SecLetterTypeLang)
                    .HasForeignKey(d => d.LetterTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecLetterType_Lang_SecLetterType");
            });

            modelBuilder.Entity<SecLetters>(entity =>
            {
                entity.HasKey(e => e.LetterId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LetterAnnex).HasMaxLength(100);

                entity.Property(e => e.LetterContext).HasColumnType("ntext");

                entity.Property(e => e.LetterDate)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.LetterDateTime).HasColumnType("datetime");

                entity.Property(e => e.LetterFooter).HasMaxLength(500);

                entity.Property(e => e.LetterHeader).HasMaxLength(500);

                entity.Property(e => e.LetterLastPrintDate)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.LetterLastPrintDateTime).HasColumnType("datetime");

                entity.Property(e => e.LetterLastPrintTime)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LetterNumberIi).HasColumnName("LetterNumberII");

                entity.Property(e => e.LetterPreNumber).HasMaxLength(50);

                entity.Property(e => e.LetterPreNumberIi)
                    .HasColumnName("LetterPreNumberII")
                    .HasMaxLength(50);

                entity.Property(e => e.LetterSigningI).HasMaxLength(100);

                entity.Property(e => e.LetterSigningIi)
                    .HasColumnName("LetterSigningII")
                    .HasMaxLength(100);

                entity.Property(e => e.LetterSigningIii)
                    .HasColumnName("LetterSigningIII")
                    .HasMaxLength(100);

                entity.Property(e => e.LetterSigningIv)
                    .HasColumnName("LetterSigningIV")
                    .HasMaxLength(100);

                entity.Property(e => e.LetterSubject).HasMaxLength(500);

                entity.Property(e => e.LetterVerifiedRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.LetterVerifiedRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.LettercmpNickName).HasMaxLength(500);

                entity.Property(e => e.LettercmpPersonNickName).HasMaxLength(500);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SecLettersFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecLetters_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SecLetters)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_SecLetters_Languages");

                entity.HasOne(d => d.LetterCompany)
                    .WithMany(p => p.SecLetters)
                    .HasForeignKey(d => d.LetterCompanyId)
                    .HasConstraintName("FK_SecLetters_CrmCompany");

                entity.HasOne(d => d.LetterPrintFormat)
                    .WithMany(p => p.SecLetters)
                    .HasForeignKey(d => d.LetterPrintFormatId)
                    .HasConstraintName("FK_SecLetters_PrintFormat");

                entity.HasOne(d => d.LetterType)
                    .WithMany(p => p.SecLetters)
                    .HasForeignKey(d => d.LetterTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecLetters_SecLetterType");

                entity.HasOne(d => d.LetterVerifier)
                    .WithMany(p => p.SecLettersLetterVerifier)
                    .HasForeignKey(d => d.LetterVerifierId)
                    .HasConstraintName("FK_SecLetters_Users2");

                entity.HasOne(d => d.LetterVerifierRequest)
                    .WithMany(p => p.SecLettersLetterVerifierRequest)
                    .HasForeignKey(d => d.LetterVerifierRequestId)
                    .HasConstraintName("FK_SecLetters_Users3");

                entity.HasOne(d => d.LettercmpPerson)
                    .WithMany(p => p.SecLetters)
                    .HasForeignKey(d => d.LettercmpPersonId)
                    .HasConstraintName("FK_SecLetters_CrmCompanyPersons");

                entity.HasOne(d => d.LettercmpProject)
                    .WithMany(p => p.SecLetters)
                    .HasForeignKey(d => d.LettercmpProjectId)
                    .HasConstraintName("FK_SecLetters_CrmProjects");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SecLettersUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecLetters_Users");
            });

            modelBuilder.Entity<SecLettersLang>(entity =>
            {
                entity.ToTable("SecLetters_Lang");

                entity.Property(e => e.SecLettersLangId).HasColumnName("SecLettersLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LetterAnnex).HasMaxLength(100);

                entity.Property(e => e.LetterContext).HasColumnType("ntext");

                entity.Property(e => e.LetterFooter).HasMaxLength(500);

                entity.Property(e => e.LetterHeader).HasMaxLength(500);

                entity.Property(e => e.LetterSigningI).HasMaxLength(100);

                entity.Property(e => e.LetterSigningIi)
                    .HasColumnName("LetterSigningII")
                    .HasMaxLength(100);

                entity.Property(e => e.LetterSigningIii)
                    .HasColumnName("LetterSigningIII")
                    .HasMaxLength(100);

                entity.Property(e => e.LetterSigningIv)
                    .HasColumnName("LetterSigningIV")
                    .HasMaxLength(100);

                entity.Property(e => e.LetterSubject).HasMaxLength(500);

                entity.Property(e => e.LettercmpNickName).HasMaxLength(500);

                entity.Property(e => e.LettercmpPersonNickName).HasMaxLength(500);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SecLettersLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecLetters_Lang_Languages");

                entity.HasOne(d => d.Letter)
                    .WithMany(p => p.SecLettersLang)
                    .HasForeignKey(d => d.LetterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecLetters_Lang_SecLetters");
            });

            modelBuilder.Entity<Sex>(entity =>
            {
                entity.Property(e => e.SexId).HasColumnName("SexID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.SexType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SexFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_Sex_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.Sex)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_Sex_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SexUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sex_Users");
            });

            modelBuilder.Entity<SexLang>(entity =>
            {
                entity.ToTable("Sex_Lang");

                entity.Property(e => e.SexLangId).HasColumnName("SexLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.SexId).HasColumnName("SexID");

                entity.Property(e => e.SexType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SexLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sex_Lang_Languages");

                entity.HasOne(d => d.Sex)
                    .WithMany(p => p.SexLang)
                    .HasForeignKey(d => d.SexId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sex_Lang_Sex");
            });

            modelBuilder.Entity<SmsDefaultBodyText>(entity =>
            {
                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Text)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Title).HasMaxLength(150);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SmsDefaultBodyTextFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_SmsDefaultBodyText_Users20");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.SmsDefaultBodyText)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_SmsDefaultBodyText_SmsDefaultBodyTextGroups");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsDefaultBodyText)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_SmsDefaultBodyText_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SmsDefaultBodyTextUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsDefaultBodyText_Users");
            });

            modelBuilder.Entity<SmsDefaultBodyTextGroups>(entity =>
            {
                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SmsDefaultBodyTextGroupsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_SmsDefaultBodyTextGroups_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsDefaultBodyTextGroups)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_SmsDefaultBodyTextGroups_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SmsDefaultBodyTextGroupsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsDefaultBodyTextGroups_Users");
            });

            modelBuilder.Entity<SmsDefaultBodyTextGroupsLang>(entity =>
            {
                entity.HasKey(e => e.SmsDefaultBodyTextGroupsLangId);

                entity.ToTable("SmsDefaultBodyTextGroups_Lang");

                entity.Property(e => e.SmsDefaultBodyTextGroupsLangId).HasColumnName("SmsDefaultBodyTextGroupsLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.SmsDefaultBodyTextGroupsLang)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsDefaultBodyTextGroups_Lang_SmsDefaultBodyTextGroups");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsDefaultBodyTextGroupsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsDefaultBodyTextGroups_Lang_Languages");
            });

            modelBuilder.Entity<SmsDefaultBodyTextLang>(entity =>
            {
                entity.HasKey(e => e.SmsDefaultBodyTextLangId);

                entity.ToTable("SmsDefaultBodyText_Lang");

                entity.Property(e => e.SmsDefaultBodyTextLangId).HasColumnName("SmsDefaultBodyTextLangID");

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Text)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Title).HasMaxLength(150);

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.SmsDefaultBodyTextLang)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsDefaultBodyText_Lang_SmsDefaultBodyText");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsDefaultBodyTextLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsDefaultBodyText_Lang_Languages");
            });

            modelBuilder.Entity<SmsDeliveryStatus>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryStatus)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.WebServiceId).HasColumnName("WebServiceID");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SmsDeliveryStatus)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_SmsDeliveryStatus_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsDeliveryStatus)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_SmsDeliveryStatus_Languages");
            });

            modelBuilder.Entity<SmsDeliveryStatusLang>(entity =>
            {
                entity.HasKey(e => e.SmsDeliveryStatusLangId);

                entity.ToTable("SmsDeliveryStatus_Lang");

                entity.Property(e => e.SmsDeliveryStatusLangId).HasColumnName("SmsDeliveryStatusLangID");

                entity.Property(e => e.DeliveryStatus)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.SmsDeliveryStatusLang)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsDeliveryStatus_Lang_SmsDeliveryStatus");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsDeliveryStatusLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsDeliveryStatus_Lang_Languages");
            });

            modelBuilder.Entity<SmsGsmmodemDelivery>(entity =>
            {
                entity.ToTable("SmsGSMModemDelivery");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryFaDateTime).HasMaxLength(50);

                entity.Property(e => e.Dstatus).HasColumnName("DStatus");

                entity.Property(e => e.Dtime)
                    .HasColumnName("DTime")
                    .HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Number).HasMaxLength(50);

                entity.Property(e => e.RegisterDatePersian).HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SmsGsmmodemDelivery)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_SmsGSMModemDelivery_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsGsmmodemDelivery)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_SmsGSMModemDelivery_Languages");
            });

            modelBuilder.Entity<SmsGsmmodemSetting>(entity =>
            {
                entity.ToTable("SmsGSMModemSetting");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AutoDeleteNewSms).HasColumnName("AutoDeleteNewSMS");

                entity.Property(e => e.ConcatenatedSms).HasColumnName("ConcatenatedSMS");

                entity.Property(e => e.ConnectStatus).HasMaxLength(100);

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.DeviceName).HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FlashSms).HasColumnName("FlashSMS");

                entity.Property(e => e.GsmBatteryLevel)
                    .HasColumnName("gsmBatteryLevel")
                    .HasMaxLength(200);

                entity.Property(e => e.GsmFirmware)
                    .HasColumnName("gsmFirmware")
                    .HasMaxLength(200);

                entity.Property(e => e.GsmHardware)
                    .HasColumnName("gsmHardware")
                    .HasMaxLength(200);

                entity.Property(e => e.GsmImei)
                    .HasColumnName("gsmIMEI")
                    .HasMaxLength(200);

                entity.Property(e => e.GsmManufacturer)
                    .HasColumnName("gsmManufacturer")
                    .HasMaxLength(200);

                entity.Property(e => e.GsmModel)
                    .HasColumnName("gsmModel")
                    .HasMaxLength(200);

                entity.Property(e => e.GsmNetworkInfo)
                    .HasColumnName("gsmNetworkInfo")
                    .HasMaxLength(200);

                entity.Property(e => e.GsmSignalLevel)
                    .HasColumnName("gsmSignalLevel")
                    .HasMaxLength(200);

                entity.Property(e => e.GsmSmscnumber)
                    .HasColumnName("gsmSMSCNumber")
                    .HasMaxLength(200);

                entity.Property(e => e.GsmTime)
                    .HasColumnName("gsmTime")
                    .HasMaxLength(200);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LastSendError).HasMaxLength(100);

                entity.Property(e => e.Message).HasMaxLength(1000);

                entity.Property(e => e.Mode).HasMaxLength(50);

                entity.Property(e => e.Parameter).HasMaxLength(50);

                entity.Property(e => e.PinCode).HasMaxLength(50);

                entity.Property(e => e.Protocol).HasMaxLength(50);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian).HasMaxLength(8);

                entity.Property(e => e.SendFtime)
                    .HasColumnName("SendFTime")
                    .HasMaxLength(20);

                entity.Property(e => e.SendTtime)
                    .HasColumnName("SendTTime")
                    .HasMaxLength(20);

                entity.Property(e => e.SimNumber).HasMaxLength(20);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SmsGsmmodemSettingFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_SmsGSMModemSetting_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsGsmmodemSetting)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_SmsGSMModemSetting_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SmsGsmmodemSettingUser)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_SmsGSMModemSetting_Users");
            });

            modelBuilder.Entity<SmsGsmreceives>(entity =>
            {
                entity.ToTable("SmsGSMReceives");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ConcatenatedInfo).HasMaxLength(1000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ReceiveNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReceiveText).HasMaxLength(2000);

                entity.Property(e => e.ReceiveTime).HasColumnType("datetime");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SmsGsmreceives)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_SmsGSMReceives_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsGsmreceives)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_SmsGSMReceives_Languages");
            });

            modelBuilder.Entity<SmsGsmsendingTank>(entity =>
            {
                entity.ToTable("SmsGSMSendingTank");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Body).HasMaxLength(2000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Info).HasMaxLength(500);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Number).HasMaxLength(20);

                entity.Property(e => e.RequestDate).HasMaxLength(8);

                entity.Property(e => e.RequestTime).HasMaxLength(20);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SmsGsmsendingTank)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_SmsGSMSendingTank_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsGsmsendingTank)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_SmsGSMSendingTank_Languages");
            });

            modelBuilder.Entity<SmsProviders>(entity =>
            {
                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.EnCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FaCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LastCreditAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.ProviderDomain)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProviderName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProviderUrl).HasMaxLength(2000);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SmsProvidersFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsProviders_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsProviders)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsProviders_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SmsProvidersUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsProviders_Users");
            });

            modelBuilder.Entity<SmsReceive>(entity =>
            {
                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FromNumber).HasMaxLength(50);

                entity.Property(e => e.GetId).HasMaxLength(50);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ReceiveDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiveDatePersian).HasMaxLength(8);

                entity.Property(e => e.ReceiveDatePersianPreview).HasMaxLength(70);

                entity.Property(e => e.ReceiveDay).HasMaxLength(50);

                entity.Property(e => e.ReceiveTime).HasMaxLength(50);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian).HasMaxLength(8);

                entity.Property(e => e.SendDate).HasColumnType("datetime");

                entity.Property(e => e.SendDatePersian).HasMaxLength(8);

                entity.Property(e => e.SendDatePersianPreview).HasMaxLength(70);

                entity.Property(e => e.SmsDesc).HasMaxLength(1000);

                entity.Property(e => e.SmsNumber).HasMaxLength(50);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.SmsReceive)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_SmsReceive_CrmCompany");

                entity.HasOne(d => d.CompanyPerson)
                    .WithMany(p => p.SmsReceive)
                    .HasForeignKey(d => d.CompanyPersonId)
                    .HasConstraintName("FK_SmsReceive_CrmCompanyPersons");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SmsReceiveFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_SmsReceive_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsReceive)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_SmsReceive_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SmsReceiveUser)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_SmsReceive_Users");
            });

            modelBuilder.Entity<SmsReceiveFromWsdl>(entity =>
            {
                entity.ToTable("SmsReceiveFromWSDL");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FromNumber).HasMaxLength(50);

                entity.Property(e => e.GetId).HasMaxLength(50);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ReceiveDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiveDatePersian).HasMaxLength(8);

                entity.Property(e => e.ReceiveDatePersianPreview).HasMaxLength(70);

                entity.Property(e => e.ReceiveDay).HasMaxLength(50);

                entity.Property(e => e.ReceiveTime).HasMaxLength(50);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian).HasMaxLength(8);

                entity.Property(e => e.SendDate).HasColumnType("datetime");

                entity.Property(e => e.SendDatePersian).HasMaxLength(8);

                entity.Property(e => e.SendDatePersianPreview).HasMaxLength(70);

                entity.Property(e => e.SmsDesc).HasMaxLength(1000);

                entity.Property(e => e.SmsNumber).HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SmsReceiveFromWsdl)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_SmsReceiveFromWSDL_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsReceiveFromWsdl)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_SmsReceiveFromWSDL_Languages");
            });

            modelBuilder.Entity<SmsSendDetail>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Body).HasMaxLength(2000);

                entity.Property(e => e.BodyCost).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.BodyLangType).HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectIdType).HasMaxLength(10);

                entity.Property(e => e.RefId).HasColumnName("RefID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.SendDate).HasMaxLength(50);

                entity.Property(e => e.SendDateTime).HasColumnType("datetime");

                entity.Property(e => e.SendDay).HasMaxLength(50);

                entity.Property(e => e.SendTime).HasMaxLength(50);

                entity.Property(e => e.Sid).HasColumnName("SID");

                entity.Property(e => e.StatusChangeDate).HasMaxLength(8);

                entity.Property(e => e.StatusChangeDateTime).HasColumnType("datetime");

                entity.Property(e => e.StatusChangeTime).HasMaxLength(20);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.SmsSendDetail)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_SmsSendDetail_CrmCompany");

                entity.HasOne(d => d.CompanyPerson)
                    .WithMany(p => p.SmsSendDetail)
                    .HasForeignKey(d => d.CompanyPersonId)
                    .HasConstraintName("FK_SmsSendDetail_CrmCompanyPersons");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SmsSendDetailFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_SmsSendDetail_Users20");

                entity.HasOne(d => d.Head)
                    .WithMany(p => p.SmsSendDetail)
                    .HasForeignKey(d => d.HeadId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsSendDetail_SmsSendHeader");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsSendDetail)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_SmsSendDetail_Languages");

                entity.HasOne(d => d.SendUser)
                    .WithMany(p => p.SmsSendDetailSendUser)
                    .HasForeignKey(d => d.SendUserId)
                    .HasConstraintName("FK_SmsSendDetail_Users1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SmsSendDetailUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsSendDetail_Users");
            });

            modelBuilder.Entity<SmsSendHeader>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cmessage).HasColumnName("CMessage");

                entity.Property(e => e.CompaniesId).HasColumnType("text");

                entity.Property(e => e.CompanyPersonsId).HasColumnType("text");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FromNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Numbers).HasColumnType("text");

                entity.Property(e => e.RefNumbers).HasColumnType("text");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.SchedulDate).HasColumnType("datetime");

                entity.Property(e => e.SendDate).HasMaxLength(50);

                entity.Property(e => e.SendDateTime).HasColumnType("datetime");

                entity.Property(e => e.SendDay).HasMaxLength(50);

                entity.Property(e => e.SendTime).HasMaxLength(50);

                entity.Property(e => e.SendTopic).HasMaxLength(50);

                entity.Property(e => e.Sid).HasColumnName("SID");

                entity.Property(e => e.SmsBody)
                    .HasColumnName("smsBody")
                    .HasMaxLength(2000);

                entity.Property(e => e.SmsBodyCost)
                    .HasColumnName("smsBodyCost")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SmsBodyCount).HasColumnName("smsBodyCount");

                entity.Property(e => e.SmsBodyLangType)
                    .HasColumnName("smsBodyLangType")
                    .HasMaxLength(50);

                entity.Property(e => e.UserCost).HasColumnType("numeric(18, 0)");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SmsSendHeaderFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_SmsSendHeader_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsSendHeader)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_SmsSendHeader_Languages");

                entity.HasOne(d => d.SendUser)
                    .WithMany(p => p.SmsSendHeaderSendUser)
                    .HasForeignKey(d => d.SendUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsSendHeader_Users");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SmsSendHeaderUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsSendHeader_Users1");
            });

            modelBuilder.Entity<SmsSendType>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.SmssendType1)
                    .HasColumnName("SMSSendType")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SmsSendType)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_SmsSendType_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsSendType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_SmsSendType_Languages");
            });

            modelBuilder.Entity<SmsSendTypeLang>(entity =>
            {
                entity.HasKey(e => e.SmsSendTypeLangId);

                entity.ToTable("SmsSendType_Lang");

                entity.Property(e => e.SmsSendTypeLangId).HasColumnName("SmsSendTypeLangID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.SmssendType)
                    .HasColumnName("SMSSendType")
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.SmsSendTypeLang)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsSendType_Lang_SmsSendType");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsSendTypeLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsSendType_Lang_Languages");
            });

            modelBuilder.Entity<SmsSetting>(entity =>
            {
                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CmpPattern).HasMaxLength(25);

                entity.Property(e => e.CmpTpattern)
                    .HasColumnName("CmpTPattern")
                    .HasMaxLength(25);

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.DomainName).HasMaxLength(50);

                entity.Property(e => e.EnCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FaCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LastCreditAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Number).HasMaxLength(1000);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.PrsFnpattern)
                    .HasColumnName("PrsFNPattern")
                    .HasMaxLength(25);

                entity.Property(e => e.PrsJobPattern).HasMaxLength(25);

                entity.Property(e => e.PrsLnpattern)
                    .HasColumnName("PrsLNPattern")
                    .HasMaxLength(25);

                entity.Property(e => e.PrsTpattern)
                    .HasColumnName("PrsTPattern")
                    .HasMaxLength(25);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.SendAfterKnownNumCallGsm).HasColumnName("SendAfterKnownNumCallGSM");

                entity.Property(e => e.SendAfterKnownNumCallText).HasMaxLength(1000);

                entity.Property(e => e.SendAfterRegNewNumGsm).HasColumnName("SendAfterRegNewNumGSM");

                entity.Property(e => e.SendAfterRegNewNumText).HasMaxLength(1000);

                entity.Property(e => e.SendAfterUnKnownNumCallGsm).HasColumnName("SendAfterUnKnownNumCallGSM");

                entity.Property(e => e.SendAfterUnKnownNumCallText).HasMaxLength(1000);

                entity.Property(e => e.SendBirthCongratulateGsm).HasColumnName("SendBirthCongratulateGSM");

                entity.Property(e => e.SendBirthCongratulateText).HasMaxLength(1000);

                entity.Property(e => e.SendMarriageCongratulateGsm).HasColumnName("SendMarriageCongratulateGSM");

                entity.Property(e => e.SendMarriageCongratulateText).HasMaxLength(1000);

                entity.Property(e => e.Tmp)
                    .HasColumnName("tmp")
                    .HasMaxLength(300);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SmsSettingFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_SmsSetting_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsSetting)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_SmsSetting_Languages");

                entity.HasOne(d => d.Provider)
                    .WithMany(p => p.SmsSetting)
                    .HasForeignKey(d => d.ProviderId)
                    .HasConstraintName("FK_SmsSetting_SmsProviders");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SmsSettingUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsSetting_Users");
            });

            modelBuilder.Entity<SmsTempMobileNumbers>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Body).HasMaxLength(2000);

                entity.Property(e => e.BodyCost).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.BodyLangType).HasMaxLength(50);

                entity.Property(e => e.CmpName)
                    .HasColumnName("cmpName")
                    .HasMaxLength(300);

                entity.Property(e => e.CmpTitle)
                    .HasColumnName("cmpTitle")
                    .HasMaxLength(100);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Mobile).HasMaxLength(20);

                entity.Property(e => e.MobilePreNum)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.PersonName).HasMaxLength(500);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PrsFname)
                    .HasColumnName("PrsFName")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsJob).HasMaxLength(100);

                entity.Property(e => e.PrsLname)
                    .HasColumnName("PrsLName")
                    .HasMaxLength(100);

                entity.Property(e => e.PrsTitle).HasMaxLength(100);

                entity.Property(e => e.Selector)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Sid).HasColumnName("SID");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.SmsTempMobileNumbers)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsTempMobileNumbers_CrmCompany");

                entity.HasOne(d => d.CompanyPerson)
                    .WithMany(p => p.SmsTempMobileNumbers)
                    .HasForeignKey(d => d.CompanyPersonId)
                    .HasConstraintName("FK_SmsTempMobileNumbers_CrmCompanyPersons");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SmsTempMobileNumbersFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_SmsTempMobileNumbers_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsTempMobileNumbers)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_SmsTempMobileNumbers_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SmsTempMobileNumbersUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsTempMobileNumbers_Users");
            });

            modelBuilder.Entity<SmsUserSendCredit>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ImportDate)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.ImportDateTime).HasColumnType("datetime");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.CreditUser)
                    .WithMany(p => p.SmsUserSendCreditCreditUser)
                    .HasForeignKey(d => d.CreditUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsUserSendCredit_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.SmsUserSendCreditFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_SmsUserSendCredit_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsUserSendCredit)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_SmsUserSendCredit_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SmsUserSendCreditUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsUserSendCredit_Users1");
            });

            modelBuilder.Entity<SmsUserSendCreditLang>(entity =>
            {
                entity.HasKey(e => e.SmsUserSendCreditLangId);

                entity.ToTable("SmsUserSendCredit_Lang");

                entity.Property(e => e.SmsUserSendCreditLangId).HasColumnName("SmsUserSendCreditLangID");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.SmsUserSendCreditLang)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsUserSendCredit_Lang_SmsUserSendCredit");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.SmsUserSendCreditLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SmsUserSendCredit_Lang_Languages");
            });

            modelBuilder.Entity<UserDepartmentTicketReferUsers>(entity =>
            {
                entity.HasKey(e => e.UserDepartmentTicketReferUserId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.UserDepartmentTicketReferUsers)
                    .HasForeignKey(d => d.DepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserDepartmentTicketReferUsers_UserDepartments");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.UserDepartmentTicketReferUsersFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_UserDepartmentTicketReferUsers_Users2");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.UserDepartmentTicketReferUsers)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_UserDepartmentTicketReferUsers_Languages");

                entity.HasOne(d => d.ReferUser)
                    .WithMany(p => p.UserDepartmentTicketReferUsersReferUser)
                    .HasForeignKey(d => d.ReferUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserDepartmentTicketReferUsers_Users");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserDepartmentTicketReferUsersUser)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_UserDepartmentTicketReferUsers_Users1");
            });

            modelBuilder.Entity<UserDepartments>(entity =>
            {
                entity.HasKey(e => e.DepartmentId);

                entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.UserDepartmentsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_UserDepartments_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.UserDepartments)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_UserDepartments_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserDepartmentsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserDepartments_Users");
            });

            modelBuilder.Entity<UserDepartmentsLang>(entity =>
            {
                entity.ToTable("UserDepartments_Lang");

                entity.Property(e => e.UserDepartmentsLangId).HasColumnName("UserDepartmentsLangID");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.DepartmentNavigation)
                    .WithMany(p => p.UserDepartmentsLang)
                    .HasForeignKey(d => d.DepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserDepartments_Lang_UserDepartments");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.UserDepartmentsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserDepartments_Lang_Languages");
            });

            modelBuilder.Entity<UserLanguages>(entity =>
            {
                entity.HasKey(e => e.UserLanguageId);

                entity.Property(e => e.UserLanguageId).HasColumnName("UserLanguageID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageDirection)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.UserLanguagesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_UserLanguages_Users25");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.UserLanguages)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserLanguages_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserLanguagesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserLanguages_Users");

                entity.HasOne(d => d.UserId1Navigation)
                    .WithMany(p => p.UserLanguagesUserId1Navigation)
                    .HasForeignKey(d => d.UserId1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserLanguages_Users1");
            });

            modelBuilder.Entity<UserLoginAllowedTimes>(entity =>
            {
                entity.HasKey(e => e.UserLoginAllowedTimeId);

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CrmUserId).HasColumnName("crmUserId");

                entity.Property(e => e.FdatePersian)
                    .HasColumnName("FDatePersian")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fdatetime)
                    .HasColumnName("FDatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Ftime)
                    .HasColumnName("FTime")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Ipaddress)
                    .HasColumnName("IPAddress")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.TdatePersian)
                    .HasColumnName("TDatePersian")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tdatetime)
                    .HasColumnName("TDatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ttime)
                    .HasColumnName("TTime")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CrmUser)
                    .WithMany(p => p.UserLoginAllowedTimesCrmUser)
                    .HasForeignKey(d => d.CrmUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserLoginAllowedTimes_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.UserLoginAllowedTimesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_UserLoginAllowedTimes_Users20");

                entity.HasOne(d => d.FirstUser)
                    .WithMany(p => p.UserLoginAllowedTimesFirstUser)
                    .HasForeignKey(d => d.FirstUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserLoginAllowedTimes_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.UserLoginAllowedTimes)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_UserLoginAllowedTimes_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserLoginAllowedTimesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserLoginAllowedTimes_Users2");
            });

            modelBuilder.Entity<UserSignature>(entity =>
            {
                entity.HasKey(e => e.SignatureId);

                entity.Property(e => e.SignatureId).HasColumnName("SignatureID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Signature)
                    .IsRequired()
                    .HasColumnType("image");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.UserSignatureFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_UserSignature_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.UserSignature)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_UserSignature_Languages");

                entity.HasOne(d => d.SignatureUser)
                    .WithMany(p => p.UserSignatureSignatureUser)
                    .HasForeignKey(d => d.SignatureUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserSignature_Users");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserSignatureUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserSignature_Users1");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.HasIndex(e => e.UserName)
                    .HasDatabaseName("IX_Users")
                    .IsUnique();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CallreIdDeActiveLines).HasMaxLength(50);

                entity.Property(e => e.ComputerName).HasMaxLength(50);

                entity.Property(e => e.CoordinateLastDate).HasColumnType("datetime");

                entity.Property(e => e.CoordinateLastDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CoordinateLatitude).HasMaxLength(100);

                entity.Property(e => e.CoordinateLongitude).HasMaxLength(100);

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.DisableReceiveCnvsinfoAllarm).HasColumnName("DisableReceiveCNVSInfoAllarm");

                entity.Property(e => e.EmailAttachFileLocation).HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fname)
                    .HasColumnName("FName")
                    .HasMaxLength(100);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Ipaddress)
                    .HasColumnName("IPAddress")
                    .HasMaxLength(25);

                entity.Property(e => e.IsActive).HasDefaultValueSql("(1)");

                entity.Property(e => e.IsAdmin).HasMaxLength(50);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Lname)
                    .HasColumnName("LName")
                    .HasMaxLength(100);

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.PersCode).HasMaxLength(15);

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian).HasMaxLength(8);

                entity.Property(e => e.Tel).HasMaxLength(15);

                entity.Property(e => e.TelDesc).HasMaxLength(50);

                entity.Property(e => e.UserCipatternFormulaPopUp)
                    .HasColumnName("UserCIPatternFormulaPopUp")
                    .HasMaxLength(4000);

                entity.Property(e => e.UserIsActiveInFosetting).HasColumnName("UserIsActiveInFOSetting");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Users_UserDepartments");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_Users_Languages");

                entity.HasOne(d => d.UserId1Navigation)
                    .WithMany(p => p.InverseUserId1Navigation)
                    .HasForeignKey(d => d.UserId1)
                    .HasConstraintName("FK_Users_Users1");
            });

            modelBuilder.Entity<UsersLang>(entity =>
            {
                entity.ToTable("Users_Lang");

                entity.Property(e => e.UsersLangId).HasColumnName("UsersLangID");

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.Fname)
                    .HasColumnName("FName")
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Lname)
                    .HasColumnName("LName")
                    .HasMaxLength(100);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.UsersLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Users_Lang_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UsersLang)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Users_Lang_Users");
            });

            modelBuilder.Entity<UsersPermission>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccessLevel).HasMaxLength(50);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.UsersPermissionFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_UsersPermission_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.UsersPermission)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_UsersPermission_Languages");

                entity.HasOne(d => d.Prj)
                    .WithMany(p => p.UsersPermission)
                    .HasForeignKey(d => d.PrjId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsersPermission_Projects");

                entity.HasOne(d => d.Roll)
                    .WithMany(p => p.UsersPermission)
                    .HasForeignKey(d => d.RollId)
                    .HasConstraintName("FK_UsersPermission_CrmsysRolls");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UsersPermissionUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsersPermission_Users");
            });

            modelBuilder.Entity<UsersPermissionLang>(entity =>
            {
                entity.HasKey(e => e.UsersPermissionLangId);

                entity.ToTable("UsersPermission_Lang");

                entity.Property(e => e.UsersPermissionLangId).HasColumnName("UsersPermissionLangID");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.UsersPermissionLang)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsersPermission_Lang_UsersPermission");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.UsersPermissionLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsersPermission_Lang_Languages");
            });

            modelBuilder.Entity<WsWareHouse>(entity =>
            {
                entity.HasKey(e => e.WareHouseId);

                entity.Property(e => e.WareHouseId).HasColumnName("WareHouseID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.WrhsAddress).HasMaxLength(500);

                entity.Property(e => e.WrhsArea).HasMaxLength(100);

                entity.Property(e => e.WrhsCode).HasMaxLength(50);

                entity.Property(e => e.WrhsDescription).HasMaxLength(500);

                entity.Property(e => e.WrhsFax).HasMaxLength(15);

                entity.Property(e => e.WrhsFaxSecond).HasMaxLength(15);

                entity.Property(e => e.WrhsLinkAccWhCode).HasMaxLength(50);

                entity.Property(e => e.WrhsName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.WrhsPerson).HasMaxLength(50);

                entity.Property(e => e.WrhsPreTel).HasMaxLength(15);

                entity.Property(e => e.WrhsTel).HasMaxLength(15);

                entity.Property(e => e.WrhsTelSecond).HasMaxLength(15);

                entity.Property(e => e.WrhsTelThird).HasMaxLength(15);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsWareHouseFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WsWareHouse_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsWareHouse)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WsWareHouse_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsWareHouse)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WsWareHouse_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsWareHouseUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WsWareHouse_Users");
            });

            modelBuilder.Entity<WsWareHouseLang>(entity =>
            {
                entity.ToTable("WsWareHouse_Lang");

                entity.Property(e => e.WsWareHouseLangId).HasColumnName("WsWareHouseLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.WareHouseId).HasColumnName("WareHouseID");

                entity.Property(e => e.WrhsAddress).HasMaxLength(500);

                entity.Property(e => e.WrhsArea).HasMaxLength(100);

                entity.Property(e => e.WrhsDescription).HasMaxLength(500);

                entity.Property(e => e.WrhsName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.WrhsPerson).HasMaxLength(50);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsWareHouseLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WsWareHouse_Lang_Languages");

                entity.HasOne(d => d.WareHouse)
                    .WithMany(p => p.WsWareHouseLang)
                    .HasForeignKey(d => d.WareHouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WsWareHouse_Lang_WsWareHouse");
            });

            modelBuilder.Entity<WsbuyOrder>(entity =>
            {
                entity.HasKey(e => e.BuyOrderId);

                entity.ToTable("WSBuyOrder");

                entity.HasIndex(e => e.BordCompanyId)
                    .HasDatabaseName("IX_WSBuyOrder_CompanyId");

                entity.HasIndex(e => e.BordCompanyPersonId)
                    .HasDatabaseName("IX_WSBuyOrder_CompanyPersonId");

                entity.HasIndex(e => e.BordProjectId)
                    .HasDatabaseName("IX_WSBuyOrder_ProjectId");

                entity.Property(e => e.BuyOrderId).HasColumnName("BuyOrderID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BordCalculateTax).HasColumnName("bordCalculateTax");

                entity.Property(e => e.BordCompanyId).HasColumnName("bordCompanyId");

                entity.Property(e => e.BordCompanyPersonId).HasColumnName("bordCompanyPersonId");

                entity.Property(e => e.BordDate)
                    .IsRequired()
                    .HasColumnName("bordDate")
                    .HasMaxLength(8);

                entity.Property(e => e.BordDateTime)
                    .HasColumnName("bordDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.BordDay)
                    .HasColumnName("bordDay")
                    .HasMaxLength(50);

                entity.Property(e => e.BordDiscount)
                    .HasColumnName("bordDiscount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BordDiscountPercent)
                    .HasColumnName("bordDiscountPercent")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BordDiscountTitle)
                    .HasColumnName("bordDiscountTitle")
                    .HasMaxLength(100);

                entity.Property(e => e.BordFirstRegisterUserId).HasColumnName("bordFirstRegisterUserId");

                entity.Property(e => e.BordImportDate)
                    .HasColumnName("bordImportDate")
                    .HasMaxLength(8);

                entity.Property(e => e.BordImportDateTime)
                    .HasColumnName("bordImportDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.BordIsFixed).HasColumnName("bordIsFixed");

                entity.Property(e => e.BordIsVerified).HasColumnName("bordIsVerified");

                entity.Property(e => e.BordItemCount).HasColumnName("bordItemCount");

                entity.Property(e => e.BordItemsAmount)
                    .HasColumnName("bordItemsAmount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BordLinkAccBuyOrderId).HasColumnName("bordLinkAccBuyOrderId");

                entity.Property(e => e.BordLinkAccBuyOrderNumber)
                    .HasColumnName("bordLinkAccBuyOrderNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.BordLinkAccCode)
                    .HasColumnName("bordLinkAccCode")
                    .HasMaxLength(50);

                entity.Property(e => e.BordLinkAccCodeId).HasColumnName("bordLinkAccCodeId");

                entity.Property(e => e.BordLinkAccVoucherId).HasColumnName("bordLinkAccVoucherId");

                entity.Property(e => e.BordLinkAccVoucherNumber)
                    .HasColumnName("bordLinkAccVoucherNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.BordNote)
                    .HasColumnName("bordNote")
                    .HasMaxLength(300);

                entity.Property(e => e.BordNumber).HasColumnName("bordNumber");

                entity.Property(e => e.BordOrderDate)
                    .HasColumnName("bordOrderDate")
                    .HasMaxLength(50);

                entity.Property(e => e.BordOrderDateTime)
                    .HasColumnName("bordOrderDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.BordOrderNumber)
                    .HasColumnName("bordOrderNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.BordPrintFormatId).HasColumnName("bordPrintFormatId");

                entity.Property(e => e.BordProjectId).HasColumnName("bordProjectId");

                entity.Property(e => e.BordReferUserId).HasColumnName("bordReferUserId");

                entity.Property(e => e.BordRound)
                    .HasColumnName("bordRound")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BordSettlementTypeId).HasColumnName("bordSettlementTypeId");

                entity.Property(e => e.BordStatusId).HasColumnName("bordStatusId");

                entity.Property(e => e.BordSubject)
                    .HasColumnName("bordSubject")
                    .HasMaxLength(100);

                entity.Property(e => e.BordSumAmount)
                    .HasColumnName("bordSumAmount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BordTax)
                    .HasColumnName("bordTax")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BordTaxIndex)
                    .HasColumnName("bordTaxIndex")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BordTime)
                    .HasColumnName("bordTime")
                    .HasMaxLength(50);

                entity.Property(e => e.BordTitle)
                    .HasColumnName("bordTitle")
                    .HasMaxLength(100);

                entity.Property(e => e.BordTotalAmount)
                    .HasColumnName("bordTotalAmount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BordTotalAmountStr)
                    .HasColumnName("bordTotalAmountStr")
                    .HasMaxLength(1000);

                entity.Property(e => e.BordTransportation)
                    .HasColumnName("bordTransportation")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BordVerifiedRegisterDate)
                    .HasColumnName("bordVerifiedRegisterDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.BordVerifiedRegisterDatePersian)
                    .HasColumnName("bordVerifiedRegisterDatePersian")
                    .HasMaxLength(8);

                entity.Property(e => e.BordVerifierId).HasColumnName("bordVerifierId");

                entity.Property(e => e.BordcmpTitle)
                    .HasColumnName("bordcmpTitle")
                    .HasMaxLength(100);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.BordCompany)
                    .WithMany(p => p.WsbuyOrder)
                    .HasForeignKey(d => d.BordCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrder_CrmCompany");

                entity.HasOne(d => d.BordCompanyPerson)
                    .WithMany(p => p.WsbuyOrder)
                    .HasForeignKey(d => d.BordCompanyPersonId)
                    .HasConstraintName("FK_WSBuyOrder_CrmCompanyPersons");

                entity.HasOne(d => d.BordFirstRegisterUser)
                    .WithMany(p => p.WsbuyOrderBordFirstRegisterUser)
                    .HasForeignKey(d => d.BordFirstRegisterUserId)
                    .HasConstraintName("FK_WSBuyOrder_Users1");

                entity.HasOne(d => d.BordPrintFormat)
                    .WithMany(p => p.WsbuyOrder)
                    .HasForeignKey(d => d.BordPrintFormatId)
                    .HasConstraintName("FK_WSBuyOrder_PrintFormat");

                entity.HasOne(d => d.BordProject)
                    .WithMany(p => p.WsbuyOrder)
                    .HasForeignKey(d => d.BordProjectId)
                    .HasConstraintName("FK_WSBuyOrder_CrmProjects");

                entity.HasOne(d => d.BordReferUser)
                    .WithMany(p => p.WsbuyOrderBordReferUser)
                    .HasForeignKey(d => d.BordReferUserId)
                    .HasConstraintName("FK_WSBuyOrder_Users3");

                entity.HasOne(d => d.BordStatus)
                    .WithMany(p => p.WsbuyOrder)
                    .HasForeignKey(d => d.BordStatusId)
                    .HasConstraintName("FK_WSBuyOrder_WSBuyOrderStatus");

                entity.HasOne(d => d.BordVerifier)
                    .WithMany(p => p.WsbuyOrderBordVerifier)
                    .HasForeignKey(d => d.BordVerifierId)
                    .HasConstraintName("FK_WSBuyOrder_Users");

                entity.HasOne(d => d.BuyOrderOpr)
                    .WithMany(p => p.WsbuyOrder)
                    .HasForeignKey(d => d.BuyOrderOprId)
                    .HasConstraintName("FK_WSBuyOrder_WSBuyOrderOpr");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsbuyOrderFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSBuyOrder_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsbuyOrder)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrder_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsbuyOrder)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSBuyOrder_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsbuyOrderUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrder_Users2");
            });

            modelBuilder.Entity<WsbuyOrderItemSerials>(entity =>
            {
                entity.HasKey(e => e.BuyOrderItemSerialId);

                entity.ToTable("WSBuyOrderItemSerials");

                entity.Property(e => e.BuyOrderItemSerialId).HasColumnName("BuyOrderItemSerialID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.ExpDate).HasColumnType("datetime");

                entity.Property(e => e.ExpDatePersian).HasMaxLength(8);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.InfoI).HasMaxLength(200);

                entity.Property(e => e.InfoIi)
                    .HasColumnName("InfoII")
                    .HasMaxLength(200);

                entity.Property(e => e.InfoIii)
                    .HasColumnName("InfoIII")
                    .HasMaxLength(200);

                entity.Property(e => e.InfoIv)
                    .HasColumnName("InfoIV")
                    .HasMaxLength(200);

                entity.Property(e => e.InfoV).HasMaxLength(200);

                entity.Property(e => e.InfoVi)
                    .HasColumnName("InfoVI")
                    .HasMaxLength(200);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Serial).HasMaxLength(50);

                entity.Property(e => e.TblTmpBarcodeId).HasColumnName("tblTmpBarcodeId");

                entity.Property(e => e.Whid).HasColumnName("WHId");

                entity.HasOne(d => d.BuyOrderItem)
                    .WithMany(p => p.WsbuyOrderItemSerials)
                    .HasForeignKey(d => d.BuyOrderItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderItemSerials_WSBuyOrderItem");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsbuyOrderItemSerialsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSBuyOrderItemSerials_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsbuyOrderItemSerials)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderItemSerials_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsbuyOrderItemSerials)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSBuyOrderItemSerials_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsbuyOrderItemSerialsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderItemSerials_Users");

                entity.HasOne(d => d.Wh)
                    .WithMany(p => p.WsbuyOrderItemSerials)
                    .HasForeignKey(d => d.Whid)
                    .HasConstraintName("FK_WSBuyOrderItemSerials_WsWareHouse");
            });

            modelBuilder.Entity<WsbuyOrderItemSerialsLang>(entity =>
            {
                entity.ToTable("WSBuyOrderItemSerials_Lang");

                entity.Property(e => e.WsbuyOrderItemSerialsLangId).HasColumnName("WSBuyOrderItemSerialsLangID");

                entity.Property(e => e.BuyOrderItemSerialId).HasColumnName("BuyOrderItemSerialID");

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.InfoI).HasMaxLength(200);

                entity.Property(e => e.InfoIi)
                    .HasColumnName("InfoII")
                    .HasMaxLength(200);

                entity.Property(e => e.InfoIii)
                    .HasColumnName("InfoIII")
                    .HasMaxLength(200);

                entity.Property(e => e.InfoIv)
                    .HasColumnName("InfoIV")
                    .HasMaxLength(200);

                entity.Property(e => e.InfoV).HasMaxLength(200);

                entity.Property(e => e.InfoVi)
                    .HasColumnName("InfoVI")
                    .HasMaxLength(200);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.BuyOrderItemSerial)
                    .WithMany(p => p.WsbuyOrderItemSerialsLang)
                    .HasForeignKey(d => d.BuyOrderItemSerialId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderItemSerials_Lang_WSBuyOrderItemSerials");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsbuyOrderItemSerialsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderItemSerials_Lang_Languages");
            });

            modelBuilder.Entity<WsbuyOrderItems>(entity =>
            {
                entity.HasKey(e => e.BuyOrderItemId);

                entity.ToTable("WSBuyOrderItems");

                entity.HasIndex(e => e.BordIprdId)
                    .HasDatabaseName("IX_WSBuyOrderItems_PrdId");

                entity.HasIndex(e => e.BuyOrderId);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BordIcalculateTax).HasColumnName("bordICalculateTax");

                entity.Property(e => e.BordIcost)
                    .HasColumnName("bordICost")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BordIcurrencyUnitId).HasColumnName("bordICurrencyUnitId");

                entity.Property(e => e.BordIdescription)
                    .HasColumnName("bordIDescription")
                    .HasMaxLength(4000);

                entity.Property(e => e.BordIdiscount)
                    .HasColumnName("bordIDiscount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BordIdiscountI)
                    .HasColumnName("bordIDiscountI")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BordIdiscountIpercent)
                    .HasColumnName("bordIDiscountIPercent")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BordIdiscountPercent)
                    .HasColumnName("bordIDiscountPercent")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BordIfcr).HasColumnName("bordIFCR");

                entity.Property(e => e.BordIfcri).HasColumnName("bordIFCRI");

                entity.Property(e => e.BordIlinkAccItemId).HasColumnName("bordILinkAccItemId");

                entity.Property(e => e.BordInotInSum).HasColumnName("bordINotInSum");

                entity.Property(e => e.BordInotVisible).HasColumnName("bordINotVisible");

                entity.Property(e => e.BordIorderView).HasColumnName("bordIOrderView");

                entity.Property(e => e.BordIprdCostGroupId).HasColumnName("bordIPrdCostGroupID");

                entity.Property(e => e.BordIprdId).HasColumnName("bordIPrdId");

                entity.Property(e => e.BordIprdUnitId).HasColumnName("bordIPrdUnitId");

                entity.Property(e => e.BordIquantity).HasColumnName("bordIQuantity");

                entity.Property(e => e.BordIquantityDesc)
                    .HasColumnName("bordIQuantityDesc")
                    .HasMaxLength(1000);

                entity.Property(e => e.BordItax)
                    .HasColumnName("bordITax")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BordItaxIndex)
                    .HasColumnName("bordITaxIndex")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BordItotalCost)
                    .HasColumnName("bordITotalCost")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BordItracing)
                    .HasColumnName("bordITracing")
                    .HasMaxLength(200);

                entity.Property(e => e.BordIwhid).HasColumnName("bordIWHId");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.BordIcurrencyUnit)
                    .WithMany(p => p.WsbuyOrderItems)
                    .HasForeignKey(d => d.BordIcurrencyUnitId)
                    .HasConstraintName("FK_WSBuyOrderItems_WSCurrencyUnits");

                entity.HasOne(d => d.BordIprd)
                    .WithMany(p => p.WsbuyOrderItems)
                    .HasForeignKey(d => d.BordIprdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderItems_WSProducts");

                entity.HasOne(d => d.BordIprdUnit)
                    .WithMany(p => p.WsbuyOrderItems)
                    .HasForeignKey(d => d.BordIprdUnitId)
                    .HasConstraintName("FK_WSBuyOrderItems_WSProductUnits");

                entity.HasOne(d => d.BordIwh)
                    .WithMany(p => p.WsbuyOrderItems)
                    .HasForeignKey(d => d.BordIwhid)
                    .HasConstraintName("FK_WSBuyOrderItems_WSWareHouse");

                entity.HasOne(d => d.BuyOrder)
                    .WithMany(p => p.WsbuyOrderItems)
                    .HasForeignKey(d => d.BuyOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderItems_WSBuyOrder");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsbuyOrderItemsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSBuyOrderItems_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsbuyOrderItems)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderItems_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsbuyOrderItems)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSBuyOrderItems_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsbuyOrderItemsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderItems_Users");
            });

            modelBuilder.Entity<WsbuyOrderItemsLang>(entity =>
            {
                entity.ToTable("WSBuyOrderItems_Lang");

                entity.Property(e => e.WsbuyOrderItemsLangId).HasColumnName("WSBuyOrderItemsLangID");

                entity.Property(e => e.BordIdescription)
                    .HasColumnName("bordIDescription")
                    .HasMaxLength(4000);

                entity.Property(e => e.BordIquantityDesc)
                    .HasColumnName("bordIQuantityDesc")
                    .HasMaxLength(1000);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.BuyOrderItem)
                    .WithMany(p => p.WsbuyOrderItemsLang)
                    .HasForeignKey(d => d.BuyOrderItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderItems_Lang_WSBuyOrderItems");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsbuyOrderItemsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderItems_Lang_Languages");
            });

            modelBuilder.Entity<WsbuyOrderLang>(entity =>
            {
                entity.ToTable("WSBuyOrder_Lang");

                entity.Property(e => e.WsbuyOrderLangId).HasColumnName("WSBuyOrderLangID");

                entity.Property(e => e.BordDiscountTitle)
                    .HasColumnName("bordDiscountTitle")
                    .HasMaxLength(100);

                entity.Property(e => e.BordNote)
                    .HasColumnName("bordNote")
                    .HasMaxLength(300);

                entity.Property(e => e.BordSubject)
                    .HasColumnName("bordSubject")
                    .HasMaxLength(100);

                entity.Property(e => e.BordTitle)
                    .HasColumnName("bordTitle")
                    .HasMaxLength(100);

                entity.Property(e => e.BordTotalAmountStr)
                    .HasColumnName("bordTotalAmountStr")
                    .HasMaxLength(1000);

                entity.Property(e => e.BordcmpTitle)
                    .HasColumnName("bordcmpTitle")
                    .HasMaxLength(100);

                entity.Property(e => e.BuyOrderId).HasColumnName("BuyOrderID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.BuyOrder)
                    .WithMany(p => p.WsbuyOrderLang)
                    .HasForeignKey(d => d.BuyOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrder_Lang_WSBuyOrder");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsbuyOrderLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrder_Lang_Languages");
            });

            modelBuilder.Entity<WsbuyOrderOpr>(entity =>
            {
                entity.HasKey(e => e.BuyOrderOprId);

                entity.ToTable("WSBuyOrderOpr");

                entity.Property(e => e.BuyOrderOprId)
                    .HasColumnName("BuyOrderOprID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsbuyOrderOpr)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSBuyOrderOpr_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsbuyOrderOpr)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSBuyOrderOpr_Languages");
            });

            modelBuilder.Entity<WsbuyOrderOprLang>(entity =>
            {
                entity.ToTable("WSBuyOrderOpr_Lang");

                entity.Property(e => e.WsbuyOrderOprLangId).HasColumnName("WSBuyOrderOprLangID");

                entity.Property(e => e.BuyOrderOprId).HasColumnName("BuyOrderOprID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.BuyOrderOpr)
                    .WithMany(p => p.WsbuyOrderOprLang)
                    .HasForeignKey(d => d.BuyOrderOprId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderOpr_Lang_WSBuyOrderOpr");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsbuyOrderOprLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderOpr_Lang_Languages");
            });

            modelBuilder.Entity<WsbuyOrderPaymentTypes>(entity =>
            {
                entity.HasKey(e => e.BuyOrderPaymentTypeId);

                entity.ToTable("WSBuyOrderPaymentTypes");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BordpayType)
                    .IsRequired()
                    .HasColumnName("bordpayType")
                    .HasMaxLength(150);

                entity.Property(e => e.BordpayTypeDescription)
                    .HasColumnName("bordpayTypeDescription")
                    .HasMaxLength(100);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsbuyOrderPaymentTypesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSBuyOrderPaymentTypes_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsbuyOrderPaymentTypes)
                    .HasForeignKey(d => d.Fpid)
                    .HasConstraintName("FK_WSBuyOrderPaymentTypes_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsbuyOrderPaymentTypes)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSBuyOrderPaymentTypes_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsbuyOrderPaymentTypesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderPaymentTypes_Users");
            });

            modelBuilder.Entity<WsbuyOrderPaymentTypesLang>(entity =>
            {
                entity.ToTable("WSBuyOrderPaymentTypes_Lang");

                entity.Property(e => e.WsbuyOrderPaymentTypesLangId).HasColumnName("WSBuyOrderPaymentTypesLangID");

                entity.Property(e => e.BordpayType)
                    .IsRequired()
                    .HasColumnName("bordpayType")
                    .HasMaxLength(150);

                entity.Property(e => e.BordpayTypeDescription)
                    .HasColumnName("bordpayTypeDescription")
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.BuyOrderPaymentType)
                    .WithMany(p => p.WsbuyOrderPaymentTypesLang)
                    .HasForeignKey(d => d.BuyOrderPaymentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderPaymentTypes_Lang_WSBuyOrderPaymentTypes");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsbuyOrderPaymentTypesLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderPaymentTypes_Lang_Languages");
            });

            modelBuilder.Entity<WsbuyOrderPayments>(entity =>
            {
                entity.HasKey(e => e.BuyOrderPaymentId);

                entity.ToTable("WSBuyOrderPayments");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BordpayAmount)
                    .HasColumnName("bordpayAmount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BordpayDescription)
                    .HasColumnName("bordpayDescription")
                    .HasMaxLength(2000);

                entity.Property(e => e.BordpayDocAmount)
                    .HasColumnName("bordpayDocAmount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BordpayDocDate)
                    .HasColumnName("bordpayDocDate")
                    .HasMaxLength(8);

                entity.Property(e => e.BordpayDocDateTime)
                    .HasColumnName("bordpayDocDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.BordpayDocId).HasColumnName("bordpayDocId");

                entity.Property(e => e.BordpayDocNumber)
                    .HasColumnName("bordpayDocNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.BordpayDocTypeId).HasColumnName("bordpayDocTypeId");

                entity.Property(e => e.BordpayFirstRegisteDate)
                    .HasColumnName("bordpayFirstRegisteDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.BordpayFirstRegisteDatePersian)
                    .HasColumnName("bordpayFirstRegisteDatePersian")
                    .HasMaxLength(8);

                entity.Property(e => e.BordpayFirstRegisterUserId).HasColumnName("bordpayFirstRegisterUserId");

                entity.Property(e => e.BordpayLinkAccDetailId).HasColumnName("bordpayLinkAccDetailId");

                entity.Property(e => e.BordpayLinkAccHeaderId).HasColumnName("bordpayLinkAccHeaderId");

                entity.Property(e => e.BordpayLinkAccHeaderNumber)
                    .HasColumnName("bordpayLinkAccHeaderNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.BordpayLinkAccVoucherId).HasColumnName("bordpayLinkAccVoucherId");

                entity.Property(e => e.BordpayLinkAccVoucherNumber)
                    .HasColumnName("bordpayLinkAccVoucherNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.BordpayOrderId).HasColumnName("bordpayOrderId");

                entity.Property(e => e.BordpayTypeId).HasColumnName("bordpayTypeId");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ImportDate)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.ImportDateTime).HasColumnType("datetime");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.BordpayFirstRegisterUser)
                    .WithMany(p => p.WsbuyOrderPaymentsBordpayFirstRegisterUser)
                    .HasForeignKey(d => d.BordpayFirstRegisterUserId)
                    .HasConstraintName("FK_WSBuyOrderPayments_Users");

                entity.HasOne(d => d.BordpayOrder)
                    .WithMany(p => p.WsbuyOrderPayments)
                    .HasForeignKey(d => d.BordpayOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderPayments_WSBuyOrder");

                entity.HasOne(d => d.BordpayType)
                    .WithMany(p => p.WsbuyOrderPayments)
                    .HasForeignKey(d => d.BordpayTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderPayments_WSBuyOrderPaymentTypes");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsbuyOrderPaymentsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSBuyOrderPayments_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsbuyOrderPayments)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderPayments_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsbuyOrderPayments)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSBuyOrderPayments_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsbuyOrderPaymentsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderPayments_Users1");
            });

            modelBuilder.Entity<WsbuyOrderPaymentsLang>(entity =>
            {
                entity.ToTable("WSBuyOrderPayments_Lang");

                entity.Property(e => e.WsbuyOrderPaymentsLangId).HasColumnName("WSBuyOrderPaymentsLangID");

                entity.Property(e => e.BordpayDescription)
                    .HasColumnName("bordpayDescription")
                    .HasMaxLength(2000);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.BuyOrderPayment)
                    .WithMany(p => p.WsbuyOrderPaymentsLang)
                    .HasForeignKey(d => d.BuyOrderPaymentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderPayments_Lang_WSBuyOrderPayments");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsbuyOrderPaymentsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderPayments_Lang_Languages");
            });

            modelBuilder.Entity<WsbuyOrderStatus>(entity =>
            {
                entity.HasKey(e => e.BuyOrderStatusId);

                entity.ToTable("WSBuyOrderStatus");

                entity.Property(e => e.BuyOrderStatusId).ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyOrderStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsbuyOrderStatusFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSBuyOrderStatus_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsbuyOrderStatus)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderStatus_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsbuyOrderStatus)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSBuyOrderStatus_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsbuyOrderStatusUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderStatus_Users");
            });

            modelBuilder.Entity<WsbuyOrderStatusLang>(entity =>
            {
                entity.ToTable("WSBuyOrderStatus_Lang");

                entity.Property(e => e.WsbuyOrderStatusLangId).HasColumnName("WSBuyOrderStatusLangID");

                entity.Property(e => e.BuyOrderStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.BuyOrderStatusNavigation)
                    .WithMany(p => p.WsbuyOrderStatusLang)
                    .HasForeignKey(d => d.BuyOrderStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderStatus_Lang_WSBuyOrderStatus");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsbuyOrderStatusLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSBuyOrderStatus_Lang_Languages");
            });

            modelBuilder.Entity<WscreditDuration>(entity =>
            {
                entity.HasKey(e => e.CreditDurationId);

                entity.ToTable("WSCreditDuration");

                entity.Property(e => e.CreditDurationId).HasColumnName("CreditDurationID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CreditDuration).HasMaxLength(200);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WscreditDurationFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSCreditDuration_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WscreditDuration)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSCreditDuration_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WscreditDuration)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSCreditDuration_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WscreditDurationUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSCreditDuration_Users");
            });

            modelBuilder.Entity<WscreditDurationLang>(entity =>
            {
                entity.ToTable("WSCreditDuration_Lang");

                entity.Property(e => e.WscreditDurationLangId).HasColumnName("WSCreditDurationLangID");

                entity.Property(e => e.CreditDuration).HasMaxLength(200);

                entity.Property(e => e.CreditDurationId).HasColumnName("CreditDurationID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.CreditDurationNavigation)
                    .WithMany(p => p.WscreditDurationLang)
                    .HasForeignKey(d => d.CreditDurationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSCreditDuration_Lang_WSCreditDuration");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WscreditDurationLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSCreditDuration_Lang_Languages");
            });

            modelBuilder.Entity<WscurrencyUnits>(entity =>
            {
                entity.HasKey(e => e.CurrencyUnitId);

                entity.ToTable("WSCurrencyUnits");

                entity.Property(e => e.CurrencyUnitId).HasColumnName("CurrencyUnitID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyUnit)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CurrencyUnitEn).HasMaxLength(100);

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WscurrencyUnitsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSCurrencyUnits_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WscurrencyUnits)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSCurrencyUnits_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WscurrencyUnitsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSCurrencyUnits_Users");
            });

            modelBuilder.Entity<WscurrencyUnitsLang>(entity =>
            {
                entity.ToTable("WSCurrencyUnits_Lang");

                entity.Property(e => e.WscurrencyUnitsLangId).HasColumnName("WSCurrencyUnitsLangID");

                entity.Property(e => e.CurrencyUnit)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CurrencyUnitEn).HasMaxLength(100);

                entity.Property(e => e.CurrencyUnitId).HasColumnName("CurrencyUnitID");

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.CurrencyUnitNavigation)
                    .WithMany(p => p.WscurrencyUnitsLang)
                    .HasForeignKey(d => d.CurrencyUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSCurrencyUnits_Lang_WSCurrencyUnits");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WscurrencyUnitsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSCurrencyUnits_Lang_Languages");
            });

            modelBuilder.Entity<WsdeliveryTime>(entity =>
            {
                entity.HasKey(e => e.DeliveryTimeId);

                entity.ToTable("WSDeliveryTime");

                entity.Property(e => e.DeliveryTimeId).HasColumnName("DeliveryTimeID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryTime).HasMaxLength(200);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsdeliveryTimeFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSDeliveryTime_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsdeliveryTime)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDeliveryTime_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsdeliveryTime)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSDeliveryTime_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsdeliveryTimeUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDeliveryTime_Users");
            });

            modelBuilder.Entity<WsdeliveryTimeLang>(entity =>
            {
                entity.ToTable("WSDeliveryTime_Lang");

                entity.Property(e => e.WsdeliveryTimeLangId).HasColumnName("WSDeliveryTimeLangID");

                entity.Property(e => e.DeliveryTime).HasMaxLength(200);

                entity.Property(e => e.DeliveryTimeId).HasColumnName("DeliveryTimeID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.DeliveryTimeNavigation)
                    .WithMany(p => p.WsdeliveryTimeLang)
                    .HasForeignKey(d => d.DeliveryTimeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDeliveryTime_Lang_WSDeliveryTime");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsdeliveryTimeLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDeliveryTime_Lang_Languages");
            });

            modelBuilder.Entity<Wsdoc>(entity =>
            {
                entity.HasKey(e => e.DocId);

                entity.ToTable("WSDoc");

                entity.HasIndex(e => e.CompanyId);

                entity.HasIndex(e => e.DocDateTime);

                entity.HasIndex(e => e.Whid);

                entity.HasIndex(e => e.WhidI);

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BijakNumber).HasMaxLength(50);

                entity.Property(e => e.CarNumber).HasMaxLength(50);

                entity.Property(e => e.CmpTitle)
                    .HasColumnName("cmpTitle")
                    .HasMaxLength(300);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.DocDate)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.DocDateTime).HasColumnType("datetime");

                entity.Property(e => e.DocLinkAccCode).HasMaxLength(50);

                entity.Property(e => e.DocLinkAccDocNumber).HasMaxLength(50);

                entity.Property(e => e.DocLinkAccVoucherNumber).HasMaxLength(50);

                entity.Property(e => e.DriverName).HasMaxLength(100);

                entity.Property(e => e.DriverTel).HasMaxLength(50);

                entity.Property(e => e.FactorNumber).HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.FreightName).HasMaxLength(100);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.SendAddress).HasMaxLength(500);

                entity.Property(e => e.SenderName).HasMaxLength(500);

                entity.Property(e => e.Whid).HasColumnName("WHId");

                entity.Property(e => e.WhidI).HasColumnName("WHIdI");

                entity.HasOne(d => d.BuyOrder)
                    .WithMany(p => p.Wsdoc)
                    .HasForeignKey(d => d.BuyOrderId)
                    .HasConstraintName("FK_WSDoc_WSBuyOrder");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Wsdoc)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_WSDoc_CrmCompany");

                entity.HasOne(d => d.CompanyPerson)
                    .WithMany(p => p.Wsdoc)
                    .HasForeignKey(d => d.CompanyPersonId)
                    .HasConstraintName("FK_WSDoc_CrmCompanyPersons");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsdocFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSDoc_Users1");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.Wsdoc)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDoc_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.Wsdoc)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSDoc_Languages");

                entity.HasOne(d => d.Opr)
                    .WithMany(p => p.Wsdoc)
                    .HasForeignKey(d => d.OprId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDoc_WSDocOpr");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.Wsdoc)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("FK_WSDoc_WSOrder");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Wsdoc)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_WSDoc_CrmProjects");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsdocUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDoc_Users");

                entity.HasOne(d => d.Wh)
                    .WithMany(p => p.Wsdoc)
                    .HasForeignKey(d => d.Whid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDoc_WsWareHouse");
            });

            modelBuilder.Entity<WsdocItemSerials>(entity =>
            {
                entity.HasKey(e => e.DocItemSerialId);

                entity.ToTable("WSDocItemSerials");

                entity.Property(e => e.DocItemSerialId).HasColumnName("DocItemSerialID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.DocIslinkAccItemSerialId).HasColumnName("DocISLinkAccItemSerialId");

                entity.Property(e => e.ExpDate).HasColumnType("datetime");

                entity.Property(e => e.ExpDatePersian).HasMaxLength(8);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.InfoI).HasMaxLength(200);

                entity.Property(e => e.InfoIi)
                    .HasColumnName("InfoII")
                    .HasMaxLength(200);

                entity.Property(e => e.InfoIii)
                    .HasColumnName("InfoIII")
                    .HasMaxLength(200);

                entity.Property(e => e.InfoIv)
                    .HasColumnName("InfoIV")
                    .HasMaxLength(200);

                entity.Property(e => e.InfoV).HasMaxLength(200);

                entity.Property(e => e.InfoVi)
                    .HasColumnName("InfoVI")
                    .HasMaxLength(200);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Serial).HasMaxLength(50);

                entity.Property(e => e.TblTmpBarcodeId).HasColumnName("tblTmpBarcodeId");

                entity.Property(e => e.Whid).HasColumnName("WHId");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsdocItemSerialsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSDocItemSerials_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsdocItemSerials)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDocItemSerials_WSFinancialPeriod");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.WsdocItemSerials)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDocItemSerials_WSDocItems");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsdocItemSerials)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSDocItemSerials_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsdocItemSerialsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDocItemSerials_Users");

                entity.HasOne(d => d.Wh)
                    .WithMany(p => p.WsdocItemSerials)
                    .HasForeignKey(d => d.Whid)
                    .HasConstraintName("FK_WSDocItemSerials_WsWareHouse");
            });

            modelBuilder.Entity<WsdocItemSerialsLang>(entity =>
            {
                entity.ToTable("WSDocItemSerials_Lang");

                entity.Property(e => e.WsdocItemSerialsLangId).HasColumnName("WSDocItemSerialsLangID");

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.DocItemSerialId).HasColumnName("DocItemSerialID");

                entity.Property(e => e.InfoI).HasMaxLength(200);

                entity.Property(e => e.InfoIi)
                    .HasColumnName("InfoII")
                    .HasMaxLength(200);

                entity.Property(e => e.InfoIii)
                    .HasColumnName("InfoIII")
                    .HasMaxLength(200);

                entity.Property(e => e.InfoIv)
                    .HasColumnName("InfoIV")
                    .HasMaxLength(200);

                entity.Property(e => e.InfoV).HasMaxLength(200);

                entity.Property(e => e.InfoVi)
                    .HasColumnName("InfoVI")
                    .HasMaxLength(200);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.DocItemSerial)
                    .WithMany(p => p.WsdocItemSerialsLang)
                    .HasForeignKey(d => d.DocItemSerialId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDocItemSerials_Lang_WSDocItemSerials");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsdocItemSerialsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDocItemSerials_Lang_Languages");
            });

            modelBuilder.Entity<WsdocItems>(entity =>
            {
                entity.HasKey(e => e.DocItemId);

                entity.ToTable("WSDocItems");

                entity.HasIndex(e => e.DocId);

                entity.HasIndex(e => e.PrdId);

                entity.Property(e => e.DocItemId).HasColumnName("DocItemID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cost).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.DocIlinkAccItemId).HasColumnName("DocILinkAccItemId");

                entity.Property(e => e.Fcr).HasColumnName("FCR");

                entity.Property(e => e.Fcri).HasColumnName("FCRI");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Tracing).HasMaxLength(200);

                entity.Property(e => e.Whid).HasColumnName("WHId");

                entity.HasOne(d => d.CostNavigation)
                    .WithMany(p => p.WsdocItems)
                    .HasForeignKey(d => d.CostId)
                    .HasConstraintName("FK_WSDocItems_WSProductCost");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.WsdocItems)
                    .HasForeignKey(d => d.DocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDocItems_WSDoc");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsdocItemsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSDocItems_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsdocItems)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDocItems_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsdocItems)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSDocItems_Languages");

                entity.HasOne(d => d.Prd)
                    .WithMany(p => p.WsdocItems)
                    .HasForeignKey(d => d.PrdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDocItems_WSProducts");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsdocItemsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDocItems_Users");

                entity.HasOne(d => d.Wh)
                    .WithMany(p => p.WsdocItems)
                    .HasForeignKey(d => d.Whid)
                    .HasConstraintName("FK_WSDocItems_WsWareHouse");
            });

            modelBuilder.Entity<WsdocItemsLang>(entity =>
            {
                entity.ToTable("WSDocItems_Lang");

                entity.Property(e => e.WsdocItemsLangId).HasColumnName("WSDocItemsLangID");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.DocItemId).HasColumnName("DocItemID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.DocItem)
                    .WithMany(p => p.WsdocItemsLang)
                    .HasForeignKey(d => d.DocItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDocItems_Lang_WSDocItems");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsdocItemsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDocItems_Lang_Languages");
            });

            modelBuilder.Entity<WsdocLang>(entity =>
            {
                entity.ToTable("WSDoc_Lang");

                entity.Property(e => e.WsdocLangId).HasColumnName("WSDocLangID");

                entity.Property(e => e.CmpTitle)
                    .HasColumnName("cmpTitle")
                    .HasMaxLength(300);

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DriverName).HasMaxLength(100);

                entity.Property(e => e.FreightName).HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.SendAddress).HasMaxLength(500);

                entity.Property(e => e.SenderName).HasMaxLength(500);

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.WsdocLang)
                    .HasForeignKey(d => d.DocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDoc_Lang_WSDoc");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsdocLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDoc_Lang_Languages");
            });

            modelBuilder.Entity<WsdocOpr>(entity =>
            {
                entity.HasKey(e => e.DocOprId);

                entity.ToTable("WSDocOpr");

                entity.Property(e => e.DocOprId)
                    .HasColumnName("DocOprID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsdocOpr)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSDocOpr_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsdocOpr)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSDocOpr_Languages");
            });

            modelBuilder.Entity<WsdocOprLang>(entity =>
            {
                entity.ToTable("WSDocOpr_Lang");

                entity.Property(e => e.WsdocOprLangId).HasColumnName("WSDocOprLangID");

                entity.Property(e => e.DocOprId).HasColumnName("DocOprID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.DocOpr)
                    .WithMany(p => p.WsdocOprLang)
                    .HasForeignKey(d => d.DocOprId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDocOpr_Lang_WSDocOpr");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsdocOprLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSDocOpr_Lang_Languages");
            });

            modelBuilder.Entity<WsfinancialPeriod>(entity =>
            {
                entity.ToTable("WSFinancialPeriod");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.Fdate)
                    .HasColumnName("FDate")
                    .HasMaxLength(8);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FpLinkAccFpid).HasColumnName("FpLinkAccFPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Tdate)
                    .HasColumnName("TDate")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsfinancialPeriodFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSFinancialPeriod_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsfinancialPeriod)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSFinancialPeriod_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsfinancialPeriodUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSFinancialPeriod_Users");
            });

            modelBuilder.Entity<Wsguaranty>(entity =>
            {
                entity.HasKey(e => e.GuarantyId);

                entity.ToTable("WSGuaranty");

                entity.Property(e => e.GuarantyId).HasColumnName("GuarantyID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guaranty)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsguarantyFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSGuaranty_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.Wsguaranty)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSGuaranty_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.Wsguaranty)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSGuaranty_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsguarantyUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSGuaranty_Users");
            });

            modelBuilder.Entity<WsguarantyLang>(entity =>
            {
                entity.ToTable("WSGuaranty_Lang");

                entity.Property(e => e.WsguarantyLangId).HasColumnName("WSGuarantyLangID");

                entity.Property(e => e.Guaranty)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.GuarantyId).HasColumnName("GuarantyID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.GuarantyNavigation)
                    .WithMany(p => p.WsguarantyLang)
                    .HasForeignKey(d => d.GuarantyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSGuaranty_Lang_WSGuaranty");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsguarantyLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSGuaranty_Lang_Languages");
            });

            modelBuilder.Entity<WslinkedProducts>(entity =>
            {
                entity.HasKey(e => e.LinkedProductId);

                entity.ToTable("WSLinkedProducts");

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WslinkedProductsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSLinkedProducts_FirstRegisterUsers");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WslinkedProducts)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSLinkedProducts_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WslinkedProducts)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSLinkedProducts_Languages");

                entity.HasOne(d => d.LinkedPrd)
                    .WithMany(p => p.WslinkedProductsLinkedPrd)
                    .HasForeignKey(d => d.LinkedPrdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSLinkedProducts_WSProductsForLinked");

                entity.HasOne(d => d.Prd)
                    .WithMany(p => p.WslinkedProductsPrd)
                    .HasForeignKey(d => d.PrdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSLinkedProducts_WSProducts");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WslinkedProductsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSLinkedProducts_Users");
            });

            modelBuilder.Entity<Wslogo>(entity =>
            {
                entity.HasKey(e => e.LogoId);

                entity.ToTable("WSLogo");

                entity.Property(e => e.LogoId).HasColumnName("LogoID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Logo)
                    .IsRequired()
                    .HasColumnType("image");

                entity.Property(e => e.LogoDescription).HasMaxLength(50);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WslogoFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSLogo_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.Wslogo)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSLogo_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.Wslogo)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSLogo_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WslogoUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSLogo_Users");
            });

            modelBuilder.Entity<WslogoLang>(entity =>
            {
                entity.ToTable("WSLogo_Lang");

                entity.Property(e => e.WslogoLangId).HasColumnName("WSLogoLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LogoDescription).HasMaxLength(50);

                entity.Property(e => e.LogoId).HasColumnName("LogoID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WslogoLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSLogo_Lang_Languages");

                entity.HasOne(d => d.Logo)
                    .WithMany(p => p.WslogoLang)
                    .HasForeignKey(d => d.LogoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSLogo_Lang_WSLogo");
            });

            modelBuilder.Entity<Wsorder>(entity =>
            {
                entity.HasKey(e => e.OrderId);

                entity.ToTable("WSOrder");

                entity.HasIndex(e => e.OrdCompanyId)
                    .HasDatabaseName("IX_WSOrder_CompanyId");

                entity.HasIndex(e => e.OrdCompanyPersonId)
                    .HasDatabaseName("IX_WSOrder_CompanyPersonId");

                entity.HasIndex(e => e.OrdProjectId)
                    .HasDatabaseName("IX_WSOrder_ProjectId");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.OrdAccountNumberI)
                    .HasColumnName("ordAccountNumberI")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdAccountNumberIi)
                    .HasColumnName("ordAccountNumberII")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdAccountShabaNumberI)
                    .HasColumnName("ordAccountShabaNumberI")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdAccountShabaNumberIi)
                    .HasColumnName("ordAccountShabaNumberII")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdCalculateTax).HasColumnName("ordCalculateTax");

                entity.Property(e => e.OrdCompanyId).HasColumnName("ordCompanyId");

                entity.Property(e => e.OrdCompanyPersonId).HasColumnName("ordCompanyPersonId");

                entity.Property(e => e.OrdDate)
                    .IsRequired()
                    .HasColumnName("ordDate")
                    .HasMaxLength(8);

                entity.Property(e => e.OrdDateTime)
                    .HasColumnName("ordDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrdDay)
                    .HasColumnName("ordDay")
                    .HasMaxLength(50);

                entity.Property(e => e.OrdDeliveryDate)
                    .HasColumnName("ordDeliveryDate")
                    .HasMaxLength(8);

                entity.Property(e => e.OrdDeliveryDateTime)
                    .HasColumnName("ordDeliveryDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrdDeliveryTime)
                    .HasColumnName("ordDeliveryTime")
                    .HasMaxLength(10);

                entity.Property(e => e.OrdDescriptionI)
                    .HasColumnName("ordDescriptionI")
                    .HasMaxLength(4000);

                entity.Property(e => e.OrdDescriptionId).HasColumnName("ordDescriptionId");

                entity.Property(e => e.OrdDescriptionIi)
                    .HasColumnName("ordDescriptionII")
                    .HasMaxLength(4000);

                entity.Property(e => e.OrdDiscount)
                    .HasColumnName("ordDiscount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdDiscountPercent)
                    .HasColumnName("ordDiscountPercent")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdDiscountTitle)
                    .HasColumnName("ordDiscountTitle")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdFirstRegisterUserId).HasColumnName("ordFirstRegisterUserId");

                entity.Property(e => e.OrdGuarantyId).HasColumnName("ordGuarantyId");

                entity.Property(e => e.OrdImportDate)
                    .HasColumnName("ordImportDate")
                    .HasMaxLength(8);

                entity.Property(e => e.OrdImportDateTime)
                    .HasColumnName("ordImportDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrdInstallAmount)
                    .HasColumnName("ordInstallAmount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdIsFixed).HasColumnName("ordIsFixed");

                entity.Property(e => e.OrdIsVerified).HasColumnName("ordIsVerified");

                entity.Property(e => e.OrdItemCount).HasColumnName("ordItemCount");

                entity.Property(e => e.OrdItemsAmount)
                    .HasColumnName("ordItemsAmount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdLinkAccCode)
                    .HasColumnName("ordLinkAccCode")
                    .HasMaxLength(50);

                entity.Property(e => e.OrdLinkAccCodeId).HasColumnName("ordLinkAccCodeId");

                entity.Property(e => e.OrdLinkAccOrderId).HasColumnName("ordLinkAccOrderId");

                entity.Property(e => e.OrdLinkAccOrderNumber)
                    .HasColumnName("ordLinkAccOrderNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.OrdLinkAccVoucherId).HasColumnName("ordLinkAccVoucherId");

                entity.Property(e => e.OrdLinkAccVoucherNumber)
                    .HasColumnName("ordLinkAccVoucherNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.OrdLlogoId).HasColumnName("ordLLogoId");

                entity.Property(e => e.OrdNote)
                    .HasColumnName("ordNote")
                    .HasMaxLength(4000);

                entity.Property(e => e.OrdNumber).HasColumnName("ordNumber");

                entity.Property(e => e.OrdPrintFormatId).HasColumnName("ordPrintFormatId");

                entity.Property(e => e.OrdProjectId).HasColumnName("ordProjectId");

                entity.Property(e => e.OrdReferUserId).HasColumnName("ordReferUserId");

                entity.Property(e => e.OrdRlogoId).HasColumnName("ordRLogoId");

                entity.Property(e => e.OrdRound)
                    .HasColumnName("ordRound")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdSerial)
                    .HasColumnName("ordSerial")
                    .HasMaxLength(50);

                entity.Property(e => e.OrdSettlementTypeId).HasColumnName("ordSettlementTypeId");

                entity.Property(e => e.OrdSignatureId).HasColumnName("ordSignatureId");

                entity.Property(e => e.OrdSigningI)
                    .HasColumnName("ordSigningI")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdSigningIi)
                    .HasColumnName("ordSigningII")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdSigningIii)
                    .HasColumnName("ordSigningIII")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdSpecialWord)
                    .HasColumnName("ordSpecialWord")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdStatusId)
                    .HasColumnName("ordStatusId")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.OrdSubject)
                    .HasColumnName("ordSubject")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdSumAmount)
                    .HasColumnName("ordSumAmount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdTax)
                    .HasColumnName("ordTax")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdTaxIndex)
                    .HasColumnName("ordTaxIndex")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdTime)
                    .HasColumnName("ordTime")
                    .HasMaxLength(50);

                entity.Property(e => e.OrdTitle)
                    .HasColumnName("ordTitle")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdTotalAmount)
                    .HasColumnName("ordTotalAmount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdTotalAmountStr)
                    .HasColumnName("ordTotalAmountStr")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdTransportation)
                    .HasColumnName("ordTransportation")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdVerificationWorkFlowId).HasColumnName("ordVerificationWorkFlowId");

                entity.Property(e => e.OrdVerifiedRegisterDate)
                    .HasColumnName("ordVerifiedRegisterDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OrdVerifiedRegisterDatePersian)
                    .HasColumnName("ordVerifiedRegisterDatePersian")
                    .HasMaxLength(8);

                entity.Property(e => e.OrdVerifierId).HasColumnName("ordVerifierId");

                entity.Property(e => e.OrdVerifierRequestId).HasColumnName("ordVerifierRequestId");

                entity.Property(e => e.OrdcmpTitle)
                    .HasColumnName("ordcmpTitle")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrderOprId).HasColumnName("OrderOprID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsorderFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSOrder_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.Wsorder)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrder_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.Wsorder)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSOrder_Languages");

                entity.HasOne(d => d.OrdCompany)
                    .WithMany(p => p.Wsorder)
                    .HasForeignKey(d => d.OrdCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrder_CrmCompany");

                entity.HasOne(d => d.OrdCompanyPerson)
                    .WithMany(p => p.Wsorder)
                    .HasForeignKey(d => d.OrdCompanyPersonId)
                    .HasConstraintName("FK_WSOrder_CrmCompanyPersons");

                entity.HasOne(d => d.OrdFirstRegisterUser)
                    .WithMany(p => p.WsorderOrdFirstRegisterUser)
                    .HasForeignKey(d => d.OrdFirstRegisterUserId)
                    .HasConstraintName("FK_WSOrder_Users2");

                entity.HasOne(d => d.OrdGuaranty)
                    .WithMany(p => p.Wsorder)
                    .HasForeignKey(d => d.OrdGuarantyId)
                    .HasConstraintName("FK_WSOrder_WSGuaranty");

                entity.HasOne(d => d.OrdLlogo)
                    .WithMany(p => p.WsorderOrdLlogo)
                    .HasForeignKey(d => d.OrdLlogoId)
                    .HasConstraintName("FK_WSOrder_WSLogo1");

                entity.HasOne(d => d.OrdPrintFormat)
                    .WithMany(p => p.Wsorder)
                    .HasForeignKey(d => d.OrdPrintFormatId)
                    .HasConstraintName("FK_WSOrder_PrintFormat");

                entity.HasOne(d => d.OrdProject)
                    .WithMany(p => p.Wsorder)
                    .HasForeignKey(d => d.OrdProjectId)
                    .HasConstraintName("FK_WSOrder_CrmProjects");

                entity.HasOne(d => d.OrdReferUser)
                    .WithMany(p => p.WsorderOrdReferUser)
                    .HasForeignKey(d => d.OrdReferUserId)
                    .HasConstraintName("FK_WSOrder_UsersReferId");

                entity.HasOne(d => d.OrdRlogo)
                    .WithMany(p => p.WsorderOrdRlogo)
                    .HasForeignKey(d => d.OrdRlogoId)
                    .HasConstraintName("FK_WSOrder_WSLogo");

                entity.HasOne(d => d.OrdSettlementType)
                    .WithMany(p => p.Wsorder)
                    .HasForeignKey(d => d.OrdSettlementTypeId)
                    .HasConstraintName("FK_WSOrder_WSSettlementType");

                entity.HasOne(d => d.OrdSignature)
                    .WithMany(p => p.Wsorder)
                    .HasForeignKey(d => d.OrdSignatureId)
                    .HasConstraintName("FK_WSOrder_WSSignature");

                entity.HasOne(d => d.OrdStatus)
                    .WithMany(p => p.Wsorder)
                    .HasForeignKey(d => d.OrdStatusId)
                    .HasConstraintName("FK_WSOrder_WSOrderStatus");

                entity.HasOne(d => d.OrdVerificationWorkFlow)
                    .WithMany(p => p.Wsorder)
                    .HasForeignKey(d => d.OrdVerificationWorkFlowId)
                    .HasConstraintName("FK_WSOrder_WSVerificationWorkFlows");

                entity.HasOne(d => d.OrdVerifier)
                    .WithMany(p => p.WsorderOrdVerifier)
                    .HasForeignKey(d => d.OrdVerifierId)
                    .HasConstraintName("FK_WSOrder_UsersVerifierId");

                entity.HasOne(d => d.OrdVerifierRequest)
                    .WithMany(p => p.WsorderOrdVerifierRequest)
                    .HasForeignKey(d => d.OrdVerifierRequestId)
                    .HasConstraintName("FK_WSOrder_UsersVerifierRequestId");

                entity.HasOne(d => d.OrderOpr)
                    .WithMany(p => p.Wsorder)
                    .HasForeignKey(d => d.OrderOprId)
                    .HasConstraintName("FK_WSOrder_WSOrderOpr");

                entity.HasOne(d => d.PreOrder)
                    .WithMany(p => p.Wsorder)
                    .HasForeignKey(d => d.PreOrderId)
                    .HasConstraintName("FK_WSOrder_WSPreOrder");

                entity.HasOne(d => d.PreOrderVerifier)
                    .WithMany(p => p.WsorderPreOrderVerifier)
                    .HasForeignKey(d => d.PreOrderVerifierId)
                    .HasConstraintName("FK_WSOrder_Users1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsorderUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrder_Users");
            });

            modelBuilder.Entity<WsorderCommissionPayTypes>(entity =>
            {
                entity.HasKey(e => e.OrderCommissionPayTypeId);

                entity.ToTable("WSOrderCommissionPayTypes");

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CommPayTypeDescription).HasMaxLength(2000);

                entity.Property(e => e.CommPayTypeTitle)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsorderCommissionPayTypesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderCommissionPayTypes_Users");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsorderCommissionPayTypes)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderCommissionPayTypes_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsorderCommissionPayTypesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderCommissionPayTypes_Users1");
            });

            modelBuilder.Entity<WsorderCommissionPayTypesLang>(entity =>
            {
                entity.HasKey(e => e.WsorderCommissionPayTypeLangId);

                entity.ToTable("WSOrderCommissionPayTypes_Lang");

                entity.Property(e => e.WsorderCommissionPayTypeLangId).HasColumnName("WSOrderCommissionPayTypeLangID");

                entity.Property(e => e.CommPayTypeDescription).HasMaxLength(2000);

                entity.Property(e => e.CommPayTypeTitle)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsorderCommissionPayTypesLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderCommissionPayTypes_Lang_Languages");

                entity.HasOne(d => d.OrderCommissionPayType)
                    .WithMany(p => p.WsorderCommissionPayTypesLang)
                    .HasForeignKey(d => d.OrderCommissionPayTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderCommissionPayTypes_Lang_WSOrderCommissionPayTypes");
            });

            modelBuilder.Entity<WsorderCommissions>(entity =>
            {
                entity.HasKey(e => e.OrderCommissionId);

                entity.ToTable("WSOrderCommissions");

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CommAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CommBaseAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CommBaseAmountDec).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CommBaseAmountDecDesc).HasMaxLength(4000);

                entity.Property(e => e.CommDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CommDateTime).HasColumnType("datetime");

                entity.Property(e => e.CommDesc).HasMaxLength(4000);

                entity.Property(e => e.CommEffectiveDatePersian).HasMaxLength(8);

                entity.Property(e => e.CommEffectiveDateTime).HasColumnType("datetime");

                entity.Property(e => e.CommIsPaidDatePersian).HasMaxLength(8);

                entity.Property(e => e.CommIsPaidDateTime).HasColumnType("datetime");

                entity.Property(e => e.CommRateDesc).HasMaxLength(4000);

                entity.Property(e => e.CommVerifiedDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CommVerifiedDateTime).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.CommCmp)
                    .WithMany(p => p.WsorderCommissions)
                    .HasForeignKey(d => d.CommCmpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderCommissions_CrmCompany");

                entity.HasOne(d => d.CommIsPaidPayRollUserCycle)
                    .WithMany(p => p.WsorderCommissions)
                    .HasForeignKey(d => d.CommIsPaidPayRollUserCycleId)
                    .HasConstraintName("FK_WSOrderCommissions_PayRollUserCycle");

                entity.HasOne(d => d.CommIsPaidUser)
                    .WithMany(p => p.WsorderCommissionsCommIsPaidUser)
                    .HasForeignKey(d => d.CommIsPaidUserId)
                    .HasConstraintName("FK_WSOrderCommissions_Users4");

                entity.HasOne(d => d.CommOrder)
                    .WithMany(p => p.WsorderCommissions)
                    .HasForeignKey(d => d.CommOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderCommissions_WSOrder");

                entity.HasOne(d => d.CommPayType)
                    .WithMany(p => p.WsorderCommissions)
                    .HasForeignKey(d => d.CommPayTypeId)
                    .HasConstraintName("FK_WSOrderCommissions_WSOrderCommissionPayTypes");

                entity.HasOne(d => d.CommUser)
                    .WithMany(p => p.WsorderCommissionsCommUser)
                    .HasForeignKey(d => d.CommUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderCommissions_Users");

                entity.HasOne(d => d.CommVerifierUser)
                    .WithMany(p => p.WsorderCommissionsCommVerifierUser)
                    .HasForeignKey(d => d.CommVerifierUserId)
                    .HasConstraintName("FK_WSOrderCommissions_Users3");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsorderCommissionsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderCommissions_Users2");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsorderCommissions)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderCommissions_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsorderCommissionsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderCommissions_Users1");
            });

            modelBuilder.Entity<WsorderCommissionsLang>(entity =>
            {
                entity.HasKey(e => e.WsorderCommissionLangId);

                entity.ToTable("WSOrderCommissions_Lang");

                entity.Property(e => e.WsorderCommissionLangId).HasColumnName("WSOrderCommissionLangID");

                entity.Property(e => e.CommBaseAmountDecDesc).HasMaxLength(4000);

                entity.Property(e => e.CommDesc).HasMaxLength(4000);

                entity.Property(e => e.CommRateDesc).HasMaxLength(4000);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsorderCommissionsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderCommissions_Lang_Languages");

                entity.HasOne(d => d.OrderCommission)
                    .WithMany(p => p.WsorderCommissionsLang)
                    .HasForeignKey(d => d.OrderCommissionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderCommissions_Lang_WSOrderCommissions");
            });

            modelBuilder.Entity<WsorderDefaultSetting>(entity =>
            {
                entity.HasKey(e => e.OrderSettingId);

                entity.ToTable("WSOrderDefaultSetting");

                entity.Property(e => e.OrderSettingId).HasColumnName("OrderSettingID");

                entity.Property(e => e.AccountNumberI).HasMaxLength(1000);

                entity.Property(e => e.AccountNumberIi)
                    .HasColumnName("AccountNumberII")
                    .HasMaxLength(1000);

                entity.Property(e => e.AccountShabaNumberI).HasMaxLength(1000);

                entity.Property(e => e.AccountShabaNumberIi)
                    .HasColumnName("AccountShabaNumberII")
                    .HasMaxLength(1000);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionI).HasMaxLength(4000);

                entity.Property(e => e.DescriptionIi)
                    .HasColumnName("DescriptionII")
                    .HasMaxLength(4000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Note).HasMaxLength(4000);

                entity.Property(e => e.OrderOprId).HasColumnName("OrderOprID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.SettingTitle).HasMaxLength(200);

                entity.Property(e => e.SigningI).HasMaxLength(1000);

                entity.Property(e => e.SigningIi)
                    .HasColumnName("SigningII")
                    .HasMaxLength(1000);

                entity.Property(e => e.SigningIii)
                    .HasColumnName("SigningIII")
                    .HasMaxLength(1000);

                entity.Property(e => e.SpecialWord).HasMaxLength(1000);

                entity.Property(e => e.Subject).HasMaxLength(1000);

                entity.Property(e => e.TaxIndex).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsorderDefaultSettingFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSOrderDefaultSetting_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsorderDefaultSetting)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderDefaultSetting_WSFinancialPeriod");

                entity.HasOne(d => d.Guaranty)
                    .WithMany(p => p.WsorderDefaultSetting)
                    .HasForeignKey(d => d.GuarantyId)
                    .HasConstraintName("FK_WSOrderDefaultSetting_WSGuaranty");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsorderDefaultSetting)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSOrderDefaultSetting_Languages");

                entity.HasOne(d => d.LeftLogo)
                    .WithMany(p => p.WsorderDefaultSettingLeftLogo)
                    .HasForeignKey(d => d.LeftLogoId)
                    .HasConstraintName("FK_WSOrderDefaultSetting_WSLogo1");

                entity.HasOne(d => d.OrderOpr)
                    .WithMany(p => p.WsorderDefaultSetting)
                    .HasForeignKey(d => d.OrderOprId)
                    .HasConstraintName("FK_WSOrderDefaultSetting_WSOrderOpr");

                entity.HasOne(d => d.PrintFormat)
                    .WithMany(p => p.WsorderDefaultSetting)
                    .HasForeignKey(d => d.PrintFormatId)
                    .HasConstraintName("FK_WSOrderDefaultSetting_PrintFormat");

                entity.HasOne(d => d.ReferUser)
                    .WithMany(p => p.WsorderDefaultSettingReferUser)
                    .HasForeignKey(d => d.ReferUserId)
                    .HasConstraintName("FK_WSOrderDefaultSetting_UsersReferId");

                entity.HasOne(d => d.RightLogo)
                    .WithMany(p => p.WsorderDefaultSettingRightLogo)
                    .HasForeignKey(d => d.RightLogoId)
                    .HasConstraintName("FK_WSOrderDefaultSetting_WSLogo");

                entity.HasOne(d => d.Signature)
                    .WithMany(p => p.WsorderDefaultSetting)
                    .HasForeignKey(d => d.SignatureId)
                    .HasConstraintName("FK_WSOrderDefaultSetting_WSSignature");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsorderDefaultSettingUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderDefaultSetting_Users");
            });

            modelBuilder.Entity<WsorderDefaultSettingLang>(entity =>
            {
                entity.ToTable("WSOrderDefaultSetting_Lang");

                entity.Property(e => e.WsorderDefaultSettingLangId).HasColumnName("WSOrderDefaultSettingLangID");

                entity.Property(e => e.DescriptionI).HasMaxLength(4000);

                entity.Property(e => e.DescriptionIi)
                    .HasColumnName("DescriptionII")
                    .HasMaxLength(4000);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Note).HasMaxLength(4000);

                entity.Property(e => e.OrderSettingId).HasColumnName("OrderSettingID");

                entity.Property(e => e.SettingTitle).HasMaxLength(200);

                entity.Property(e => e.SigningI).HasMaxLength(1000);

                entity.Property(e => e.SigningIi)
                    .HasColumnName("SigningII")
                    .HasMaxLength(1000);

                entity.Property(e => e.SigningIii)
                    .HasColumnName("SigningIII")
                    .HasMaxLength(1000);

                entity.Property(e => e.SpecialWord).HasMaxLength(1000);

                entity.Property(e => e.Subject).HasMaxLength(1000);

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsorderDefaultSettingLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderDefaultSetting_Lang_Languages");

                entity.HasOne(d => d.OrderSetting)
                    .WithMany(p => p.WsorderDefaultSettingLang)
                    .HasForeignKey(d => d.OrderSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderDefaultSetting_Lang_WSOrderDefaultSetting");
            });

            modelBuilder.Entity<WsorderItemSerials>(entity =>
            {
                entity.HasKey(e => e.OrderItemSerialId);

                entity.ToTable("WSOrderItemSerials");

                entity.Property(e => e.OrderItemSerialId).HasColumnName("OrderItemSerialID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Whid).HasColumnName("WHId");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsorderItemSerialsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSOrderItemSerials_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsorderItemSerials)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderItemSerials_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsorderItemSerials)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSOrderItemSerials_Languages");

                entity.HasOne(d => d.OrderItem)
                    .WithMany(p => p.WsorderItemSerials)
                    .HasForeignKey(d => d.OrderItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderItemSerials_WSOrderItems");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsorderItemSerialsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderItemSerials_Users");

                entity.HasOne(d => d.Wh)
                    .WithMany(p => p.WsorderItemSerials)
                    .HasForeignKey(d => d.Whid)
                    .HasConstraintName("FK_WSOrderItemSerials_WSWareHouse");
            });

            modelBuilder.Entity<WsorderItemSerialsLang>(entity =>
            {
                entity.ToTable("WSOrderItemSerials_Lang");

                entity.Property(e => e.WsorderItemSerialsLangId).HasColumnName("WSOrderItemSerialsLangID");

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.OrderItemSerialId).HasColumnName("OrderItemSerialID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsorderItemSerialsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderItemSerials_Lang_Languages");

                entity.HasOne(d => d.OrderItemSerial)
                    .WithMany(p => p.WsorderItemSerialsLang)
                    .HasForeignKey(d => d.OrderItemSerialId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderItemSerials_Lang_WSOrderItemSerials");
            });

            modelBuilder.Entity<WsorderItems>(entity =>
            {
                entity.HasKey(e => e.OrderItemId);

                entity.ToTable("WSOrderItems");

                entity.HasIndex(e => e.OrdIprdId)
                    .HasDatabaseName("IX_WSOrderItems_PrdId");

                entity.HasIndex(e => e.OrderId);

                entity.Property(e => e.OrderItemId).HasColumnName("OrderItemID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.OrdIcalculateTax).HasColumnName("ordICalculateTax");

                entity.Property(e => e.OrdIcurrencyUnitId).HasColumnName("ordICurrencyUnitId");

                entity.Property(e => e.OrdIdescription)
                    .HasColumnName("ordIDescription")
                    .HasMaxLength(4000);

                entity.Property(e => e.OrdIdiscount)
                    .HasColumnName("ordIDiscount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdIdiscountI)
                    .HasColumnName("ordIDiscountI")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdIdiscountIpercent)
                    .HasColumnName("ordIDiscountIPercent")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdIdiscountPercent)
                    .HasColumnName("ordIDiscountPercent")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdIfcr).HasColumnName("ordIFCR");

                entity.Property(e => e.OrdIfcri).HasColumnName("ordIFCRI");

                entity.Property(e => e.OrdIlinkAccItemId).HasColumnName("ordILinkAccItemId");

                entity.Property(e => e.OrdInotInSum).HasColumnName("ordINotInSum");

                entity.Property(e => e.OrdInotVisible).HasColumnName("ordINotVisible");

                entity.Property(e => e.OrdIorderView).HasColumnName("ordIOrderView");

                entity.Property(e => e.OrdIprdId).HasColumnName("ordIPrdId");

                entity.Property(e => e.OrdIprdPriceGroupId).HasColumnName("ordIPrdPriceGroupID");

                entity.Property(e => e.OrdIprdUnitId).HasColumnName("ordIPrdUnitId");

                entity.Property(e => e.OrdIprice)
                    .HasColumnName("ordIPrice")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdIpricePartI)
                    .HasColumnName("ordIPricePartI")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdIpricePartIi)
                    .HasColumnName("ordIPricePartII")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdIpricePartRate).HasColumnName("ordIPricePartRate");

                entity.Property(e => e.OrdIquantity).HasColumnName("ordIQuantity");

                entity.Property(e => e.OrdIquantityDesc)
                    .HasColumnName("ordIQuantityDesc")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdIround)
                    .HasColumnName("ordIRound")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdIroundPlus)
                    .HasColumnName("ordIRoundPlus")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdItax)
                    .HasColumnName("ordITax")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdItaxIndex)
                    .HasColumnName("ordITaxIndex")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdItotalPrice)
                    .HasColumnName("ordITotalPrice")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdItracing)
                    .HasColumnName("ordITracing")
                    .HasMaxLength(200);

                entity.Property(e => e.OrdIwhid).HasColumnName("ordIWHId");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsorderItemsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSOrderItems_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsorderItems)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderItems_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsorderItems)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSOrderItems_Languages");

                entity.HasOne(d => d.OrdIcurrencyUnit)
                    .WithMany(p => p.WsorderItems)
                    .HasForeignKey(d => d.OrdIcurrencyUnitId)
                    .HasConstraintName("FK_WSOrderItems_WSCurrencyUnits");

                entity.HasOne(d => d.OrdIprd)
                    .WithMany(p => p.WsorderItems)
                    .HasForeignKey(d => d.OrdIprdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderItems_WSProducts");

                entity.HasOne(d => d.OrdIprdUnit)
                    .WithMany(p => p.WsorderItems)
                    .HasForeignKey(d => d.OrdIprdUnitId)
                    .HasConstraintName("FK_WSOrderItems_WSProductUnits");

                entity.HasOne(d => d.OrdIwh)
                    .WithMany(p => p.WsorderItems)
                    .HasForeignKey(d => d.OrdIwhid)
                    .HasConstraintName("FK_WSOrderItems_WSWareHouse");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.WsorderItems)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderItems_WSOrder");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsorderItemsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderItems_Users");
            });

            modelBuilder.Entity<WsorderItemsLang>(entity =>
            {
                entity.ToTable("WSOrderItems_Lang");

                entity.Property(e => e.WsorderItemsLangId).HasColumnName("WSOrderItemsLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.OrdIdescription)
                    .HasColumnName("ordIDescription")
                    .HasMaxLength(4000);

                entity.Property(e => e.OrdIquantityDesc)
                    .HasColumnName("ordIQuantityDesc")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrderItemId).HasColumnName("OrderItemID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsorderItemsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderItems_Lang_Languages");

                entity.HasOne(d => d.OrderItem)
                    .WithMany(p => p.WsorderItemsLang)
                    .HasForeignKey(d => d.OrderItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderItems_Lang_WSOrderItems");
            });

            modelBuilder.Entity<WsorderLang>(entity =>
            {
                entity.ToTable("WSOrder_Lang");

                entity.Property(e => e.WsorderLangId).HasColumnName("WSOrderLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.OrdDescriptionI)
                    .HasColumnName("ordDescriptionI")
                    .HasMaxLength(4000);

                entity.Property(e => e.OrdDescriptionIi)
                    .HasColumnName("ordDescriptionII")
                    .HasMaxLength(4000);

                entity.Property(e => e.OrdDiscountTitle)
                    .HasColumnName("ordDiscountTitle")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdNote)
                    .HasColumnName("ordNote")
                    .HasMaxLength(4000);

                entity.Property(e => e.OrdSigningI)
                    .HasColumnName("ordSigningI")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdSigningIi)
                    .HasColumnName("ordSigningII")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdSigningIii)
                    .HasColumnName("ordSigningIII")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdSpecialWord)
                    .HasColumnName("ordSpecialWord")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdSubject)
                    .HasColumnName("ordSubject")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdTitle)
                    .HasColumnName("ordTitle")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdTotalAmountStr)
                    .HasColumnName("ordTotalAmountStr")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrdcmpTitle)
                    .HasColumnName("ordcmpTitle")
                    .HasMaxLength(1000);

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsorderLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrder_Lang_Languages");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.WsorderLang)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrder_Lang_WSOrder");
            });

            modelBuilder.Entity<WsorderOpr>(entity =>
            {
                entity.HasKey(e => e.OrderOprId);

                entity.ToTable("WSOrderOpr");

                entity.Property(e => e.OrderOprId)
                    .HasColumnName("OrderOprID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OprType).HasComment("1=Exit; 2=Enter");

                entity.HasOne(d => d.DocOpr)
                    .WithMany(p => p.WsorderOpr)
                    .HasForeignKey(d => d.DocOprId)
                    .HasConstraintName("FK_WSOrderOpr_WSDocOpr");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsorderOpr)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSOrderOpr_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsorderOpr)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSOrderOpr_Languages");
            });

            modelBuilder.Entity<WsorderOprLang>(entity =>
            {
                entity.ToTable("WSOrderOpr_Lang");

                entity.Property(e => e.WsorderOprLangId).HasColumnName("WSOrderOprLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderOprId).HasColumnName("OrderOprID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsorderOprLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderOpr_Lang_Languages");

                entity.HasOne(d => d.OrderOpr)
                    .WithMany(p => p.WsorderOprLang)
                    .HasForeignKey(d => d.OrderOprId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderOpr_Lang_WSOrderOpr");
            });

            modelBuilder.Entity<WsorderPaymentTypes>(entity =>
            {
                entity.HasKey(e => e.OrderPaymentTypeId);

                entity.ToTable("WSOrderPaymentTypes");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.OrdpayType)
                    .IsRequired()
                    .HasColumnName("ordpayType")
                    .HasMaxLength(150);

                entity.Property(e => e.OrdpayTypeDescription)
                    .HasColumnName("ordpayTypeDescription")
                    .HasMaxLength(100);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsorderPaymentTypesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSOrderPaymentTypes_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsorderPaymentTypes)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderPaymentTypes_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsorderPaymentTypes)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSOrderPaymentTypes_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsorderPaymentTypesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderPaymentTypes_Users");
            });

            modelBuilder.Entity<WsorderPaymentTypesLang>(entity =>
            {
                entity.ToTable("WSOrderPaymentTypes_Lang");

                entity.Property(e => e.WsorderPaymentTypesLangId).HasColumnName("WSOrderPaymentTypesLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.OrdpayType)
                    .IsRequired()
                    .HasColumnName("ordpayType")
                    .HasMaxLength(150);

                entity.Property(e => e.OrdpayTypeDescription)
                    .HasColumnName("ordpayTypeDescription")
                    .HasMaxLength(100);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsorderPaymentTypesLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderPaymentTypes_Lang_Languages");

                entity.HasOne(d => d.OrderPaymentType)
                    .WithMany(p => p.WsorderPaymentTypesLang)
                    .HasForeignKey(d => d.OrderPaymentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderPaymentTypes_Lang_WSOrderPaymentTypes");
            });

            modelBuilder.Entity<WsorderPayments>(entity =>
            {
                entity.HasKey(e => e.OrderPaymentId);

                entity.ToTable("WSOrderPayments");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ImportDate)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.ImportDateTime).HasColumnType("datetime");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.OrdpayAmount)
                    .HasColumnName("ordpayAmount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdpayBankDocNumber)
                    .HasColumnName("ordpayBankDocNumber")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrdpayDescription)
                    .HasColumnName("ordpayDescription")
                    .HasMaxLength(2000);

                entity.Property(e => e.OrdpayDocAmount)
                    .HasColumnName("ordpayDocAmount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrdpayDocDate)
                    .HasColumnName("ordpayDocDate")
                    .HasMaxLength(8);

                entity.Property(e => e.OrdpayDocDateTime)
                    .HasColumnName("ordpayDocDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrdpayDocId).HasColumnName("ordpayDocId");

                entity.Property(e => e.OrdpayDocNumber)
                    .HasColumnName("ordpayDocNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.OrdpayDocTypeId).HasColumnName("ordpayDocTypeId");

                entity.Property(e => e.OrdpayFirstRegisteDate)
                    .HasColumnName("ordpayFirstRegisteDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrdpayFirstRegisteDatePersian)
                    .HasColumnName("ordpayFirstRegisteDatePersian")
                    .HasMaxLength(8);

                entity.Property(e => e.OrdpayFirstRegisterUserId).HasColumnName("ordpayFirstRegisterUserId");

                entity.Property(e => e.OrdpayLinkAccDetailId).HasColumnName("ordpayLinkAccDetailId");

                entity.Property(e => e.OrdpayLinkAccHeaderId).HasColumnName("ordpayLinkAccHeaderId");

                entity.Property(e => e.OrdpayLinkAccHeaderNumber)
                    .HasColumnName("ordpayLinkAccHeaderNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.OrdpayLinkAccVoucherId).HasColumnName("ordpayLinkAccVoucherId");

                entity.Property(e => e.OrdpayLinkAccVoucherNumber)
                    .HasColumnName("ordpayLinkAccVoucherNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.OrdpayOrderId).HasColumnName("ordpayOrderId");

                entity.Property(e => e.OrdpayTypeId).HasColumnName("ordpayTypeId");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsorderPaymentsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSOrderPayments_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsorderPayments)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderPayments_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsorderPayments)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSOrderPayments_Languages");

                entity.HasOne(d => d.OrdpayFirstRegisterUser)
                    .WithMany(p => p.WsorderPaymentsOrdpayFirstRegisterUser)
                    .HasForeignKey(d => d.OrdpayFirstRegisterUserId)
                    .HasConstraintName("FK_WSOrderPayments_Users");

                entity.HasOne(d => d.OrdpayOrder)
                    .WithMany(p => p.WsorderPayments)
                    .HasForeignKey(d => d.OrdpayOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderPayments_WSOrder");

                entity.HasOne(d => d.OrdpayType)
                    .WithMany(p => p.WsorderPayments)
                    .HasForeignKey(d => d.OrdpayTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderPayments_WSOrderPaymentTypes");

                entity.HasOne(d => d.PreOrderPayment)
                    .WithMany(p => p.WsorderPayments)
                    .HasForeignKey(d => d.PreOrderPaymentId)
                    .HasConstraintName("FK_WSOrderPayments_WSPreOrderPayments");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsorderPaymentsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderPayments_Users1");
            });

            modelBuilder.Entity<WsorderPaymentsLang>(entity =>
            {
                entity.ToTable("WSOrderPayments_Lang");

                entity.Property(e => e.WsorderPaymentsLangId).HasColumnName("WSOrderPaymentsLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.OrdpayDescription)
                    .HasColumnName("ordpayDescription")
                    .HasMaxLength(2000);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsorderPaymentsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderPayments_Lang_Languages");

                entity.HasOne(d => d.OrderPayment)
                    .WithMany(p => p.WsorderPaymentsLang)
                    .HasForeignKey(d => d.OrderPaymentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderPayments_Lang_WSOrderPayments");
            });

            modelBuilder.Entity<WsorderStatus>(entity =>
            {
                entity.HasKey(e => e.OrderStatusId);

                entity.ToTable("WSOrderStatus");

                entity.Property(e => e.OrderStatusId).ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.OrderStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsorderStatusFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSOrderStatus_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsorderStatus)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderStatus_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsorderStatus)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSOrderStatus_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsorderStatusUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderStatus_Users");
            });

            modelBuilder.Entity<WsorderStatusLang>(entity =>
            {
                entity.ToTable("WSOrderStatus_Lang");

                entity.Property(e => e.WsorderStatusLangId).HasColumnName("WSOrderStatusLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.OrderStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsorderStatusLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderStatus_Lang_Languages");

                entity.HasOne(d => d.OrderStatusNavigation)
                    .WithMany(p => p.WsorderStatusLang)
                    .HasForeignKey(d => d.OrderStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSOrderStatus_Lang_WSOrderStatus");
            });

            modelBuilder.Entity<WspayCondition>(entity =>
            {
                entity.HasKey(e => e.PayConditionId);

                entity.ToTable("WSPayCondition");

                entity.Property(e => e.PayConditionId).HasColumnName("PayConditionID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PayCondition).HasMaxLength(200);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WspayConditionFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSPayCondition_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WspayCondition)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPayCondition_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspayCondition)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSPayCondition_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WspayConditionUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPayCondition_Users");
            });

            modelBuilder.Entity<WspayConditionLang>(entity =>
            {
                entity.ToTable("WSPayCondition_Lang");

                entity.Property(e => e.WspayConditionLangId).HasColumnName("WSPayConditionLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PayCondition).HasMaxLength(200);

                entity.Property(e => e.PayConditionId).HasColumnName("PayConditionID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspayConditionLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPayCondition_Lang_Languages");

                entity.HasOne(d => d.PayConditionNavigation)
                    .WithMany(p => p.WspayConditionLang)
                    .HasForeignKey(d => d.PayConditionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPayCondition_Lang_WSPayCondition");
            });

            modelBuilder.Entity<WspreOrder>(entity =>
            {
                entity.HasKey(e => e.PreOrderId);

                entity.ToTable("WSPreOrder");

                entity.HasIndex(e => e.PordCompanyId)
                    .HasDatabaseName("IX_WSPreOrder_CompanyId");

                entity.HasIndex(e => e.PordCompanyPersonId)
                    .HasDatabaseName("IX_WSPreOrder_CompanyPersonId");

                entity.HasIndex(e => e.PordProjectId)
                    .HasDatabaseName("IX_WSPreOrder_ProjectId");

                entity.Property(e => e.PreOrderId).HasColumnName("PreOrderID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PordAccountNumberI)
                    .HasColumnName("pordAccountNumberI")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordAccountNumberIi)
                    .HasColumnName("pordAccountNumberII")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordAccountShabaNumberI)
                    .HasColumnName("pordAccountShabaNumberI")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordAccountShabaNumberIi)
                    .HasColumnName("pordAccountShabaNumberII")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordAddress)
                    .HasColumnName("pordAddress")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordCalculateTax).HasColumnName("pordCalculateTax");

                entity.Property(e => e.PordCompanyId).HasColumnName("pordCompanyId");

                entity.Property(e => e.PordCompanyPersonId).HasColumnName("pordCompanyPersonId");

                entity.Property(e => e.PordCreditDurationId).HasColumnName("pordCreditDurationId");

                entity.Property(e => e.PordDate)
                    .IsRequired()
                    .HasColumnName("pordDate")
                    .HasMaxLength(8);

                entity.Property(e => e.PordDateTime)
                    .HasColumnName("pordDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PordDay)
                    .HasColumnName("pordDay")
                    .HasMaxLength(50);

                entity.Property(e => e.PordDeliveryDate)
                    .HasColumnName("pordDeliveryDate")
                    .HasMaxLength(8);

                entity.Property(e => e.PordDeliveryDateTime)
                    .HasColumnName("pordDeliveryDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PordDeliveryTime)
                    .HasColumnName("pordDeliveryTime")
                    .HasMaxLength(10);

                entity.Property(e => e.PordDeliveryTimeId).HasColumnName("pordDeliveryTimeId");

                entity.Property(e => e.PordDescriptionI)
                    .HasColumnName("pordDescriptionI")
                    .HasMaxLength(4000);

                entity.Property(e => e.PordDescriptionId).HasColumnName("pordDescriptionId");

                entity.Property(e => e.PordDescriptionIi)
                    .HasColumnName("pordDescriptionII")
                    .HasMaxLength(4000);

                entity.Property(e => e.PordDiscount)
                    .HasColumnName("pordDiscount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordDiscountPercent)
                    .HasColumnName("pordDiscountPercent")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordDiscountTitle)
                    .HasColumnName("pordDiscountTitle")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordEmail)
                    .HasColumnName("pordEmail")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordExpireDate)
                    .HasColumnName("pordExpireDate")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.PordExpireDateTime)
                    .HasColumnName("pordExpireDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PordFax)
                    .HasColumnName("pordFax")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordFirstRegisterUserId).HasColumnName("pordFirstRegisterUserId");

                entity.Property(e => e.PordGuarantyId).HasColumnName("pordGuarantyId");

                entity.Property(e => e.PordImportDate)
                    .HasColumnName("pordImportDate")
                    .HasMaxLength(8);

                entity.Property(e => e.PordImportDateTime)
                    .HasColumnName("pordImportDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PordInstallAmount)
                    .HasColumnName("pordInstallAmount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordIsFixed).HasColumnName("pordIsFixed");

                entity.Property(e => e.PordIsVerified).HasColumnName("pordIsVerified");

                entity.Property(e => e.PordItemCount).HasColumnName("pordItemCount");

                entity.Property(e => e.PordItemsAmount)
                    .HasColumnName("pordItemsAmount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordLinkAccPreOrderId).HasColumnName("pordLinkAccPreOrderId");

                entity.Property(e => e.PordLinkAccPreOrderNumber)
                    .HasColumnName("pordLinkAccPreOrderNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.PordLlogoId).HasColumnName("pordLLogoId");

                entity.Property(e => e.PordNumber).HasColumnName("pordNumber");

                entity.Property(e => e.PordPayConditionId).HasColumnName("pordPayConditionId");

                entity.Property(e => e.PordPrintFormatId).HasColumnName("pordPrintFormatId");

                entity.Property(e => e.PordProjectId).HasColumnName("pordProjectId");

                entity.Property(e => e.PordReferUserId).HasColumnName("pordReferUserId");

                entity.Property(e => e.PordRlogoId).HasColumnName("pordRLogoId");

                entity.Property(e => e.PordRound)
                    .HasColumnName("pordRound")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordSignatureId).HasColumnName("pordSignatureId");

                entity.Property(e => e.PordSigningI)
                    .HasColumnName("pordSigningI")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordSigningIi)
                    .HasColumnName("pordSigningII")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordSigningIii)
                    .HasColumnName("pordSigningIII")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordSpecialWord)
                    .HasColumnName("pordSpecialWord")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordStatusId)
                    .HasColumnName("pordStatusId")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.PordSubject)
                    .HasColumnName("pordSubject")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordSumAmount)
                    .HasColumnName("pordSumAmount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordTax)
                    .HasColumnName("pordTax")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordTaxIndex)
                    .HasColumnName("pordTaxIndex")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordTelephone)
                    .HasColumnName("pordTelephone")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordTime)
                    .HasColumnName("pordTime")
                    .HasMaxLength(50);

                entity.Property(e => e.PordTitle)
                    .HasColumnName("pordTitle")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordTotalAmount)
                    .HasColumnName("pordTotalAmount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordTotalAmountStr)
                    .HasColumnName("pordTotalAmountStr")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordTransportation)
                    .HasColumnName("pordTransportation")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordVerificationWorkFlowId).HasColumnName("pordVerificationWorkFlowId");

                entity.Property(e => e.PordVerifiedRegisterDate)
                    .HasColumnName("pordVerifiedRegisterDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PordVerifiedRegisterDatePersian)
                    .HasColumnName("pordVerifiedRegisterDatePersian")
                    .HasMaxLength(8);

                entity.Property(e => e.PordVerifierId).HasColumnName("pordVerifierId");

                entity.Property(e => e.PordVerifierRequestId).HasColumnName("pordVerifierRequestId");

                entity.Property(e => e.PordWebSite)
                    .HasColumnName("pordWebSite")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordcmpTitle)
                    .HasColumnName("pordcmpTitle")
                    .HasMaxLength(1000);

                entity.Property(e => e.PreOrderOprId).HasColumnName("PreOrderOprID");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WspreOrderFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSPreOrder_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WspreOrder)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrder_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspreOrder)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSPreOrder_Languages");

                entity.HasOne(d => d.PordCompany)
                    .WithMany(p => p.WspreOrder)
                    .HasForeignKey(d => d.PordCompanyId)
                    .HasConstraintName("FK_WSPreOrder_CrmCompany");

                entity.HasOne(d => d.PordCompanyPerson)
                    .WithMany(p => p.WspreOrder)
                    .HasForeignKey(d => d.PordCompanyPersonId)
                    .HasConstraintName("FK_WSPreOrder_CrmCompanyPersons");

                entity.HasOne(d => d.PordCreditDuration)
                    .WithMany(p => p.WspreOrder)
                    .HasForeignKey(d => d.PordCreditDurationId)
                    .HasConstraintName("FK_WSPreOrder_WSCreditDuration");

                entity.HasOne(d => d.PordDeliveryTimeNavigation)
                    .WithMany(p => p.WspreOrder)
                    .HasForeignKey(d => d.PordDeliveryTimeId)
                    .HasConstraintName("FK_WSPreOrder_WSDeliveryTime");

                entity.HasOne(d => d.PordFirstRegisterUser)
                    .WithMany(p => p.WspreOrderPordFirstRegisterUser)
                    .HasForeignKey(d => d.PordFirstRegisterUserId)
                    .HasConstraintName("FK_WSPreOrder_Users4");

                entity.HasOne(d => d.PordGuaranty)
                    .WithMany(p => p.WspreOrder)
                    .HasForeignKey(d => d.PordGuarantyId)
                    .HasConstraintName("FK_WSPreOrder_WSGuaranty");

                entity.HasOne(d => d.PordLlogo)
                    .WithMany(p => p.WspreOrderPordLlogo)
                    .HasForeignKey(d => d.PordLlogoId)
                    .HasConstraintName("FK_WSPreOrder_WSLogo1");

                entity.HasOne(d => d.PordPayCondition)
                    .WithMany(p => p.WspreOrder)
                    .HasForeignKey(d => d.PordPayConditionId)
                    .HasConstraintName("FK_WSPreOrder_WSPayCondition");

                entity.HasOne(d => d.PordPrintFormat)
                    .WithMany(p => p.WspreOrder)
                    .HasForeignKey(d => d.PordPrintFormatId)
                    .HasConstraintName("FK_WSPreOrder_PrintFormat");

                entity.HasOne(d => d.PordProject)
                    .WithMany(p => p.WspreOrder)
                    .HasForeignKey(d => d.PordProjectId)
                    .HasConstraintName("FK_WSPreOrder_CrmProjects");

                entity.HasOne(d => d.PordReferUser)
                    .WithMany(p => p.WspreOrderPordReferUser)
                    .HasForeignKey(d => d.PordReferUserId)
                    .HasConstraintName("FK_WSPreOrder_Users3");

                entity.HasOne(d => d.PordRlogo)
                    .WithMany(p => p.WspreOrderPordRlogo)
                    .HasForeignKey(d => d.PordRlogoId)
                    .HasConstraintName("FK_WSPreOrder_WSLogo");

                entity.HasOne(d => d.PordSignature)
                    .WithMany(p => p.WspreOrder)
                    .HasForeignKey(d => d.PordSignatureId)
                    .HasConstraintName("FK_WSPreOrder_WSSignature");

                entity.HasOne(d => d.PordStatus)
                    .WithMany(p => p.WspreOrder)
                    .HasForeignKey(d => d.PordStatusId)
                    .HasConstraintName("FK_WSPreOrder_WSPreOrderStatus");

                entity.HasOne(d => d.PordVerificationWorkFlow)
                    .WithMany(p => p.WspreOrder)
                    .HasForeignKey(d => d.PordVerificationWorkFlowId)
                    .HasConstraintName("FK_WSPreOrder_WSVerificationWorkFlows");

                entity.HasOne(d => d.PordVerifier)
                    .WithMany(p => p.WspreOrderPordVerifier)
                    .HasForeignKey(d => d.PordVerifierId)
                    .HasConstraintName("FK_WSPreOrder_Users");

                entity.HasOne(d => d.PordVerifierRequest)
                    .WithMany(p => p.WspreOrderPordVerifierRequest)
                    .HasForeignKey(d => d.PordVerifierRequestId)
                    .HasConstraintName("FK_WSPreOrder_Users1");

                entity.HasOne(d => d.PreOrderOpr)
                    .WithMany(p => p.WspreOrder)
                    .HasForeignKey(d => d.PreOrderOprId)
                    .HasConstraintName("FK_WSPreOrder_WSPreOrderOpr");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WspreOrderUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrder_Users2");
            });

            modelBuilder.Entity<WspreOrderDefaultSetting>(entity =>
            {
                entity.HasKey(e => e.PreOrderSettingId);

                entity.ToTable("WSPreOrderDefaultSetting");

                entity.Property(e => e.PreOrderSettingId).HasColumnName("PreOrderSettingID");

                entity.Property(e => e.AccountNumberI).HasMaxLength(1000);

                entity.Property(e => e.AccountNumberIi)
                    .HasColumnName("AccountNumberII")
                    .HasMaxLength(1000);

                entity.Property(e => e.AccountShabaNumberI).HasMaxLength(1000);

                entity.Property(e => e.AccountShabaNumberIi)
                    .HasColumnName("AccountShabaNumberII")
                    .HasMaxLength(1000);

                entity.Property(e => e.Address).HasMaxLength(1000);

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionI).HasMaxLength(4000);

                entity.Property(e => e.DescriptionIi)
                    .HasColumnName("DescriptionII")
                    .HasMaxLength(4000);

                entity.Property(e => e.Email).HasMaxLength(1000);

                entity.Property(e => e.Fax).HasMaxLength(1000);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PreOrderOprId).HasColumnName("PreOrderOprID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.SettingTitle).HasMaxLength(200);

                entity.Property(e => e.SigningI).HasMaxLength(1000);

                entity.Property(e => e.SigningIi)
                    .HasColumnName("SigningII")
                    .HasMaxLength(1000);

                entity.Property(e => e.SigningIii)
                    .HasColumnName("SigningIII")
                    .HasMaxLength(1000);

                entity.Property(e => e.SpecialWord).HasMaxLength(1000);

                entity.Property(e => e.Subject).HasMaxLength(1000);

                entity.Property(e => e.TaxIndex).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Telephone).HasMaxLength(1000);

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.Property(e => e.WebSite).HasMaxLength(1000);

                entity.HasOne(d => d.CreditDuration)
                    .WithMany(p => p.WspreOrderDefaultSetting)
                    .HasForeignKey(d => d.CreditDurationId)
                    .HasConstraintName("FK_WSPreOrderDefaultSetting_WSCreditDuration");

                entity.HasOne(d => d.DeliveryTime)
                    .WithMany(p => p.WspreOrderDefaultSetting)
                    .HasForeignKey(d => d.DeliveryTimeId)
                    .HasConstraintName("FK_WSPreOrderDefaultSetting_WSDeliveryTime");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WspreOrderDefaultSettingFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSPreOrderDefaultSetting_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WspreOrderDefaultSetting)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderDefaultSetting_WSFinancialPeriod");

                entity.HasOne(d => d.Guaranty)
                    .WithMany(p => p.WspreOrderDefaultSetting)
                    .HasForeignKey(d => d.GuarantyId)
                    .HasConstraintName("FK_WSPreOrderDefaultSetting_WSGuaranty2");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspreOrderDefaultSetting)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSPreOrderDefaultSetting_Languages");

                entity.HasOne(d => d.LeftLogo)
                    .WithMany(p => p.WspreOrderDefaultSettingLeftLogo)
                    .HasForeignKey(d => d.LeftLogoId)
                    .HasConstraintName("FK_WSPreOrderDefaultSetting_WSLogo1");

                entity.HasOne(d => d.PayCondition)
                    .WithMany(p => p.WspreOrderDefaultSetting)
                    .HasForeignKey(d => d.PayConditionId)
                    .HasConstraintName("FK_WSPreOrderDefaultSetting_WSPayCondition");

                entity.HasOne(d => d.PreOrderOpr)
                    .WithMany(p => p.WspreOrderDefaultSetting)
                    .HasForeignKey(d => d.PreOrderOprId)
                    .HasConstraintName("FK_WSPreOrderDefaultSetting_WSPreOrderOpr");

                entity.HasOne(d => d.PrintFormat)
                    .WithMany(p => p.WspreOrderDefaultSetting)
                    .HasForeignKey(d => d.PrintFormatId)
                    .HasConstraintName("FK_WSPreOrderDefaultSetting_PrintFormat1");

                entity.HasOne(d => d.ReferUser)
                    .WithMany(p => p.WspreOrderDefaultSettingReferUser)
                    .HasForeignKey(d => d.ReferUserId)
                    .HasConstraintName("FK_WSPreOrderDefaultSetting_UsersReferId");

                entity.HasOne(d => d.RightLogo)
                    .WithMany(p => p.WspreOrderDefaultSettingRightLogo)
                    .HasForeignKey(d => d.RightLogoId)
                    .HasConstraintName("FK_WSPreOrderDefaultSetting_WSLogo");

                entity.HasOne(d => d.Signature)
                    .WithMany(p => p.WspreOrderDefaultSetting)
                    .HasForeignKey(d => d.SignatureId)
                    .HasConstraintName("FK_WSPreOrderDefaultSetting_WSSignature");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WspreOrderDefaultSettingUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderDefaultSetting_Users1");

                entity.HasOne(d => d.VerificationWorkFlow)
                    .WithMany(p => p.WspreOrderDefaultSetting)
                    .HasForeignKey(d => d.VerificationWorkFlowId)
                    .HasConstraintName("FK_WSPreOrderDefaultSetting_WSVerificationWorkFlows");

                entity.HasOne(d => d.VerifierRequest)
                    .WithMany(p => p.WspreOrderDefaultSettingVerifierRequest)
                    .HasForeignKey(d => d.VerifierRequestId)
                    .HasConstraintName("FK_WSPreOrderDefaultSetting_Users");
            });

            modelBuilder.Entity<WspreOrderDefaultSettingLang>(entity =>
            {
                entity.ToTable("WSPreOrderDefaultSetting_Lang");

                entity.Property(e => e.WspreOrderDefaultSettingLangId).HasColumnName("WSPreOrderDefaultSettingLangID");

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.DescriptionI).HasMaxLength(350);

                entity.Property(e => e.DescriptionIi)
                    .HasColumnName("DescriptionII")
                    .HasMaxLength(1000);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PreOrderSettingId).HasColumnName("PreOrderSettingID");

                entity.Property(e => e.SettingTitle).HasMaxLength(50);

                entity.Property(e => e.SigningI).HasMaxLength(50);

                entity.Property(e => e.SigningIi)
                    .HasColumnName("SigningII")
                    .HasMaxLength(50);

                entity.Property(e => e.SigningIii)
                    .HasColumnName("SigningIII")
                    .HasMaxLength(50);

                entity.Property(e => e.SpecialWord).HasMaxLength(50);

                entity.Property(e => e.Subject).HasMaxLength(1000);

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspreOrderDefaultSettingLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderDefaultSetting_Lang_Languages");

                entity.HasOne(d => d.PreOrderSetting)
                    .WithMany(p => p.WspreOrderDefaultSettingLang)
                    .HasForeignKey(d => d.PreOrderSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderDefaultSetting_Lang_WSPreOrderDefaultSetting");
            });

            modelBuilder.Entity<WspreOrderItemSpecification>(entity =>
            {
                entity.HasKey(e => e.PreOrderItemSpcflId);

                entity.ToTable("WSPreOrderItemSpecification");

                entity.Property(e => e.PreOrderItemSpcflId).HasColumnName("PreOrderItemSpcflID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Specification)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.SpecificationI).HasMaxLength(300);

                entity.Property(e => e.SpecificationIi)
                    .HasColumnName("SpecificationII")
                    .HasMaxLength(300);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WspreOrderItemSpecificationFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSPreOrderItemSpecification_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WspreOrderItemSpecification)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderItemSpecification_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspreOrderItemSpecification)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSPreOrderItemSpecification_Languages");

                entity.HasOne(d => d.PreOrderItem)
                    .WithMany(p => p.WspreOrderItemSpecification)
                    .HasForeignKey(d => d.PreOrderItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderItemSpecification_WSPreOrderItems");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WspreOrderItemSpecificationUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderItemSpecification_Users");
            });

            modelBuilder.Entity<WspreOrderItemSpecificationLang>(entity =>
            {
                entity.ToTable("WSPreOrderItemSpecification_Lang");

                entity.Property(e => e.WspreOrderItemSpecificationLangId).HasColumnName("WSPreOrderItemSpecificationLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PreOrderItemSpcflId).HasColumnName("PreOrderItemSpcflID");

                entity.Property(e => e.Specification)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.SpecificationI).HasMaxLength(300);

                entity.Property(e => e.SpecificationIi)
                    .HasColumnName("SpecificationII")
                    .HasMaxLength(300);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspreOrderItemSpecificationLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderItemSpecification_Lang_Languages");
            });

            modelBuilder.Entity<WspreOrderItems>(entity =>
            {
                entity.HasKey(e => e.PreOrderItemId);

                entity.ToTable("WSPreOrderItems");

                entity.HasIndex(e => e.PordIprdId)
                    .HasDatabaseName("IX_WSPreOrderItems_PrdId");

                entity.HasIndex(e => e.PreOrderId)
                    .HasDatabaseName("IX_WSPreOrderItems_OrderId");

                entity.Property(e => e.PreOrderItemId).HasColumnName("PreOrderItemID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PordIcalculateTax).HasColumnName("pordICalculateTax");

                entity.Property(e => e.PordIcurrencyUnitId).HasColumnName("pordICurrencyUnitId");

                entity.Property(e => e.PordIdescription)
                    .HasColumnName("pordIDescription")
                    .HasMaxLength(4000);

                entity.Property(e => e.PordIdiscount)
                    .HasColumnName("pordIDiscount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordIdiscountI)
                    .HasColumnName("pordIDiscountI")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordIdiscountIpercent)
                    .HasColumnName("pordIDiscountIPercent")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordIdiscountPercent)
                    .HasColumnName("pordIDiscountPercent")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordIfcr).HasColumnName("pordIFCR");

                entity.Property(e => e.PordIfcri).HasColumnName("pordIFCRI");

                entity.Property(e => e.PordIlinkAccItemId).HasColumnName("pordILinkAccItemId");

                entity.Property(e => e.PordInotInSum).HasColumnName("pordINotInSum");

                entity.Property(e => e.PordInotVisible).HasColumnName("pordINotVisible");

                entity.Property(e => e.PordIorderView).HasColumnName("pordIOrderView");

                entity.Property(e => e.PordIprdId).HasColumnName("pordIPrdId");

                entity.Property(e => e.PordIprdPriceGroupId).HasColumnName("pordIPrdPriceGroupID");

                entity.Property(e => e.PordIprdUnitId).HasColumnName("pordIPrdUnitId");

                entity.Property(e => e.PordIprice)
                    .HasColumnName("pordIPrice")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordIquantity).HasColumnName("pordIQuantity");

                entity.Property(e => e.PordIquantityDesc)
                    .HasColumnName("pordIQuantityDesc")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordIround)
                    .HasColumnName("pordIRound")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordIroundPlus)
                    .HasColumnName("pordIRoundPlus")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordItax)
                    .HasColumnName("pordITax")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordItaxIndex)
                    .HasColumnName("pordITaxIndex")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordItotalPrice)
                    .HasColumnName("pordITotalPrice")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordItracing)
                    .HasColumnName("pordITracing")
                    .HasMaxLength(200);

                entity.Property(e => e.PordIwhid).HasColumnName("pordIWHId");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WspreOrderItemsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSPreOrderItems_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WspreOrderItems)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderItems_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspreOrderItems)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSPreOrderItems_Languages");

                entity.HasOne(d => d.PordIcurrencyUnit)
                    .WithMany(p => p.WspreOrderItems)
                    .HasForeignKey(d => d.PordIcurrencyUnitId)
                    .HasConstraintName("FK_WSPreOrderItems_WSCurrencyUnits");

                entity.HasOne(d => d.PordIprd)
                    .WithMany(p => p.WspreOrderItems)
                    .HasForeignKey(d => d.PordIprdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderItems_WSProducts");

                entity.HasOne(d => d.PordIprdUnit)
                    .WithMany(p => p.WspreOrderItems)
                    .HasForeignKey(d => d.PordIprdUnitId)
                    .HasConstraintName("FK_WSPreOrderItems_WSProductUnits");

                entity.HasOne(d => d.PordIwh)
                    .WithMany(p => p.WspreOrderItems)
                    .HasForeignKey(d => d.PordIwhid)
                    .HasConstraintName("FK_WSPreOrderItems_WSWareHouse");

                entity.HasOne(d => d.PreOrder)
                    .WithMany(p => p.WspreOrderItems)
                    .HasForeignKey(d => d.PreOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderItems_WSPreOrder");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WspreOrderItemsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderItems_Users");
            });

            modelBuilder.Entity<WspreOrderItemsLang>(entity =>
            {
                entity.ToTable("WSPreOrderItems_Lang");

                entity.Property(e => e.WspreOrderItemsLangId).HasColumnName("WSPreOrderItemsLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PordIdescription)
                    .HasColumnName("pordIDescription")
                    .HasMaxLength(4000);

                entity.Property(e => e.PordIquantityDesc)
                    .HasColumnName("pordIQuantityDesc")
                    .HasMaxLength(1000);

                entity.Property(e => e.PreOrderItemId).HasColumnName("PreOrderItemID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspreOrderItemsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderItems_Lang_Languages");

                entity.HasOne(d => d.PreOrderItem)
                    .WithMany(p => p.WspreOrderItemsLang)
                    .HasForeignKey(d => d.PreOrderItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderItems_Lang_WSPreOrderItems");
            });

            modelBuilder.Entity<WspreOrderLang>(entity =>
            {
                entity.ToTable("WSPreOrder_Lang");

                entity.Property(e => e.WspreOrderLangId).HasColumnName("WSPreOrderLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PordAddress)
                    .HasColumnName("pordAddress")
                    .HasMaxLength(200);

                entity.Property(e => e.PordDescriptionI)
                    .HasColumnName("pordDescriptionI")
                    .HasMaxLength(350);

                entity.Property(e => e.PordDescriptionIi)
                    .HasColumnName("pordDescriptionII")
                    .HasMaxLength(4000);

                entity.Property(e => e.PordDiscountTitle)
                    .HasColumnName("pordDiscountTitle")
                    .HasMaxLength(100);

                entity.Property(e => e.PordSigningI)
                    .HasColumnName("pordSigningI")
                    .HasMaxLength(50);

                entity.Property(e => e.PordSigningIi)
                    .HasColumnName("pordSigningII")
                    .HasMaxLength(50);

                entity.Property(e => e.PordSigningIii)
                    .HasColumnName("pordSigningIII")
                    .HasMaxLength(50);

                entity.Property(e => e.PordSpecialWord)
                    .HasColumnName("pordSpecialWord")
                    .HasMaxLength(50);

                entity.Property(e => e.PordSubject)
                    .HasColumnName("pordSubject")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordTitle)
                    .HasColumnName("pordTitle")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordTotalAmountStr)
                    .HasColumnName("pordTotalAmountStr")
                    .HasMaxLength(1000);

                entity.Property(e => e.PordcmpTitle)
                    .HasColumnName("pordcmpTitle")
                    .HasMaxLength(100);

                entity.Property(e => e.PreOrderId).HasColumnName("PreOrderID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspreOrderLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrder_Lang_Languages");

                entity.HasOne(d => d.PreOrder)
                    .WithMany(p => p.WspreOrderLang)
                    .HasForeignKey(d => d.PreOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrder_Lang_WSPreOrder");
            });

            modelBuilder.Entity<WspreOrderOpr>(entity =>
            {
                entity.HasKey(e => e.PreOrderOprId);

                entity.ToTable("WSPreOrderOpr");

                entity.Property(e => e.PreOrderOprId).HasColumnName("PreOrderOprID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PreOrderOpr)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WspreOrderOprFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSPreOrderOpr_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WspreOrderOpr)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderOpr_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspreOrderOpr)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSPreOrderOpr_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WspreOrderOprUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderOpr_Users");
            });

            modelBuilder.Entity<WspreOrderOprLang>(entity =>
            {
                entity.ToTable("WSPreOrderOpr_Lang");

                entity.Property(e => e.WspreOrderOprLangId).HasColumnName("WSPreOrderOprLangID");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PreOrderOpr)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.PreOrderOprId).HasColumnName("PreOrderOprID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspreOrderOprLang)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSPreOrderOpr_Lang_Languages");

                entity.HasOne(d => d.PreOrderOprNavigation)
                    .WithMany(p => p.WspreOrderOprLang)
                    .HasForeignKey(d => d.PreOrderOprId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderOpr_Lang_WSPreOrderOpr");
            });

            modelBuilder.Entity<WspreOrderPayments>(entity =>
            {
                entity.HasKey(e => e.PreOrderPaymentId);

                entity.ToTable("WSPreOrderPayments");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ImportDate)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.ImportDateTime).HasColumnType("datetime");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PordpayAmount)
                    .HasColumnName("pordpayAmount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordpayDescription)
                    .HasColumnName("pordpayDescription")
                    .HasMaxLength(2000);

                entity.Property(e => e.PordpayDocAmount)
                    .HasColumnName("pordpayDocAmount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PordpayDocDate)
                    .HasColumnName("pordpayDocDate")
                    .HasMaxLength(8);

                entity.Property(e => e.PordpayDocDateTime)
                    .HasColumnName("pordpayDocDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.PordpayDocId).HasColumnName("pordpayDocId");

                entity.Property(e => e.PordpayDocNumber)
                    .HasColumnName("pordpayDocNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.PordpayDocTypeId).HasColumnName("pordpayDocTypeId");

                entity.Property(e => e.PordpayFirstRegisteDate)
                    .HasColumnName("pordpayFirstRegisteDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.PordpayFirstRegisteDatePersian)
                    .HasColumnName("pordpayFirstRegisteDatePersian")
                    .HasMaxLength(8);

                entity.Property(e => e.PordpayFirstRegisterUserId).HasColumnName("pordpayFirstRegisterUserId");

                entity.Property(e => e.PordpayLinkAccDetailId).HasColumnName("pordpayLinkAccDetailId");

                entity.Property(e => e.PordpayLinkAccHeaderId).HasColumnName("pordpayLinkAccHeaderId");

                entity.Property(e => e.PordpayLinkAccHeaderNumber)
                    .HasColumnName("pordpayLinkAccHeaderNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.PordpayLinkAccVoucherId).HasColumnName("pordpayLinkAccVoucherId");

                entity.Property(e => e.PordpayLinkAccVoucherNumber)
                    .HasColumnName("pordpayLinkAccVoucherNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.PordpayPreOrderId).HasColumnName("pordpayPreOrderId");

                entity.Property(e => e.PordpayTypeId).HasColumnName("pordpayTypeId");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WspreOrderPaymentsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSPreOrderPayments_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WspreOrderPayments)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderPayments_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspreOrderPayments)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSPreOrderPayments_Languages");

                entity.HasOne(d => d.PordpayFirstRegisterUser)
                    .WithMany(p => p.WspreOrderPaymentsPordpayFirstRegisterUser)
                    .HasForeignKey(d => d.PordpayFirstRegisterUserId)
                    .HasConstraintName("FK_WSPreOrderPayments_Users");

                entity.HasOne(d => d.PordpayPreOrder)
                    .WithMany(p => p.WspreOrderPayments)
                    .HasForeignKey(d => d.PordpayPreOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderPayments_WSPreOrder");

                entity.HasOne(d => d.PordpayType)
                    .WithMany(p => p.WspreOrderPayments)
                    .HasForeignKey(d => d.PordpayTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderPayments_WSOrderPaymentTypes");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WspreOrderPaymentsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderPayments_Users1");
            });

            modelBuilder.Entity<WspreOrderPaymentsLang>(entity =>
            {
                entity.ToTable("WSPreOrderPayments_Lang");

                entity.Property(e => e.WspreOrderPaymentsLangId).HasColumnName("WSPreOrderPaymentsLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PordpayDescription)
                    .HasColumnName("pordpayDescription")
                    .HasMaxLength(2000);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspreOrderPaymentsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderPayments_Lang_Languages");

                entity.HasOne(d => d.PreOrderPayment)
                    .WithMany(p => p.WspreOrderPaymentsLang)
                    .HasForeignKey(d => d.PreOrderPaymentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderPayments_Lang_WSPreOrderPayments");
            });

            modelBuilder.Entity<WspreOrderPrdGroupMustExistReasonGroups>(entity =>
            {
                entity.HasKey(e => e.PrdGroupMustExistReasonGroupId);

                entity.ToTable("WSPreOrderPrdGroupMustExistReasonGroups");

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrdGroupMustExistReasonGroupTitle)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspreOrderPrdGroupMustExistReasonGroups)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasonGroups_Languages");
            });

            modelBuilder.Entity<WspreOrderPrdGroupMustExistReasonGroupsLang>(entity =>
            {
                entity.ToTable("WSPreOrderPrdGroupMustExistReasonGroups_Lang");

                entity.Property(e => e.WspreOrderPrdGroupMustExistReasonGroupsLangId).HasColumnName("WSPreOrderPrdGroupMustExistReasonGroupsLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrdGroupMustExistReasonGroupTitle)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspreOrderPrdGroupMustExistReasonGroupsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasonGroups_Lang_Languages");

                entity.HasOne(d => d.PrdGroupMustExistReasonGroup)
                    .WithMany(p => p.WspreOrderPrdGroupMustExistReasonGroupsLang)
                    .HasForeignKey(d => d.PrdGroupMustExistReasonGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasonGroups_Lang_WSPreOrderPrdGroupMustExistReasonGroups");
            });

            modelBuilder.Entity<WspreOrderPrdGroupMustExistReasons>(entity =>
            {
                entity.HasKey(e => e.PrdGroupMustExistReasonId);

                entity.ToTable("WSPreOrderPrdGroupMustExistReasons");

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CmpProjectId).HasColumnName("cmpProjectId");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrdFirstGroupId).HasColumnName("PrdFirstGroupID");

                entity.Property(e => e.Reason).HasMaxLength(4000);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.CmpProject)
                    .WithMany(p => p.WspreOrderPrdGroupMustExistReasons)
                    .HasForeignKey(d => d.CmpProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_CrmProjects");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.WspreOrderPrdGroupMustExistReasons)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_CrmCompany");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WspreOrderPrdGroupMustExistReasonsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_Users");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WspreOrderPrdGroupMustExistReasons)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspreOrderPrdGroupMustExistReasons)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_Languages");

                entity.HasOne(d => d.PrdFirstGroup)
                    .WithMany(p => p.WspreOrderPrdGroupMustExistReasons)
                    .HasForeignKey(d => d.PrdFirstGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_WSProductFirstGroup");

                entity.HasOne(d => d.PrdGroupMustExistReasonGroup)
                    .WithMany(p => p.WspreOrderPrdGroupMustExistReasons)
                    .HasForeignKey(d => d.PrdGroupMustExistReasonGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_WSPreOrderPrdGroupMustExistReasonGroups");

                entity.HasOne(d => d.PreOrder)
                    .WithMany(p => p.WspreOrderPrdGroupMustExistReasons)
                    .HasForeignKey(d => d.PreOrderId)
                    .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_WSPreOrder");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WspreOrderPrdGroupMustExistReasonsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_Users1");
            });

            modelBuilder.Entity<WspreOrderPrdGroupMustExistReasonsLang>(entity =>
            {
                entity.ToTable("WSPreOrderPrdGroupMustExistReasons_Lang");

                entity.Property(e => e.WspreOrderPrdGroupMustExistReasonsLangId).HasColumnName("WSPreOrderPrdGroupMustExistReasonsLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Reason).HasMaxLength(4000);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspreOrderPrdGroupMustExistReasonsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_Lang_Languages");

                entity.HasOne(d => d.PrdGroupMustExistReason)
                    .WithMany(p => p.WspreOrderPrdGroupMustExistReasonsLang)
                    .HasForeignKey(d => d.PrdGroupMustExistReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_Lang_WSPreOrderPrdGroupMustExistReasons");
            });

            modelBuilder.Entity<WspreOrderStatus>(entity =>
            {
                entity.HasKey(e => e.PreOrderStatusId);

                entity.ToTable("WSPreOrderStatus");

                entity.Property(e => e.PreOrderStatusId).ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PreOrderStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WspreOrderStatusFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSPreOrderStatus_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WspreOrderStatus)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderStatus_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspreOrderStatus)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSPreOrderStatus_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WspreOrderStatusUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderStatus_Users");
            });

            modelBuilder.Entity<WspreOrderStatusLang>(entity =>
            {
                entity.ToTable("WSPreOrderStatus_Lang");

                entity.Property(e => e.WspreOrderStatusLangId).HasColumnName("WSPreOrderStatusLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PreOrderStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WspreOrderStatusLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderStatus_Lang_Languages");

                entity.HasOne(d => d.PreOrderStatusNavigation)
                    .WithMany(p => p.WspreOrderStatusLang)
                    .HasForeignKey(d => d.PreOrderStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSPreOrderStatus_Lang_WSPreOrderStatus");
            });

            modelBuilder.Entity<WsproductColor>(entity =>
            {
                entity.HasKey(e => e.ProductColorId);

                entity.ToTable("WSProductColor");

                entity.Property(e => e.ProductColorId).HasColumnName("ProductColorID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ColorDescription).HasMaxLength(300);

                entity.Property(e => e.ColorEn).HasMaxLength(100);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsproductColorFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSProductColor_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductColor)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSProductColor_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsproductColorUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductColor_Users");
            });

            modelBuilder.Entity<WsproductColorLang>(entity =>
            {
                entity.ToTable("WSProductColor_Lang");

                entity.Property(e => e.WsproductColorLangId).HasColumnName("WSProductColorLangID");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ColorDescription).HasMaxLength(300);

                entity.Property(e => e.ColorEn).HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProductColorId).HasColumnName("ProductColorID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductColorLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductColor_Lang_Languages");

                entity.HasOne(d => d.ProductColor)
                    .WithMany(p => p.WsproductColorLang)
                    .HasForeignKey(d => d.ProductColorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductColor_Lang_WSProductColor");
            });

            modelBuilder.Entity<WsproductCost>(entity =>
            {
                entity.HasKey(e => e.ProductCostId);

                entity.ToTable("WSProductCost");

                entity.Property(e => e.ProductCostId).HasColumnName("ProductCostID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CurrencyCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.DocDate)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.DocDateTime).HasColumnType("datetime");

                entity.Property(e => e.DocNumber).HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.OtherCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.ReleasingCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SlagCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TransportCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Whid).HasColumnName("WHId");

                entity.HasOne(d => d.CurrencyUnit)
                    .WithMany(p => p.WsproductCost)
                    .HasForeignKey(d => d.CurrencyUnitId)
                    .HasConstraintName("FK_WSProductCost_WSCurrencyUnits");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsproductCostFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSProductCost_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsproductCost)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductCost_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductCost)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSProductCost_Languages");

                entity.HasOne(d => d.Prd)
                    .WithMany(p => p.WsproductCost)
                    .HasForeignKey(d => d.PrdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductCost_WSProducts");

                entity.HasOne(d => d.ProductCostGroup)
                    .WithMany(p => p.WsproductCost)
                    .HasForeignKey(d => d.ProductCostGroupId)
                    .HasConstraintName("FK_WSProductCost_WSProductCostGroup");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsproductCostUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductCost_Users");

                entity.HasOne(d => d.Wh)
                    .WithMany(p => p.WsproductCost)
                    .HasForeignKey(d => d.Whid)
                    .HasConstraintName("FK_WSProductCost_WSWareHouse");
            });

            modelBuilder.Entity<WsproductCostGroup>(entity =>
            {
                entity.HasKey(e => e.ProductCostGroupId);

                entity.ToTable("WSProductCostGroup");

                entity.Property(e => e.ProductCostGroupId).HasColumnName("ProductCostGroupID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProductCostGroupDesc).HasMaxLength(200);

                entity.Property(e => e.ProductCostGroupName).HasMaxLength(100);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsproductCostGroupFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSProductCostGroup_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductCostGroup)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSProductCostGroup_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsproductCostGroupUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductCostGroup_Users");
            });

            modelBuilder.Entity<WsproductCostGroupLang>(entity =>
            {
                entity.ToTable("WSProductCostGroup_Lang");

                entity.Property(e => e.WsproductCostGroupLangId).HasColumnName("WSProductCostGroupLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProductCostGroupDesc).HasMaxLength(200);

                entity.Property(e => e.ProductCostGroupId).HasColumnName("ProductCostGroupID");

                entity.Property(e => e.ProductCostGroupName).HasMaxLength(100);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductCostGroupLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductCostGroup_Lang_Languages");

                entity.HasOne(d => d.ProductCostGroup)
                    .WithMany(p => p.WsproductCostGroupLang)
                    .HasForeignKey(d => d.ProductCostGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductCostGroup_Lang_WSProductCostGroup");
            });

            modelBuilder.Entity<WsproductCostLang>(entity =>
            {
                entity.ToTable("WSProductCost_Lang");

                entity.Property(e => e.WsproductCostLangId).HasColumnName("WSProductCostLangID");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProductCostId).HasColumnName("ProductCostID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductCostLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductCost_Lang_Languages");

                entity.HasOne(d => d.ProductCost)
                    .WithMany(p => p.WsproductCostLang)
                    .HasForeignKey(d => d.ProductCostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductCost_Lang_WSProductCost");
            });

            modelBuilder.Entity<WsproductFirstGroup>(entity =>
            {
                entity.HasKey(e => e.PrdFirstGroupId);

                entity.ToTable("WSProductFirstGroup");

                entity.Property(e => e.PrdFirstGroupId).HasColumnName("PrdFirstGroupID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Fgcode)
                    .HasColumnName("FGCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Fgdescription)
                    .HasColumnName("FGDescription")
                    .HasMaxLength(300);

                entity.Property(e => e.FginactiveInBuy).HasColumnName("FGInactiveInBuy");

                entity.Property(e => e.FginactiveInSale).HasColumnName("FGInactiveInSale");

                entity.Property(e => e.Fgname)
                    .IsRequired()
                    .HasColumnName("FGName")
                    .HasMaxLength(100);

                entity.Property(e => e.FgnameEn)
                    .HasColumnName("FGNameEn")
                    .HasMaxLength(100);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsproductFirstGroup)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductFirstGroup_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductFirstGroup)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSProductFirstGroup_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsproductFirstGroup)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductFirstGroup_Users");
            });

            modelBuilder.Entity<WsproductFirstGroupLang>(entity =>
            {
                entity.ToTable("WSProductFirstGroup_Lang");

                entity.Property(e => e.WsproductFirstGroupLangId).HasColumnName("WSProductFirstGroupLangID");

                entity.Property(e => e.Fgdescription)
                    .HasColumnName("FGDescription")
                    .HasMaxLength(300);

                entity.Property(e => e.Fgname)
                    .IsRequired()
                    .HasColumnName("FGName")
                    .HasMaxLength(100);

                entity.Property(e => e.FgnameEn)
                    .HasColumnName("FGNameEn")
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrdFirstGroupId).HasColumnName("PrdFirstGroupID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductFirstGroupLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductFirstGroup_Lang_Languages");

                entity.HasOne(d => d.PrdFirstGroup)
                    .WithMany(p => p.WsproductFirstGroupLang)
                    .HasForeignKey(d => d.PrdFirstGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductFirstGroup_Lang_WSProductFirstGroup");
            });

            modelBuilder.Entity<WsproductGallery>(entity =>
            {
                entity.HasKey(e => e.ProductGalleryId);

                entity.ToTable("WSProductGallery");

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FileName).HasMaxLength(200);

                entity.Property(e => e.FilePath).HasMaxLength(500);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FolderName).HasMaxLength(50);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsproductGalleryFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductGallery_FirstRegisterUsers");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsproductGallery)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductGallery_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductGallery)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductGallery_Languages");

                entity.HasOne(d => d.Prd)
                    .WithMany(p => p.WsproductGallery)
                    .HasForeignKey(d => d.PrdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductGallery_WSProducts");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsproductGalleryUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductGallery_Users");
            });

            modelBuilder.Entity<WsproductImportFromExcel>(entity =>
            {
                entity.ToTable("WSProductImportFromExcel");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CostCurrencyCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CostDescription).HasMaxLength(500);

                entity.Property(e => e.CostDocDate).HasMaxLength(50);

                entity.Property(e => e.CostDocNumber).HasMaxLength(50);

                entity.Property(e => e.CostOtherCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CostReleasingCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CostSlagCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CostTransportCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DuplicatedIds)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrdAutoCharBarCodeTypeId).HasColumnName("prdAutoCharBarCodeTypeId");

                entity.Property(e => e.PrdAutoCharBarcode).HasMaxLength(50);

                entity.Property(e => e.PrdAutoNumBarcode).HasMaxLength(50);

                entity.Property(e => e.PrdBarCode).HasMaxLength(50);

                entity.Property(e => e.PrdCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PrdDescription).HasMaxLength(4000);

                entity.Property(e => e.PrdDesign).HasMaxLength(100);

                entity.Property(e => e.PrdFirstBarcode).HasMaxLength(50);

                entity.Property(e => e.PrdFirstSerial).HasMaxLength(50);

                entity.Property(e => e.PrdLatinName).HasMaxLength(200);

                entity.Property(e => e.PrdModel).HasMaxLength(200);

                entity.Property(e => e.PrdName)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.PrdSecondBarcode).HasMaxLength(50);

                entity.Property(e => e.PrdSecondSerial).HasMaxLength(50);

                entity.Property(e => e.PrdSize).HasMaxLength(50);

                entity.Property(e => e.PrdThirdBarcode).HasMaxLength(50);

                entity.Property(e => e.PrdThirdSerial).HasMaxLength(50);

                entity.Property(e => e.PrdType).HasMaxLength(100);

                entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PriceCooperationPrice).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PriceCurrencyPrice).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PriceDescription).HasMaxLength(500);

                entity.Property(e => e.PriceDiscount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PriceDiscountPrecent).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PriceDocDate).HasMaxLength(50);

                entity.Property(e => e.PriceDocNumber).HasMaxLength(50);

                entity.Property(e => e.PriceOtherPrice).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PricePercent).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.CostCurrencyUnit)
                    .WithMany(p => p.WsproductImportFromExcelCostCurrencyUnit)
                    .HasForeignKey(d => d.CostCurrencyUnitId)
                    .HasConstraintName("FK_WSProductImportFromExcel_WSCurrencyUnits1");

                entity.HasOne(d => d.CostProductCostGroup)
                    .WithMany(p => p.WsproductImportFromExcel)
                    .HasForeignKey(d => d.CostProductCostGroupId)
                    .HasConstraintName("FK_WSProductImportFromExcel_WSProductCostGroup");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsproductImportFromExcelFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSProductImportFromExcel_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductImportFromExcel)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSProductImportFromExcel_Languages");

                entity.HasOne(d => d.PrdColor)
                    .WithMany(p => p.WsproductImportFromExcel)
                    .HasForeignKey(d => d.PrdColorId)
                    .HasConstraintName("FK_WSProductImportFromExcel_WSProductColor");

                entity.HasOne(d => d.PrdUnit)
                    .WithMany(p => p.WsproductImportFromExcel)
                    .HasForeignKey(d => d.PrdUnitId)
                    .HasConstraintName("FK_WSProductImportFromExcel_WSProductUnits");

                entity.HasOne(d => d.PriceCurrencyUnit)
                    .WithMany(p => p.WsproductImportFromExcelPriceCurrencyUnit)
                    .HasForeignKey(d => d.PriceCurrencyUnitId)
                    .HasConstraintName("FK_WSProductImportFromExcel_WSCurrencyUnits");

                entity.HasOne(d => d.PriceProductPriceGroup)
                    .WithMany(p => p.WsproductImportFromExcel)
                    .HasForeignKey(d => d.PriceProductPriceGroupId)
                    .HasConstraintName("FK_WSProductImportFromExcel_WSProductPriceGroup");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsproductImportFromExcelUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductImportFromExcel_Users");
            });

            modelBuilder.Entity<WsproductImportFromExcelFields>(entity =>
            {
                entity.ToTable("WSProductImportFromExcelFields");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FieldCaption).HasMaxLength(200);

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.FieldType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.SpinsertParamName)
                    .HasColumnName("SPInsertParamName")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsproductImportFromExcelFields)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSProductImportFromExcelFields_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductImportFromExcelFields)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSProductImportFromExcelFields_Languages");
            });

            modelBuilder.Entity<WsproductImportFromExcelFieldsLang>(entity =>
            {
                entity.HasKey(e => e.WsproductImportFromExcelFieldsLangId);

                entity.ToTable("WSProductImportFromExcelFields_Lang");

                entity.Property(e => e.WsproductImportFromExcelFieldsLangId).HasColumnName("WSProductImportFromExcelFieldsLangID");

                entity.Property(e => e.FieldCaption).HasMaxLength(200);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.WsproductImportFromExcelFieldsLang)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductImportFromExcelFields_Lang_WSProductImportFromExcelFields");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductImportFromExcelFieldsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductImportFromExcelFields_Lang_Languages");
            });

            modelBuilder.Entity<WsproductPicture>(entity =>
            {
                entity.HasKey(e => e.PrdPictureId);

                entity.ToTable("WSProductPicture");

                entity.Property(e => e.PrdPictureId).HasColumnName("PrdPictureID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrdFifthPic).HasColumnType("image");

                entity.Property(e => e.PrdFifthPicDesc).HasMaxLength(50);

                entity.Property(e => e.PrdFirstPic).HasColumnType("image");

                entity.Property(e => e.PrdFirstPicDesc).HasMaxLength(50);

                entity.Property(e => e.PrdFourthPic).HasColumnType("image");

                entity.Property(e => e.PrdFourthPicDesc).HasMaxLength(50);

                entity.Property(e => e.PrdSecondPic).HasColumnType("image");

                entity.Property(e => e.PrdSecondPicDesc).HasMaxLength(50);

                entity.Property(e => e.PrdThirdPic).HasColumnType("image");

                entity.Property(e => e.PrdThirdPicDesc).HasMaxLength(50);

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Whid).HasColumnName("WHId");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsproductPictureFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSProductPicture_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsproductPicture)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductPicture_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductPicture)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSProductPicture_Languages");

                entity.HasOne(d => d.Prd)
                    .WithMany(p => p.WsproductPicture)
                    .HasForeignKey(d => d.PrdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductPicture_WSProducts");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsproductPictureUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductPicture_Users");

                entity.HasOne(d => d.Wh)
                    .WithMany(p => p.WsproductPicture)
                    .HasForeignKey(d => d.Whid)
                    .HasConstraintName("FK_WSProductPicture_WSWareHouse");
            });

            modelBuilder.Entity<WsproductPictureLang>(entity =>
            {
                entity.ToTable("WSProductPicture_Lang");

                entity.Property(e => e.WsproductPictureLangId).HasColumnName("WSProductPictureLangID");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrdFifthPicDesc).HasMaxLength(50);

                entity.Property(e => e.PrdFirstPicDesc).HasMaxLength(50);

                entity.Property(e => e.PrdFourthPicDesc).HasMaxLength(50);

                entity.Property(e => e.PrdPictureId).HasColumnName("PrdPictureID");

                entity.Property(e => e.PrdSecondPicDesc).HasMaxLength(50);

                entity.Property(e => e.PrdThirdPicDesc).HasMaxLength(50);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductPictureLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductPicture_Lang_Languages");

                entity.HasOne(d => d.PrdPicture)
                    .WithMany(p => p.WsproductPictureLang)
                    .HasForeignKey(d => d.PrdPictureId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductPicture_Lang_WSProductPicture");
            });

            modelBuilder.Entity<WsproductPrice>(entity =>
            {
                entity.HasKey(e => e.PrdPriceId);

                entity.ToTable("WSProductPrice");

                entity.Property(e => e.PrdPriceId).HasColumnName("PrdPriceID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CooperationPrice).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CurrencyPrice).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Discount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DiscountPrecent).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DocDate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DocDateTime).HasColumnType("datetime");

                entity.Property(e => e.DocNumber).HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.OtherPrice).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PricePercent).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Whid).HasColumnName("WHId");

                entity.HasOne(d => d.CurrencyUnit)
                    .WithMany(p => p.WsproductPrice)
                    .HasForeignKey(d => d.CurrencyUnitId)
                    .HasConstraintName("FK_WSProductPrice_WSCurrencyUnits");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsproductPriceFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSProductPrice_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsproductPrice)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductPrice_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductPrice)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSProductPrice_Languages");

                entity.HasOne(d => d.Prd)
                    .WithMany(p => p.WsproductPrice)
                    .HasForeignKey(d => d.PrdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductPrice_WSProducts");

                entity.HasOne(d => d.ProductPriceGroup)
                    .WithMany(p => p.WsproductPrice)
                    .HasForeignKey(d => d.ProductPriceGroupId)
                    .HasConstraintName("FK_WSProductPrice_WSProductPriceGroup");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsproductPriceUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductPrice_Users");

                entity.HasOne(d => d.Wh)
                    .WithMany(p => p.WsproductPrice)
                    .HasForeignKey(d => d.Whid)
                    .HasConstraintName("FK_WSProductPrice_WSWareHouse");
            });

            modelBuilder.Entity<WsproductPriceGroup>(entity =>
            {
                entity.HasKey(e => e.ProductPriceGroupId);

                entity.ToTable("WSProductPriceGroup");

                entity.Property(e => e.ProductPriceGroupId).HasColumnName("ProductPriceGroupID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProductPriceGroupDesc).HasMaxLength(200);

                entity.Property(e => e.ProductPriceGroupName).HasMaxLength(100);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.ShpdefaultPriceGroup).HasColumnName("SHPDefaultPriceGroup");

                entity.Property(e => e.ShppriceGroupVisible).HasColumnName("SHPPriceGroupVisible");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsproductPriceGroupFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSProductPriceGroup_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductPriceGroup)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSProductPriceGroup_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsproductPriceGroupUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductPriceGroup_Users");
            });

            modelBuilder.Entity<WsproductPriceGroupLang>(entity =>
            {
                entity.ToTable("WSProductPriceGroup_Lang");

                entity.Property(e => e.WsproductPriceGroupLangId).HasColumnName("WSProductPriceGroupLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProductPriceGroupDesc).HasMaxLength(200);

                entity.Property(e => e.ProductPriceGroupId).HasColumnName("ProductPriceGroupID");

                entity.Property(e => e.ProductPriceGroupName).HasMaxLength(100);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductPriceGroupLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductPriceGroup_Lang_Languages");

                entity.HasOne(d => d.ProductPriceGroup)
                    .WithMany(p => p.WsproductPriceGroupLang)
                    .HasForeignKey(d => d.ProductPriceGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductPriceGroup_Lang_WSProductPriceGroup");
            });

            modelBuilder.Entity<WsproductPriceLang>(entity =>
            {
                entity.ToTable("WSProductPrice_Lang");

                entity.Property(e => e.WsproductPriceLangId).HasColumnName("WSProductPriceLangID");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrdPriceId).HasColumnName("PrdPriceID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductPriceLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductPrice_Lang_Languages");

                entity.HasOne(d => d.PrdPrice)
                    .WithMany(p => p.WsproductPriceLang)
                    .HasForeignKey(d => d.PrdPriceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductPrice_Lang_WSProductPrice");
            });

            modelBuilder.Entity<WsproductSecondGroup>(entity =>
            {
                entity.HasKey(e => e.PrdSecondGroupId);

                entity.ToTable("WSProductSecondGroup");

                entity.Property(e => e.PrdSecondGroupId).HasColumnName("PrdSecondGroupID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Sgcode)
                    .HasColumnName("SGCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Sgdescription)
                    .HasColumnName("SGDescription")
                    .HasMaxLength(300);

                entity.Property(e => e.SginactiveInBuy).HasColumnName("SGInactiveInBuy");

                entity.Property(e => e.SginactiveInSale).HasColumnName("SGInactiveInSale");

                entity.Property(e => e.SglinkAccGroupCode)
                    .HasColumnName("SGLinkAccGroupCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SglinkAccGroupId).HasColumnName("SGLinkAccGroupId");

                entity.Property(e => e.Sgname)
                    .IsRequired()
                    .HasColumnName("SGName")
                    .HasMaxLength(200);

                entity.Property(e => e.SgnameEn)
                    .HasColumnName("SGNameEn")
                    .HasMaxLength(200);

                entity.HasOne(d => d.FirstGroup)
                    .WithMany(p => p.WsproductSecondGroup)
                    .HasForeignKey(d => d.FirstGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductSecondGroup_WSProductFirstGroup");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsproductSecondGroupFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSProductSecondGroup_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsproductSecondGroup)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductSecondGroup_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductSecondGroup)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSProductSecondGroup_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsproductSecondGroupUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductSecondGroup_Users");
            });

            modelBuilder.Entity<WsproductSecondGroupLang>(entity =>
            {
                entity.ToTable("WSProductSecondGroup_Lang");

                entity.Property(e => e.WsproductSecondGroupLangId).HasColumnName("WSProductSecondGroupLangId");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrdSecondGroupId).HasColumnName("PrdSecondGroupID");

                entity.Property(e => e.Sgdescription)
                    .HasColumnName("SGDescription")
                    .HasMaxLength(300);

                entity.Property(e => e.Sgname)
                    .IsRequired()
                    .HasColumnName("SGName")
                    .HasMaxLength(200);

                entity.Property(e => e.SgnameEn)
                    .HasColumnName("SGNameEn")
                    .HasMaxLength(200);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductSecondGroupLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductSecondGroup_Lang_Languages");

                entity.HasOne(d => d.PrdSecondGroup)
                    .WithMany(p => p.WsproductSecondGroupLang)
                    .HasForeignKey(d => d.PrdSecondGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductSecondGroup_Lang_WSProductSecondGroup");
            });

            modelBuilder.Entity<WsproductShpStockManageTypes>(entity =>
            {
                entity.HasKey(e => e.ProductShpStockManageTypeId);

                entity.ToTable("WSProductShpStockManageTypes");

                entity.Property(e => e.ProductShpStockManageTypeId).ValueGeneratedNever();

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProductShpStockManageType).HasMaxLength(200);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsproductShpStockManageTypesFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductShpStockManageTypes_FirstRegisterUsers");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsproductShpStockManageTypes)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductShpStockManageTypes_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductShpStockManageTypes)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductShpStockManageTypes_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsproductShpStockManageTypesUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductShpStockManageTypes_Users");
            });

            modelBuilder.Entity<WsproductShpStockManageTypesLang>(entity =>
            {
                entity.ToTable("WSProductShpStockManageTypes_Lang");

                entity.Property(e => e.WsproductShpStockManageTypesLangId).HasColumnName("WSProductShpStockManageTypesLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProductShpStockManageType).HasMaxLength(200);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductShpStockManageTypesLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductShpStockManageTypes_Lang_Languages");

                entity.HasOne(d => d.ProductShpStockManageTypeNavigation)
                    .WithMany(p => p.WsproductShpStockManageTypesLang)
                    .HasForeignKey(d => d.ProductShpStockManageTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductShpStockManageTypes_Lang_WSProductShpStockManageTypes");
            });

            modelBuilder.Entity<WsproductSpecification>(entity =>
            {
                entity.HasKey(e => e.ProductSpecificationId);

                entity.ToTable("WSProductSpecification");

                entity.Property(e => e.ProductSpecificationId).HasColumnName("ProductSpecificationID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Specification)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.SpecificationI).HasMaxLength(300);

                entity.Property(e => e.SpecificationIi)
                    .HasColumnName("SpecificationII")
                    .HasMaxLength(300);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsproductSpecificationFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSProductSpecification_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsproductSpecification)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductSpecification_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductSpecification)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSProductSpecification_Languages");

                entity.HasOne(d => d.Prd)
                    .WithMany(p => p.WsproductSpecification)
                    .HasForeignKey(d => d.PrdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductSpecification_WSProducts");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsproductSpecificationUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductSpecification_Users");
            });

            modelBuilder.Entity<WsproductSpecificationLang>(entity =>
            {
                entity.ToTable("WSProductSpecification_Lang");

                entity.Property(e => e.WsproductSpecificationLangId).HasColumnName("WSProductSpecificationLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProductSpecificationId).HasColumnName("ProductSpecificationID");

                entity.Property(e => e.Specification)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.SpecificationI).HasMaxLength(300);

                entity.Property(e => e.SpecificationIi)
                    .HasColumnName("SpecificationII")
                    .HasMaxLength(300);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductSpecificationLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductSpecification_Lang_Languages");

                entity.HasOne(d => d.ProductSpecification)
                    .WithMany(p => p.WsproductSpecificationLang)
                    .HasForeignKey(d => d.ProductSpecificationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductSpecification_Lang_WSProductSpecification");
            });

            modelBuilder.Entity<WsproductUnits>(entity =>
            {
                entity.HasKey(e => e.ProductUnitId);

                entity.ToTable("WSProductUnits");

                entity.Property(e => e.ProductUnitId).HasColumnName("ProductUnitID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.Fcr).HasColumnName("FCR");

                entity.Property(e => e.Fcri).HasColumnName("FCRI");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Shpunit)
                    .HasColumnName("SHPUnit")
                    .HasMaxLength(100);

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UnitEn).HasMaxLength(100);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsproductUnitsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSProductUnits_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductUnits)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSProductUnits_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsproductUnitsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductUnits_Users");
            });

            modelBuilder.Entity<WsproductUnitsLang>(entity =>
            {
                entity.ToTable("WSProductUnits_Lang");

                entity.Property(e => e.WsproductUnitsLangId).HasColumnName("WSProductUnitsLangID");

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProductUnitId).HasColumnName("ProductUnitID");

                entity.Property(e => e.Shpunit)
                    .HasColumnName("SHPUnit")
                    .HasMaxLength(100);

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UnitEn).HasMaxLength(100);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductUnitsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductUnits_Lang_Languages");

                entity.HasOne(d => d.ProductUnit)
                    .WithMany(p => p.WsproductUnitsLang)
                    .HasForeignKey(d => d.ProductUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductUnits_Lang_WSProductUnits");
            });

            modelBuilder.Entity<Wsproducts>(entity =>
            {
                entity.HasKey(e => e.ProductId);

                entity.ToTable("WSProducts");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrdAutoCharBarCodeTypeId).HasColumnName("prdAutoCharBarCodeTypeId");

                entity.Property(e => e.PrdAutoCharBarcode).HasMaxLength(50);

                entity.Property(e => e.PrdAutoNumBarcode).HasMaxLength(50);

                entity.Property(e => e.PrdBarCode).HasMaxLength(50);

                entity.Property(e => e.PrdCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PrdDescription).HasMaxLength(4000);

                entity.Property(e => e.PrdDesign).HasMaxLength(100);

                entity.Property(e => e.PrdFirstBarcode).HasMaxLength(50);

                entity.Property(e => e.PrdFirstSerial).HasMaxLength(50);

                entity.Property(e => e.PrdGroupId).HasColumnName("PrdGroupID");

                entity.Property(e => e.PrdLatinName).HasMaxLength(200);

                entity.Property(e => e.PrdLinkAccPrdCode).HasMaxLength(50);

                entity.Property(e => e.PrdModel).HasMaxLength(200);

                entity.Property(e => e.PrdName).HasMaxLength(1000);

                entity.Property(e => e.PrdSecondBarcode).HasMaxLength(50);

                entity.Property(e => e.PrdSecondSerial).HasMaxLength(50);

                entity.Property(e => e.PrdShpcode)
                    .HasColumnName("PrdSHPCode")
                    .HasMaxLength(50);

                entity.Property(e => e.PrdShpdescription)
                    .HasColumnName("PrdSHPDescription")
                    .HasColumnType("ntext");

                entity.Property(e => e.PrdShpdescriptionIi)
                    .HasColumnName("PrdSHPDescriptionII")
                    .HasColumnType("ntext");

                entity.Property(e => e.PrdShphiddenPriceInNoStock).HasColumnName("PrdSHPHiddenPriceInNoStock");

                entity.Property(e => e.PrdShpisActive).HasColumnName("PrdSHPIsActive");

                entity.Property(e => e.PrdShpmodel)
                    .HasColumnName("PrdSHPModel")
                    .HasMaxLength(200);

                entity.Property(e => e.PrdShpotherSupplierId).HasColumnName("PrdSHPOtherSupplierId");

                entity.Property(e => e.PrdShpselfSupplier).HasColumnName("PrdSHPSelfSupplier");

                entity.Property(e => e.PrdShpstockManageTypeId).HasColumnName("PrdSHPStockManageTypeId");

                entity.Property(e => e.PrdShpstockManualyCount).HasColumnName("PrdSHPStockManualyCount");

                entity.Property(e => e.PrdShptitle)
                    .HasColumnName("PrdSHPTitle")
                    .HasMaxLength(1000);

                entity.Property(e => e.PrdSize).HasMaxLength(50);

                entity.Property(e => e.PrdThirdBarcode).HasMaxLength(50);

                entity.Property(e => e.PrdThirdSerial).HasMaxLength(50);

                entity.Property(e => e.PrdType).HasMaxLength(100);

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsproductsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSProducts_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.Wsproducts)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProducts_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.Wsproducts)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSProducts_Languages");

                entity.HasOne(d => d.PrdColor)
                    .WithMany(p => p.Wsproducts)
                    .HasForeignKey(d => d.PrdColorId)
                    .HasConstraintName("FK_WSProducts_WSProductColor");

                entity.HasOne(d => d.PrdGroup)
                    .WithMany(p => p.Wsproducts)
                    .HasForeignKey(d => d.PrdGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProducts_WSProductSecondGroup");

                entity.HasOne(d => d.PrdShpotherSupplier)
                    .WithMany(p => p.Wsproducts)
                    .HasForeignKey(d => d.PrdShpotherSupplierId)
                    .HasConstraintName("FK_WSProducts_CrmCompany");

                entity.HasOne(d => d.PrdUnit)
                    .WithMany(p => p.Wsproducts)
                    .HasForeignKey(d => d.PrdUnitId)
                    .HasConstraintName("FK_WSProducts_WSProductUnits");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsproductsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProducts_Users");
            });

            modelBuilder.Entity<WsproductsLang>(entity =>
            {
                entity.ToTable("WSProducts_Lang");

                entity.Property(e => e.WsproductsLangId).HasColumnName("WSProductsLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrdDescription).HasMaxLength(4000);

                entity.Property(e => e.PrdDesign).HasMaxLength(100);

                entity.Property(e => e.PrdLatinName).HasMaxLength(200);

                entity.Property(e => e.PrdModel).HasMaxLength(200);

                entity.Property(e => e.PrdName).HasMaxLength(1000);

                entity.Property(e => e.PrdShpdescription)
                    .HasColumnName("PrdSHPDescription")
                    .HasColumnType("ntext");

                entity.Property(e => e.PrdShpdescriptionIi)
                    .HasColumnName("PrdSHPDescriptionII")
                    .HasColumnType("ntext");

                entity.Property(e => e.PrdShpmodel)
                    .HasColumnName("PrdSHPModel")
                    .HasMaxLength(200);

                entity.Property(e => e.PrdShptitle)
                    .HasColumnName("PrdSHPTitle")
                    .HasMaxLength(1000);

                entity.Property(e => e.PrdSize).HasMaxLength(50);

                entity.Property(e => e.PrdType).HasMaxLength(100);

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProducts_Lang_Languages");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.WsproductsLang)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProducts_Lang_WSProducts");
            });

            modelBuilder.Entity<WsproductsRate>(entity =>
            {
                entity.HasKey(e => e.ProductRateId);

                entity.ToTable("WSProductsRate");

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Ipaddress)
                    .HasColumnName("IPAddress")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.CrmCompany)
                    .WithMany(p => p.WsproductsRate)
                    .HasForeignKey(d => d.CrmCompanyId)
                    .HasConstraintName("FK_WSProductsRate_CrmCompany");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsproductsRateFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSProductsRate_FirstRegisterUsers");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsproductsRate)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductsRate_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductsRate)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductsRate_Languages");

                entity.HasOne(d => d.Prd)
                    .WithMany(p => p.WsproductsRate)
                    .HasForeignKey(d => d.PrdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductsRate_WSProducts");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsproductsRateUser)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_WSProductsRate_Users");
            });

            modelBuilder.Entity<WsproductsUserDiscount>(entity =>
            {
                entity.HasKey(e => e.ProductsUserDiscountId);

                entity.ToTable("WSProductsUserDiscount");

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.DiscountPercent).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.ProductsUserDiscountDate)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ProductsUserDiscountDateTime).HasColumnType("datetime");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.DiscountProduct)
                    .WithMany(p => p.WsproductsUserDiscount)
                    .HasForeignKey(d => d.DiscountProductId)
                    .HasConstraintName("FK_WSProductsUserDiscount_WSProducts");

                entity.HasOne(d => d.DiscountUser)
                    .WithMany(p => p.WsproductsUserDiscountDiscountUser)
                    .HasForeignKey(d => d.DiscountUserId)
                    .HasConstraintName("FK_WSProductsUserDiscount_Users");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsproductsUserDiscountFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductsUserDiscount_Users1");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.WsproductsUserDiscount)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductsUserDiscount_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductsUserDiscount)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSProductsUserDiscount_Languages");

                entity.HasOne(d => d.ProductGroup)
                    .WithMany(p => p.WsproductsUserDiscount)
                    .HasForeignKey(d => d.ProductGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductsUserDiscount_WSProductSecondGroup");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsproductsUserDiscountUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductsUserDiscount_Users2");
            });

            modelBuilder.Entity<WsproductsUserDiscountLang>(entity =>
            {
                entity.ToTable("WSProductsUserDiscount_Lang");

                entity.Property(e => e.WsproductsUserDiscountLangId).HasColumnName("WSProductsUserDiscountLangID");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsproductsUserDiscountLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductsUserDiscount_Lang_Languages");

                entity.HasOne(d => d.ProductsUserDiscount)
                    .WithMany(p => p.WsproductsUserDiscountLang)
                    .HasForeignKey(d => d.ProductsUserDiscountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSProductsUserDiscount_Lang_WSProductsUserDiscount");
            });

            modelBuilder.Entity<WsregisterBarCode>(entity =>
            {
                entity.ToTable("WSRegisterBarCode");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BarCode).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Opr).HasComment("1:Resid-2:Havale-3:Factor");

                entity.Property(e => e.PrdName).HasMaxLength(50);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Whid).HasColumnName("WHId");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsregisterBarCode)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSRegisterBarCode_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsregisterBarCode)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSRegisterBarCode_Languages");
            });

            modelBuilder.Entity<WssettlementType>(entity =>
            {
                entity.ToTable("WSSettlementType");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian).HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WssettlementTypeFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSSettlementType_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WssettlementType)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSSettlementType_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WssettlementTypeUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSSettlementType_Users");
            });

            modelBuilder.Entity<WssettlementTypeLang>(entity =>
            {
                entity.HasKey(e => e.WssettlementTypeLangId);

                entity.ToTable("WSSettlementType_Lang");

                entity.Property(e => e.WssettlementTypeLangId).HasColumnName("WSSettlementTypeLangID");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.WssettlementTypeLang)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSSettlementType_Lang_WSSettlementType");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WssettlementTypeLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSSettlementType_Lang_Languages");
            });

            modelBuilder.Entity<Wssignature>(entity =>
            {
                entity.HasKey(e => e.SignatureId);

                entity.ToTable("WSSignature");

                entity.Property(e => e.SignatureId).HasColumnName("SignatureID");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Signature)
                    .IsRequired()
                    .HasColumnType("image");

                entity.Property(e => e.SignatureDescription).HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WssignatureFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSSignature_Users20");

                entity.HasOne(d => d.Fp)
                    .WithMany(p => p.Wssignature)
                    .HasForeignKey(d => d.Fpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSSignature_WSFinancialPeriod");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.Wssignature)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSSignature_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WssignatureUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSSignature_Users");
            });

            modelBuilder.Entity<WstmpEnterBarcodeOperation>(entity =>
            {
                entity.ToTable("WSTmpEnterBarcodeOperation");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Barcode).HasMaxLength(50);

                entity.Property(e => e.BarcodeKind).HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.RegisterTime).HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WstmpEnterBarcodeOperation)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSTmpEnterBarcodeOperation_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WstmpEnterBarcodeOperation)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSTmpEnterBarcodeOperation_Languages");
            });

            modelBuilder.Entity<WstmpEnterDocPrdWithBarcode>(entity =>
            {
                entity.ToTable("WSTmpEnterDocPrdWithBarcode");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AutoSerial).HasMaxLength(50);

                entity.Property(e => e.Barcode).HasMaxLength(50);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fpid).HasColumnName("FPId");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.RegisterTime).HasMaxLength(50);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WstmpEnterDocPrdWithBarcode)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSTmpEnterDocPrdWithBarcode_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WstmpEnterDocPrdWithBarcode)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSTmpEnterDocPrdWithBarcode_Languages");
            });

            modelBuilder.Entity<WstmpUserItemCopy>(entity =>
            {
                entity.HasKey(e => e.ItemId);

                entity.ToTable("WSTmpUserItemCopy");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CopyType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.Discount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DiscountI).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DiscountIpercent)
                    .HasColumnName("DiscountIPercent")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DiscountPercent).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Fcr).HasColumnName("FCR");

                entity.Property(e => e.Fcri).HasColumnName("FCRI");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.PrdPriceGroupId).HasColumnName("PrdPriceGroupID");

                entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QuantityDesc).HasMaxLength(1000);

                entity.Property(e => e.Tax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TaxIndex).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Tmp1)
                    .HasColumnName("tmp1")
                    .HasMaxLength(4000);

                entity.Property(e => e.Tmp2)
                    .HasColumnName("tmp2")
                    .HasMaxLength(4000);

                entity.Property(e => e.TotalPrice).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Whid).HasColumnName("WHId");

                entity.HasOne(d => d.CurrencyUnit)
                    .WithMany(p => p.WstmpUserItemCopy)
                    .HasForeignKey(d => d.CurrencyUnitId)
                    .HasConstraintName("FK_WSTmpUserItemCopy_WSCurrencyUnits");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WstmpUserItemCopyFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSTmpUserItemCopy_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WstmpUserItemCopy)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSTmpUserItemCopy_Languages");

                entity.HasOne(d => d.Prd)
                    .WithMany(p => p.WstmpUserItemCopy)
                    .HasForeignKey(d => d.PrdId)
                    .HasConstraintName("FK_WSTmpUserItemCopy_WSProducts");

                entity.HasOne(d => d.PrdUnit)
                    .WithMany(p => p.WstmpUserItemCopy)
                    .HasForeignKey(d => d.PrdUnitId)
                    .HasConstraintName("FK_WSTmpUserItemCopy_WSProductUnits");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WstmpUserItemCopyUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSTmpUserItemCopy_Users");

                entity.HasOne(d => d.Wh)
                    .WithMany(p => p.WstmpUserItemCopy)
                    .HasForeignKey(d => d.Whid)
                    .HasConstraintName("FK_WSTmpUserItemCopy_WsWareHouse");
            });

            modelBuilder.Entity<WsuserFavproductItems>(entity =>
            {
                entity.HasKey(e => e.UserFavproductItemId);

                entity.ToTable("WSUserFavproductItems");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FavprdIorderView).HasColumnName("FavprdIOrderView");

                entity.Property(e => e.FavprdIprdId).HasColumnName("FavprdIPrdId");

                entity.Property(e => e.FavprdIquantity).HasColumnName("FavprdIQuantity");

                entity.Property(e => e.FavprdIquantityDesc)
                    .HasColumnName("FavprdIQuantityDesc")
                    .HasMaxLength(1000);

                entity.Property(e => e.FavprdIwhid).HasColumnName("FavprdIWHId");

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FavprdIprd)
                    .WithMany(p => p.WsuserFavproductItems)
                    .HasForeignKey(d => d.FavprdIprdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSUserFavproductItems_WSProducts");

                entity.HasOne(d => d.FavprdIwh)
                    .WithMany(p => p.WsuserFavproductItems)
                    .HasForeignKey(d => d.FavprdIwhid)
                    .HasConstraintName("FK_WSUserFavproductItems_WSWareHouse");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsuserFavproductItemsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSUserFavproductItems_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsuserFavproductItems)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSUserFavproductItems_Languages");

                entity.HasOne(d => d.UserFavproduct)
                    .WithMany(p => p.WsuserFavproductItems)
                    .HasForeignKey(d => d.UserFavproductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSUserFavproductItems_WSUserFavproducts");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsuserFavproductItemsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSUserFavproductItems_Users");
            });

            modelBuilder.Entity<WsuserFavproductItemsLang>(entity =>
            {
                entity.ToTable("WSUserFavproductItems_Lang");

                entity.Property(e => e.WsuserFavproductItemsLangId).HasColumnName("WSUserFavproductItemsLangID");

                entity.Property(e => e.FavprdIquantityDesc)
                    .HasColumnName("FavprdIQuantityDesc")
                    .HasMaxLength(1000);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsuserFavproductItemsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSUserFavproductItems_Lang_Languages");

                entity.HasOne(d => d.UserFavproductItem)
                    .WithMany(p => p.WsuserFavproductItemsLang)
                    .HasForeignKey(d => d.UserFavproductItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSUserFavproductItems_Lang_WSUserFavproductItems");
            });

            modelBuilder.Entity<WsuserFavproducts>(entity =>
            {
                entity.HasKey(e => e.UserFavproductId);

                entity.ToTable("WSUserFavproducts");

                entity.Property(e => e.AppType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FavprdDesc).HasMaxLength(300);

                entity.Property(e => e.FavprdTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsuserFavproductsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .HasConstraintName("FK_WSUserFavproducts_Users20");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsuserFavproducts)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_WSUserFavproducts_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsuserFavproductsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSUserFavproducts_Users");
            });

            modelBuilder.Entity<WsuserFavproductsLang>(entity =>
            {
                entity.ToTable("WSUserFavproducts_Lang");

                entity.Property(e => e.WsuserFavproductsLangId).HasColumnName("WSUserFavproductsLangID");

                entity.Property(e => e.FavprdDesc).HasMaxLength(300);

                entity.Property(e => e.FavprdTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsuserFavproductsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSUserFavproducts_Lang_Languages");

                entity.HasOne(d => d.UserFavproduct)
                    .WithMany(p => p.WsuserFavproductsLang)
                    .HasForeignKey(d => d.UserFavproductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSUserFavproducts_Lang_WSUserFavproducts");
            });

            modelBuilder.Entity<WsverificationRequestDetails>(entity =>
            {
                entity.HasKey(e => e.VerificationRequestDetailId);

                entity.ToTable("WSVerificationRequestDetails");

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.VerifyDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsverificationRequestDetailsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationRequestDetails_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsverificationRequestDetails)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationRequestDetails_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsverificationRequestDetailsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationRequestDetails_Users2");

                entity.HasOne(d => d.VerificationRequest)
                    .WithMany(p => p.WsverificationRequestDetails)
                    .HasForeignKey(d => d.VerificationRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationRequestDetails_WSVerificationRequests");

                entity.HasOne(d => d.VerificationWorkFlow)
                    .WithMany(p => p.WsverificationRequestDetails)
                    .HasForeignKey(d => d.VerificationWorkFlowId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationRequestDetails_WSVerificationWorkFlows");

                entity.HasOne(d => d.VerificationWorkFlowStep)
                    .WithMany(p => p.WsverificationRequestDetails)
                    .HasForeignKey(d => d.VerificationWorkFlowStepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationRequestDetails_WSVerificationWorkFlowSteps");

                entity.HasOne(d => d.VerifyUser)
                    .WithMany(p => p.WsverificationRequestDetailsVerifyUser)
                    .HasForeignKey(d => d.VerifyUserId)
                    .HasConstraintName("FK_WSVerificationRequestDetails_Users");
            });

            modelBuilder.Entity<WsverificationRequestDetailsLang>(entity =>
            {
                entity.HasKey(e => e.WsverificationRequestDetailLangId);

                entity.ToTable("WSVerificationRequestDetails_Lang");

                entity.Property(e => e.WsverificationRequestDetailLangId).HasColumnName("WSVerificationRequestDetailLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsverificationRequestDetailsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationRequestDetails_Lang_Languages");

                entity.HasOne(d => d.VerificationRequestDetail)
                    .WithMany(p => p.WsverificationRequestDetailsLang)
                    .HasForeignKey(d => d.VerificationRequestDetailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationRequestDetails_Lang_WSVerificationRequestDetails");
            });

            modelBuilder.Entity<WsverificationRequests>(entity =>
            {
                entity.HasKey(e => e.VerificationRequestId);

                entity.ToTable("WSVerificationRequests");

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.VerificationReqDateTime).HasColumnType("datetime");

                entity.Property(e => e.VerificationReqExpiredDateTime).HasColumnType("datetime");

                entity.Property(e => e.VerificationReqText).IsRequired();

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsverificationRequestsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationRequests_Users1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsverificationRequests)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationRequests_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsverificationRequestsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationRequests_Users2");

                entity.HasOne(d => d.VerificationReqUser)
                    .WithMany(p => p.WsverificationRequestsVerificationReqUser)
                    .HasForeignKey(d => d.VerificationReqUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationRequests_Users");

                entity.HasOne(d => d.VerificationWorkFlow)
                    .WithMany(p => p.WsverificationRequests)
                    .HasForeignKey(d => d.VerificationWorkFlowId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationRequests_WSVerificationWorkFlows");
            });

            modelBuilder.Entity<WsverificationRequestsLang>(entity =>
            {
                entity.HasKey(e => e.WsverificationRequestLangId);

                entity.ToTable("WSVerificationRequests_Lang");

                entity.Property(e => e.WsverificationRequestLangId).HasColumnName("WSVerificationRequestLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.VerificationReqText).IsRequired();

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsverificationRequestsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationRequests_Lang_Languages");

                entity.HasOne(d => d.VerificationRequest)
                    .WithMany(p => p.WsverificationRequestsLang)
                    .HasForeignKey(d => d.VerificationRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationRequests_Lang_WSVerificationRequests");
            });

            modelBuilder.Entity<WsverificationWorkFlowSteps>(entity =>
            {
                entity.HasKey(e => e.VerificationWorkFlowStepId);

                entity.ToTable("WSVerificationWorkFlowSteps");

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.VerificationWorkFlowStepTitle).HasMaxLength(500);

                entity.HasOne(d => d.AlternateVerifyUser)
                    .WithMany(p => p.WsverificationWorkFlowStepsAlternateVerifyUser)
                    .HasForeignKey(d => d.AlternateVerifyUserId)
                    .HasConstraintName("FK_WSVerificationWorkFlowSteps_Users1");

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsverificationWorkFlowStepsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationWorkFlowSteps_Users3");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsverificationWorkFlowSteps)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationWorkFlowSteps_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsverificationWorkFlowStepsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationWorkFlowSteps_Users2");

                entity.HasOne(d => d.VerificationWorkFlow)
                    .WithMany(p => p.WsverificationWorkFlowSteps)
                    .HasForeignKey(d => d.VerificationWorkFlowId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationWorkFlowSteps_WSVerificationWorkFlows");

                entity.HasOne(d => d.VerifyUser)
                    .WithMany(p => p.WsverificationWorkFlowStepsVerifyUser)
                    .HasForeignKey(d => d.VerifyUserId)
                    .HasConstraintName("FK_WSVerificationWorkFlowSteps_Users");
            });

            modelBuilder.Entity<WsverificationWorkFlowStepsLang>(entity =>
            {
                entity.HasKey(e => e.WsverificationWorkFlowStepLangId);

                entity.ToTable("WSVerificationWorkFlowSteps_Lang");

                entity.Property(e => e.WsverificationWorkFlowStepLangId).HasColumnName("WSVerificationWorkFlowStepLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.VerificationWorkFlowStepTitle).HasMaxLength(500);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsverificationWorkFlowStepsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationWorkFlowSteps_Lang_Languages");

                entity.HasOne(d => d.VerificationWorkFlowStep)
                    .WithMany(p => p.WsverificationWorkFlowStepsLang)
                    .HasForeignKey(d => d.VerificationWorkFlowStepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationWorkFlowSteps_Lang_WSVerificationWorkFlowSteps");
            });

            modelBuilder.Entity<WsverificationWorkFlows>(entity =>
            {
                entity.HasKey(e => e.VerificationWorkFlowId);

                entity.ToTable("WSVerificationWorkFlows");

                entity.Property(e => e.AppType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstRegisterDate).HasColumnType("datetime");

                entity.Property(e => e.FirstRegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.RegisterDatePersian)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.VerificationWorkFlowTitle)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.FirstRegisterUser)
                    .WithMany(p => p.WsverificationWorkFlowsFirstRegisterUser)
                    .HasForeignKey(d => d.FirstRegisterUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationWorkFlows_Users");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsverificationWorkFlows)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationWorkFlows_Languages");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WsverificationWorkFlowsUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationWorkFlows_Users1");
            });

            modelBuilder.Entity<WsverificationWorkFlowsLang>(entity =>
            {
                entity.HasKey(e => e.WsverificationWorkFlowLangId);

                entity.ToTable("WSVerificationWorkFlows_Lang");

                entity.Property(e => e.WsverificationWorkFlowLangId).HasColumnName("WSVerificationWorkFlowLangID");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.VerificationWorkFlowTitle)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.WsverificationWorkFlowsLang)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationWorkFlows_Lang_Languages");

                entity.HasOne(d => d.VerificationWorkFlow)
                    .WithMany(p => p.WsverificationWorkFlowsLang)
                    .HasForeignKey(d => d.VerificationWorkFlowId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WSVerificationWorkFlows_Lang_WSVerificationWorkFlows");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
