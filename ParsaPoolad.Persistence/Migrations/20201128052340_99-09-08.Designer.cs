// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParsaPoolad.Application.Interfaces.Contexts;
using ParsaPoolad.Persistence.Contexts;

namespace ParsaPoolad.Persistence.Migrations
{
    [DbContext(typeof(IdealCrmDataBaseContext))]
    [Migration("20201128052340_99-09-08")]
    partial class _990908
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CityID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("City1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("City");

                    b.Property<string>("CityCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int?>("FirstUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CityId");

                    b.HasIndex("FirstUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CityLang", b =>
                {
                    b.Property<int>("CityLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CityLangID")
                        .UseIdentityColumn();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CityLangId");

                    b.HasIndex("CityId");

                    b.HasIndex("LanguageId");

                    b.ToTable("City_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CountryID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Country1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Country");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("CountryDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CountryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CountryLang", b =>
                {
                    b.Property<int>("CountryLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CountryLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CountryLangId");

                    b.HasIndex("CountryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Country_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmAddressing", b =>
                {
                    b.Property<int>("AddressingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressingID")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AddressDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fax")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("PostBox")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PreTel")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Tel")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("TelDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TelUpTo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WebSite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AddressingId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmAddressing");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmAddressingType", b =>
                {
                    b.Property<int>("AddTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AddTypeID");

                    b.Property<string>("AddressingType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("AddTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmAddressingType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmBankingAccountType", b =>
                {
                    b.Property<int>("BankingAccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BankingAccountTypeID")
                        .UseIdentityColumn();

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("BankingAccountTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmBankingAccountType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmBankingAccounts", b =>
                {
                    b.Property<int>("BankingAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BankingAccountID")
                        .UseIdentityColumn();

                    b.Property<int>("AccTypeId")
                        .HasColumnType("int");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccountOwner")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccountType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("BankingAccountId");

                    b.HasIndex("AccTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MasterId");

                    b.ToTable("CrmBankingAccounts");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmBankingBanks", b =>
                {
                    b.Property<int>("BankingBankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BankingBankID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("BankDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short?>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<short?>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("BankingBankId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmBankingBanks");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmBankingBranches", b =>
                {
                    b.Property<int>("BankingBranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BankingBranchID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("BranchAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BranchCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BranchDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BranchTel")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BranchTelIi")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("BranchTelII");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("BankingBranchId");

                    b.HasIndex("BankId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmBankingBranches");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCallBlackList", b =>
                {
                    b.Property<int>("BlackListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Blnumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BLNumber");

                    b.Property<string>("BlnumberTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BLNumberTitle");

                    b.Property<int>("BluserId")
                        .HasColumnType("int")
                        .HasColumnName("BLUserId");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short?>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<short?>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("BlackListId");

                    b.HasIndex("BluserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCallBlackList");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCallHistory", b =>
                {
                    b.Property<int>("CallHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CallHistoryID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CallDate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CallDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CallDay")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CallTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CallTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CallerIddetectData")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CallerIDDetectData");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int?>("CompanyPersonId")
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Duration")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EndTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int?>("LineNumber")
                        .HasColumnType("int");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("NoteEditedUserId")
                        .HasColumnType("int");

                    b.Property<int?>("NoteRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberEditedUserId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PreRecFileName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RecFileName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("StartTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrunkCallId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TrunkDestination")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TrunkDestinationCycle")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TrunkFileLocation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TrunkName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TrunkSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CallHistoryId");

                    b.HasIndex("CallTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyPersonId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NoteEditedUserId");

                    b.HasIndex("NoteRegisterUserId");

                    b.HasIndex("NumberEditedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCallHistory");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCallType", b =>
                {
                    b.Property<int>("CallTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CallTypeID");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CallType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short?>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<short?>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CallTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCallType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCallTypeLang", b =>
                {
                    b.Property<int>("CrmCallTypeLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCallTypeLangID")
                        .UseIdentityColumn();

                    b.Property<string>("CallType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CallTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CallTypeID");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmCallTypeLangId");

                    b.HasIndex("CallTypeId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmCallType_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsComments", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CrmCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("Fname")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("FName");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("LName");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Tel")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerifiedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("VerifiedUserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CommentId");

                    b.HasIndex("CrmCompanyId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ObjectTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("VerifiedUserId");

                    b.ToTable("CrmCmsComments");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsCommentsLang", b =>
                {
                    b.Property<int>("CrmCmsCommentLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCmsCommentLangID")
                        .UseIdentityColumn();

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fname")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("FName");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("LName");

                    b.HasKey("CrmCmsCommentLangId");

                    b.HasIndex("CommentId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmCmsComments_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsFiles", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("FileId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ObjectTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCmsFiles");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsFilesLang", b =>
                {
                    b.Property<int>("CrmCmsFileLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCmsFileLangID")
                        .UseIdentityColumn();

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("CrmCmsFileLangId");

                    b.HasIndex("FileId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmCmsFiles_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsGallery", b =>
                {
                    b.Property<int>("GalleryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int?>("GalleryEffect")
                        .HasColumnType("int");

                    b.Property<int?>("GalleryInterval")
                        .HasColumnType("int");

                    b.Property<string>("GalleryTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShowTitle")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("GalleryId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCmsGallery");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsGalleryItems", b =>
                {
                    b.Property<int>("GalleryItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FileName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("FolderName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GalleryId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShowDesc")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShowTitle")
                        .HasColumnType("bit");

                    b.Property<string>("ItemDesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ItemDescFontColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ItemLink")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ItemLinkBgColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ItemLinkFontColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ItemLinkTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ItemTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ItemTitleFontColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("TargetMode")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("GalleryItemId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("GalleryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCmsGalleryItems");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsGalleryItemsLang", b =>
                {
                    b.Property<int>("CrmCmsGalleryItemLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCmsGalleryItemLangID")
                        .UseIdentityColumn();

                    b.Property<int>("GalleryItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemDesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ItemLinkTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ItemTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmCmsGalleryItemLangId");

                    b.HasIndex("GalleryItemId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmCmsGalleryItems_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsGalleryLang", b =>
                {
                    b.Property<int>("CrmCmsGalleryLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCmsGalleryLangID")
                        .UseIdentityColumn();

                    b.Property<int>("GalleryId")
                        .HasColumnType("int");

                    b.Property<string>("GalleryTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmCmsGalleryLangId");

                    b.HasIndex("GalleryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmCmsGallery_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsLikes", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CrmCompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IPAddress");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("LikeId");

                    b.HasIndex("CrmCompanyId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ObjectTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCmsLikes");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsMenus", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("DyFormId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Link")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("MenuTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModuleName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("NewsId")
                        .HasColumnType("int");

                    b.Property<bool?>("OnlyForLoginUser")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<int?>("PageId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("PrdFirstGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("PrdSecondGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("TargetMode")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("MenuId");

                    b.HasIndex("DyFormId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NewsId");

                    b.HasIndex("PageId");

                    b.HasIndex("PrdFirstGroupId");

                    b.HasIndex("PrdSecondGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCmsMenus");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsMenusLang", b =>
                {
                    b.Property<int>("CrmCmsMenuLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCmsMenuLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("MenuTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CrmCmsMenuLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MenuId");

                    b.ToTable("CrmCmsMenus_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsNews", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("CommentActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("HeadLine")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("IsTopNews")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<bool?>("LikeActive")
                        .HasColumnType("bit");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("NewsBody")
                        .HasColumnType("ntext");

                    b.Property<int>("NewsGroupId")
                        .HasColumnType("int");

                    b.Property<string>("NewsSummery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerifiedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("VerifiedUserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("NewsId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NewsGroupId");

                    b.HasIndex("UserId");

                    b.HasIndex("VerifiedUserId");

                    b.ToTable("CrmCmsNews");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsNewsGroups", b =>
                {
                    b.Property<int>("NewsGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("NewsGroupId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCmsNewsGroups");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsNewsGroupsLang", b =>
                {
                    b.Property<int>("CrmCmsNewsGroupLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCmsNewsGroupLangID")
                        .UseIdentityColumn();

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("NewsGroupId")
                        .HasColumnType("int");

                    b.HasKey("CrmCmsNewsGroupLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NewsGroupId");

                    b.ToTable("CrmCmsNewsGroups_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsNewsLang", b =>
                {
                    b.Property<int>("CrmCmsNewsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCmsNewsLangID")
                        .UseIdentityColumn();

                    b.Property<string>("HeadLine")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("NewsBody")
                        .HasColumnType("ntext");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<string>("NewsSummery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("CrmCmsNewsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NewsId");

                    b.ToTable("CrmCmsNews_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsObjectTypes", b =>
                {
                    b.Property<int>("ObjectTypeId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ObjectTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCmsObjectTypes");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsPages", b =>
                {
                    b.Property<int>("PageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CrmDyFormId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int?>("LayoutType")
                        .HasColumnType("int");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<bool?>("OnlyForLoginUser")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<string>("PageBody")
                        .HasColumnType("ntext");

                    b.Property<string>("PageEndScript")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageFooter")
                        .HasColumnType("ntext");

                    b.Property<string>("PageHeader")
                        .HasColumnType("ntext");

                    b.Property<string>("PageHeaderScript")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PageLocation")
                        .HasColumnType("int");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PageStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageTitle")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("TargetMode")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("PageId");

                    b.HasIndex("CrmDyFormId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCmsPages");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsPagesLang", b =>
                {
                    b.Property<int>("CrmCmsPageLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCmsPageLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PageBody")
                        .HasColumnType("ntext");

                    b.Property<string>("PageFooter")
                        .HasColumnType("ntext");

                    b.Property<string>("PageHeader")
                        .HasColumnType("ntext");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PageTitle")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("CrmCmsPageLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PageId");

                    b.ToTable("CrmCmsPages_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyID")
                        .UseIdentityColumn();

                    b.Property<int>("AddType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(1)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CmpAccInquiry")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpAccInquiry");

                    b.Property<string>("CmpAccountNumber")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpAccountNumber");

                    b.Property<string>("CmpActivityType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpActivityType");

                    b.Property<string>("CmpAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("cmpAddress");

                    b.Property<string>("CmpAddressDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpAddressDesc");

                    b.Property<string>("CmpBuyLimit")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpBuyLimit");

                    b.Property<int?>("CmpCityId")
                        .HasColumnType("int")
                        .HasColumnName("cmpCityId");

                    b.Property<string>("CmpCode")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpCode");

                    b.Property<DateTime?>("CmpCoordinateLastDate")
                        .HasColumnType("datetime")
                        .HasColumnName("cmpCoordinateLastDate");

                    b.Property<string>("CmpCoordinateLastDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cmpCoordinateLastDatePersian");

                    b.Property<int?>("CmpCoordinateLastUserId")
                        .HasColumnType("int")
                        .HasColumnName("cmpCoordinateLastUserId");

                    b.Property<string>("CmpCoordinateLatitude")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpCoordinateLatitude");

                    b.Property<string>("CmpCoordinateLongitude")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpCoordinateLongitude");

                    b.Property<int?>("CmpCoordinateZoomLevel")
                        .HasColumnType("int")
                        .HasColumnName("cmpCoordinateZoomLevel");

                    b.Property<int?>("CmpCountryId")
                        .HasColumnType("int")
                        .HasColumnName("cmpCountryId");

                    b.Property<string>("CmpDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpDescription");

                    b.Property<string>("CmpEconomicCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpEconomicCode");

                    b.Property<string>("CmpEffectiveDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cmpEffectiveDatePersian");

                    b.Property<DateTime?>("CmpEffectiveDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("cmpEffectiveDateTime");

                    b.Property<string>("CmpEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpEmail");

                    b.Property<string>("CmpFame")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("cmpFame");

                    b.Property<string>("CmpFax")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpFax");

                    b.Property<string>("CmpFaxDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpFaxDesc");

                    b.Property<int?>("CmpFirstRegisterUserId")
                        .HasColumnType("int")
                        .HasColumnName("cmpFirstRegisterUserId");

                    b.Property<bool?>("CmpFoaccessLinkedCompany")
                        .HasColumnType("bit")
                        .HasColumnName("cmpFOAccessLinkedCompany");

                    b.Property<string>("CmpFreight")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("cmpFreight");

                    b.Property<int?>("CmpGroupId")
                        .HasColumnType("int")
                        .HasColumnName("cmpGroupId");

                    b.Property<int?>("CmpGroupIdIi")
                        .HasColumnType("int")
                        .HasColumnName("cmpGroupIdII");

                    b.Property<int?>("CmpGroupIdIii")
                        .HasColumnType("int")
                        .HasColumnName("cmpGroupIdIII");

                    b.Property<int?>("CmpGroupIdIv")
                        .HasColumnType("int")
                        .HasColumnName("cmpGroupIdIV");

                    b.Property<string>("CmpInquiry")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpInquiry");

                    b.Property<string>("CmpInteresting")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpInteresting");

                    b.Property<bool?>("CmpIsDraft")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("cmpIsDraft")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CmpKind")
                        .HasColumnType("int")
                        .HasColumnName("cmpKind");

                    b.Property<string>("CmpLinkAccCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpLinkAccCode");

                    b.Property<int?>("CmpLinkAccCodeId")
                        .HasColumnType("int")
                        .HasColumnName("cmpLinkAccCodeId");

                    b.Property<int?>("CmpLinkAccCustomerId")
                        .HasColumnType("int")
                        .HasColumnName("cmpLinkAccCustomerId");

                    b.Property<string>("CmpLinkAccCustomerIdStr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpLinkAccCustomerIdStr");

                    b.Property<int?>("CmpMainPersonId")
                        .HasColumnType("int")
                        .HasColumnName("cmpMainPersonId");

                    b.Property<string>("CmpMobile")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpMobile");

                    b.Property<string>("CmpName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("cmpName");

                    b.Property<string>("CmpNameEng")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("cmpNameEng");

                    b.Property<string>("CmpNationalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpNationalCode");

                    b.Property<int?>("CmpNumber")
                        .HasColumnType("int")
                        .HasColumnName("cmpNumber");

                    b.Property<string>("CmpPassword")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpPassword");

                    b.Property<string>("CmpPostBox")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpPostBox");

                    b.Property<string>("CmpPreTel")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("cmpPreTel");

                    b.Property<string>("CmpPreTelIi")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("cmpPreTelII");

                    b.Property<int?>("CmpPresentationId")
                        .HasColumnType("int")
                        .HasColumnName("cmpPresentationId");

                    b.Property<int?>("CmpProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("cmpProvinceId");

                    b.Property<int>("CmpReferUserId")
                        .HasColumnType("int")
                        .HasColumnName("cmpReferUserId");

                    b.Property<string>("CmpRegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpRegistrationNumber");

                    b.Property<string>("CmpSpecialPoint")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpSpecialPoint");

                    b.Property<string>("CmpSpecialWordForCi")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("cmpSpecialWordForCI");

                    b.Property<int?>("CmpSubGroupId")
                        .HasColumnType("int")
                        .HasColumnName("cmpSubGroupId");

                    b.Property<string>("CmpTel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpTel");

                    b.Property<string>("CmpTelDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpTelDesc");

                    b.Property<string>("CmpTelIi")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpTelII");

                    b.Property<string>("CmpTelIidesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpTelIIDesc");

                    b.Property<string>("CmpTelUpTo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("cmpTelUpTo");

                    b.Property<string>("CmpTelUpToIi")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("cmpTelUpToII");

                    b.Property<int?>("CmpTitleId")
                        .HasColumnType("int")
                        .HasColumnName("cmpTitleId");

                    b.Property<int?>("CmpTypeId")
                        .HasColumnType("int")
                        .HasColumnName("cmpTypeId");

                    b.Property<string>("CmpUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpUserName");

                    b.Property<string>("CmpWebSite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpWebSite");

                    b.Property<string>("CmpZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpZipCode");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ImportDate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("ImportDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CompanyId");

                    b.HasIndex("CmpCityId");

                    b.HasIndex("CmpCountryId");

                    b.HasIndex("CmpGroupId");

                    b.HasIndex("CmpGroupIdIi");

                    b.HasIndex("CmpGroupIdIii");

                    b.HasIndex("CmpGroupIdIv");

                    b.HasIndex("CmpMainPersonId");

                    b.HasIndex("CmpPresentationId");

                    b.HasIndex("CmpProvinceId");

                    b.HasIndex("CmpSubGroupId");

                    b.HasIndex("CmpTitleId");

                    b.HasIndex("CmpTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompany");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyForbiddenCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("ForbiddenCityId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("ForbiddenCityId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyForbiddenCity");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyForbiddenCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("ForbiddenCompanyId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("ForbiddenCompanyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyForbiddenCompany");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyForbiddenDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("ForbiddenDepartmentId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyForbiddenDepartment");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyForbiddenGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("ForbiddenGroupId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("ForbiddenGroupId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyForbiddenGroup");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyForbiddenGroupIv", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("ForbiddenGroupIvid")
                        .HasColumnType("int")
                        .HasColumnName("ForbiddenGroupIVId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("ForbiddenGroupIvid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyForbiddenGroupIV");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyForbiddenProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("ForbiddenProvinceId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("ForbiddenProvinceId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyForbiddenProvince");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyForbiddenSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("ForbiddenSubGroupId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("ForbiddenSubGroupId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyForbiddenSubGroup");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroups", b =>
                {
                    b.Property<int>("CompanyGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyGroupID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("GroupDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CompanyGroupId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyGroups");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIi", b =>
                {
                    b.Property<int>("CompanyGroupIiid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyGroupIIID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("GroupIidesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("GroupIIDesc");

                    b.Property<string>("GroupIiname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("GroupIIName");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<double?>("Rate")
                        .HasColumnType("float");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CompanyGroupIiid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyGroupsII");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIiLang", b =>
                {
                    b.Property<int>("CrmCompanyGroupsIilangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCompanyGroupsIILangID")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyGroupIiid")
                        .HasColumnType("int")
                        .HasColumnName("CompanyGroupIIID");

                    b.Property<string>("GroupIidesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("GroupIIDesc");

                    b.Property<string>("GroupIiname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("GroupIIName");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmCompanyGroupsIilangId");

                    b.HasIndex("CompanyGroupIiid");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmCompanyGroupsII_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIii", b =>
                {
                    b.Property<int>("CompanyGroupIiiid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyGroupIIIID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("GroupIiidesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("GroupIIIDesc");

                    b.Property<string>("GroupIiiname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("GroupIIIName");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CompanyGroupIiiid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyGroupsIII");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIiiLang", b =>
                {
                    b.Property<int>("CrmCompanyGroupsIiilangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCompanyGroupsIIILangID")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyGroupIiiid")
                        .HasColumnType("int")
                        .HasColumnName("CompanyGroupIIIID");

                    b.Property<string>("GroupIiidesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("GroupIIIDesc");

                    b.Property<string>("GroupIiiname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("GroupIIIName");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmCompanyGroupsIiilangId");

                    b.HasIndex("CompanyGroupIiiid");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmCompanyGroupsIII_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIv", b =>
                {
                    b.Property<int>("CompanyGroupIvid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyGroupIVID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("GroupIvdesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("GroupIVDesc");

                    b.Property<string>("GroupIvname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("GroupIVName");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CompanyGroupIvid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyGroupsIV");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIvLang", b =>
                {
                    b.Property<int>("CrmCompanyGroupsIvlangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCompanyGroupsIVLangID")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyGroupIvid")
                        .HasColumnType("int")
                        .HasColumnName("CompanyGroupIVID");

                    b.Property<string>("GroupIvdesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("GroupIVDesc");

                    b.Property<string>("GroupIvname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("GroupIVName");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmCompanyGroupsIvlangId");

                    b.HasIndex("CompanyGroupIvid");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmCompanyGroupsIV_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsLang", b =>
                {
                    b.Property<int>("CrmCompanyGroupsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCompanyGroupsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyGroupId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyGroupID");

                    b.Property<string>("GroupDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmCompanyGroupsLangId");

                    b.HasIndex("CompanyGroupId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmCompanyGroups_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsMulti", b =>
                {
                    b.Property<int>("CompanyGroupsMultiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyGroupsMultiID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CompanyGroupsMultiDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyGroupsMultiName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CompanyGroupsMultiId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyGroupsMulti");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsMultiLang", b =>
                {
                    b.Property<int>("CrmCompanyGroupsMultiLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCompanyGroupsMultiLangID")
                        .UseIdentityColumn();

                    b.Property<string>("CompanyGroupsMultiDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CompanyGroupsMultiId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyGroupsMultiID");

                    b.Property<string>("CompanyGroupsMultiName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmCompanyGroupsMultiLangId");

                    b.HasIndex("CompanyGroupsMultiId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmCompanyGroupsMulti_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyJustAccessCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("JustAccessCityId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("JustAccessCityId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyJustAccessCity");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyJustAccessCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("JustAccessCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("JustAccessCompanyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyJustAccessCompany");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyJustAccessDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("JustAccessDepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyJustAccessDepartment");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyJustAccessGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("JustAccessGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("JustAccessGroupId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyJustAccessGroup");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyJustAccessGroupIv", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("JustAccessGroupIvid")
                        .HasColumnType("int")
                        .HasColumnName("JustAccessGroupIVId");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("JustAccessGroupIvid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyJustAccessGroupIV");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyJustAccessProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("JustAccessProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("JustAccessProvinceId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyJustAccessProvince");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyJustAccessSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("JustAccessSubGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("JustAccessSubGroupId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyJustAccessSubGroup");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyLang", b =>
                {
                    b.Property<int>("CrmCompanyLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCompanyLangID")
                        .UseIdentityColumn();

                    b.Property<string>("CmpActivityType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpActivityType");

                    b.Property<string>("CmpAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("cmpAddress");

                    b.Property<string>("CmpAddressDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpAddressDesc");

                    b.Property<string>("CmpDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpDescription");

                    b.Property<string>("CmpFame")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("cmpFame");

                    b.Property<string>("CmpFaxDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpFaxDesc");

                    b.Property<string>("CmpInquiry")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpInquiry");

                    b.Property<string>("CmpInteresting")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpInteresting");

                    b.Property<string>("CmpName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("cmpName");

                    b.Property<string>("CmpSpecialPoint")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpSpecialPoint");

                    b.Property<string>("CmpSpecialWordForCi")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("cmpSpecialWordForCI");

                    b.Property<string>("CmpTelDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpTelDesc");

                    b.Property<string>("CmpTelIidesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpTelIIDesc");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmCompanyLangId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmCompany_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyLoGo", b =>
                {
                    b.Property<int>("CompanyLoGoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyLoGoID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<byte[]>("CompanyLogo")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LogoDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CompanyLoGoId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyLoGo");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyMultiGroups", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("CompanyGroupsMultiId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyGroupsMultiID");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CompanyId", "CompanyGroupsMultiId");

                    b.HasIndex("CompanyGroupsMultiId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyMultiGroups");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", b =>
                {
                    b.Property<int>("CompanyPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyPersonID")
                        .UseIdentityColumn();

                    b.Property<int>("AddType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((2))");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CompanyPersonTemplateId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyPersonTemplateID");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ImportDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("ImportDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("PrsAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("prsAddress");

                    b.Property<string>("PrsAddressDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prsAddressDesc");

                    b.Property<string>("PrsBirthDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("prsBirthDate");

                    b.Property<DateTime?>("PrsBirthDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("prsBirthDateTime");

                    b.Property<string>("PrsBirthPlace")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsBirthPlace");

                    b.Property<int?>("PrsCityId")
                        .HasColumnType("int")
                        .HasColumnName("prsCityId");

                    b.Property<int>("PrsCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("prsCompanyId");

                    b.Property<int?>("PrsCountryId")
                        .HasColumnType("int")
                        .HasColumnName("prsCountryId");

                    b.Property<int?>("PrsDepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("prsDepartmentId");

                    b.Property<string>("PrsDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("prsDescription");

                    b.Property<string>("PrsEducationField")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsEducationField");

                    b.Property<int?>("PrsEducationId")
                        .HasColumnType("int")
                        .HasColumnName("prsEducationId");

                    b.Property<string>("PrsEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsEmail");

                    b.Property<string>("PrsEmailIi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsEmailII");

                    b.Property<string>("PrsFatherName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFatherName");

                    b.Property<string>("PrsFax")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prsFax");

                    b.Property<string>("PrsFaxDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFaxDesc");

                    b.Property<int?>("PrsFirstRegisterUserId")
                        .HasColumnType("int")
                        .HasColumnName("prsFirstRegisterUserId");

                    b.Property<string>("PrsFname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFName");

                    b.Property<int?>("PrsGroupId")
                        .HasColumnType("int")
                        .HasColumnName("prsGroupId");

                    b.Property<string>("PrsIdentityNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("prsIdentityNumber");

                    b.Property<string>("PrsInteresting")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("prsInteresting");

                    b.Property<bool?>("PrsIsMarried")
                        .HasColumnType("bit")
                        .HasColumnName("prsIsMarried");

                    b.Property<int?>("PrsJobId")
                        .HasColumnType("int")
                        .HasColumnName("prsJobId");

                    b.Property<string>("PrsLname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prsLName");

                    b.Property<string>("PrsMarriageDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("prsMarriageDate");

                    b.Property<DateTime?>("PrsMarriageDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("prsMarriageDateTime");

                    b.Property<string>("PrsMobile")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prsMobile");

                    b.Property<string>("PrsNationalCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("prsNationalCode");

                    b.Property<int?>("PrsOrderView")
                        .HasColumnType("int")
                        .HasColumnName("prsOrderView");

                    b.Property<string>("PrsPostBox")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsPostBox");

                    b.Property<string>("PrsPreTel")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("prsPreTel");

                    b.Property<int?>("PrsProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("prsProvinceId");

                    b.Property<int?>("PrsSexId")
                        .HasColumnType("int")
                        .HasColumnName("prsSexId");

                    b.Property<string>("PrsSkill")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsSkill");

                    b.Property<string>("PrsSpecialPoint")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("prsSpecialPoint");

                    b.Property<bool?>("PrsStopSendSms")
                        .HasColumnType("bit")
                        .HasColumnName("prsStopSendSms");

                    b.Property<string>("PrsStudyField")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsStudyField");

                    b.Property<string>("PrsTel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prsTel");

                    b.Property<string>("PrsTelDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsTelDesc");

                    b.Property<string>("PrsTelIi")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prsTelII");

                    b.Property<string>("PrsTelUpTo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("prsTelUpTo");

                    b.Property<int?>("PrsTelegramId")
                        .HasColumnType("int")
                        .HasColumnName("prsTelegramId");

                    b.Property<int?>("PrsTitleId")
                        .HasColumnType("int")
                        .HasColumnName("prsTitleId");

                    b.Property<int?>("PrsTypeId")
                        .HasColumnType("int")
                        .HasColumnName("prsTypeId");

                    b.Property<string>("PrsWebSite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsWebSite");

                    b.Property<bool?>("PrsWorkingOut")
                        .HasColumnType("bit")
                        .HasColumnName("prsWorkingOut");

                    b.Property<string>("PrsZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsZipCode");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CompanyPersonId");

                    b.HasIndex("CompanyPersonTemplateId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrsCityId");

                    b.HasIndex("PrsCompanyId")
                        .HasDatabaseName("IX_CrmCompanyPersons_CmpId");

                    b.HasIndex("PrsCountryId");

                    b.HasIndex("PrsDepartmentId");

                    b.HasIndex("PrsEducationId");

                    b.HasIndex("PrsGroupId");

                    b.HasIndex("PrsJobId");

                    b.HasIndex("PrsMobile")
                        .HasDatabaseName("IX_CrmCompanyPersons");

                    b.HasIndex("PrsProvinceId");

                    b.HasIndex("PrsSexId");

                    b.HasIndex("PrsTitleId");

                    b.HasIndex("PrsTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyPersons");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersonsLang", b =>
                {
                    b.Property<int>("CrmCompanyPersonsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCompanyPersonsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyPersonId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyPersonID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PrsAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("prsAddress");

                    b.Property<string>("PrsAddressDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prsAddressDesc");

                    b.Property<string>("PrsBirthPlace")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsBirthPlace");

                    b.Property<string>("PrsDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("prsDescription");

                    b.Property<string>("PrsEducationField")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsEducationField");

                    b.Property<string>("PrsFatherName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFatherName");

                    b.Property<string>("PrsFaxDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFaxDesc");

                    b.Property<string>("PrsFname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFName");

                    b.Property<string>("PrsInteresting")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("prsInteresting");

                    b.Property<string>("PrsLname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prsLName");

                    b.Property<string>("PrsSkill")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsSkill");

                    b.Property<string>("PrsSpecialPoint")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("prsSpecialPoint");

                    b.Property<string>("PrsStudyField")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsStudyField");

                    b.Property<string>("PrsTelDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsTelDesc");

                    b.HasKey("CrmCompanyPersonsLangId");

                    b.HasIndex("CompanyPersonId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmCompanyPersons_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersonsTemplate", b =>
                {
                    b.Property<int>("CompanyPersonTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyPersonTemplateID")
                        .UseIdentityColumn();

                    b.Property<int>("AddType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(2)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime?>("FirstRegisterDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ImportDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("ImportDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("PrsAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("prsAddress");

                    b.Property<string>("PrsAddressDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prsAddressDesc");

                    b.Property<string>("PrsBirthDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("prsBirthDate");

                    b.Property<DateTime?>("PrsBirthDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("prsBirthDateTime");

                    b.Property<string>("PrsBirthPlace")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsBirthPlace");

                    b.Property<int?>("PrsCityId")
                        .HasColumnType("int")
                        .HasColumnName("prsCityId");

                    b.Property<int?>("PrsCountryId")
                        .HasColumnType("int")
                        .HasColumnName("prsCountryId");

                    b.Property<int?>("PrsDepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("prsDepartmentId");

                    b.Property<string>("PrsDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("prsDescription");

                    b.Property<string>("PrsEducationField")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsEducationField");

                    b.Property<int?>("PrsEducationId")
                        .HasColumnType("int")
                        .HasColumnName("prsEducationId");

                    b.Property<string>("PrsEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsEmail");

                    b.Property<string>("PrsEmailIi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsEmailII");

                    b.Property<string>("PrsFatherName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFatherName");

                    b.Property<string>("PrsFax")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("prsFax");

                    b.Property<string>("PrsFaxDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFaxDesc");

                    b.Property<int?>("PrsFirstRegisterUserId")
                        .HasColumnType("int")
                        .HasColumnName("prsFirstRegisterUserId");

                    b.Property<string>("PrsFname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFName");

                    b.Property<int?>("PrsGroupId")
                        .HasColumnType("int")
                        .HasColumnName("prsGroupId");

                    b.Property<string>("PrsIdentityNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("prsIdentityNumber");

                    b.Property<string>("PrsInteresting")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("prsInteresting");

                    b.Property<bool?>("PrsIsMarried")
                        .HasColumnType("bit")
                        .HasColumnName("prsIsMarried");

                    b.Property<int?>("PrsJobId")
                        .HasColumnType("int")
                        .HasColumnName("prsJobId");

                    b.Property<string>("PrsLname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prsLName");

                    b.Property<string>("PrsMarriageDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("prsMarriageDate");

                    b.Property<DateTime?>("PrsMarriageDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("prsMarriageDateTime");

                    b.Property<string>("PrsMobile")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("prsMobile");

                    b.Property<string>("PrsNationalCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("prsNationalCode");

                    b.Property<int?>("PrsOrderView")
                        .HasColumnType("int")
                        .HasColumnName("prsOrderView");

                    b.Property<string>("PrsPostBox")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsPostBox");

                    b.Property<string>("PrsPreTel")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("prsPreTel");

                    b.Property<int?>("PrsProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("prsProvinceId");

                    b.Property<int?>("PrsSexId")
                        .HasColumnType("int")
                        .HasColumnName("prsSexId");

                    b.Property<string>("PrsSkill")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsSkill");

                    b.Property<string>("PrsSpecialPoint")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("prsSpecialPoint");

                    b.Property<bool?>("PrsStopSendSms")
                        .HasColumnType("bit")
                        .HasColumnName("prsStopSendSms");

                    b.Property<string>("PrsStudyField")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsStudyField");

                    b.Property<string>("PrsTel")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("prsTel");

                    b.Property<string>("PrsTelDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsTelDesc");

                    b.Property<string>("PrsTelIi")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("prsTelII");

                    b.Property<string>("PrsTelUpTo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("prsTelUpTo");

                    b.Property<int?>("PrsTitleId")
                        .HasColumnType("int")
                        .HasColumnName("prsTitleId");

                    b.Property<int?>("PrsTypeId")
                        .HasColumnType("int")
                        .HasColumnName("prsTypeId");

                    b.Property<string>("PrsWebSite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsWebSite");

                    b.Property<bool?>("PrsWorkingOut")
                        .HasColumnType("bit")
                        .HasColumnName("prsWorkingOut");

                    b.Property<string>("PrsZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsZipCode");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool?>("Selector")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CompanyPersonTemplateId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrsCityId");

                    b.HasIndex("PrsCountryId");

                    b.HasIndex("PrsDepartmentId");

                    b.HasIndex("PrsEducationId");

                    b.HasIndex("PrsGroupId");

                    b.HasIndex("PrsJobId");

                    b.HasIndex("PrsProvinceId");

                    b.HasIndex("PrsSexId");

                    b.HasIndex("PrsTitleId");

                    b.HasIndex("PrsTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyPersonsTemplate");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersonsTemplateLang", b =>
                {
                    b.Property<int>("CompanyPersonTemplateLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyPersonTemplateLangID")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyPersonTemplateId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyPersonTemplateID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PrsAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("prsAddress");

                    b.Property<string>("PrsAddressDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prsAddressDesc");

                    b.Property<string>("PrsBirthPlace")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsBirthPlace");

                    b.Property<string>("PrsDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("prsDescription");

                    b.Property<string>("PrsEducationField")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsEducationField");

                    b.Property<string>("PrsFatherName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFatherName");

                    b.Property<string>("PrsFaxDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFaxDesc");

                    b.Property<string>("PrsFname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFName");

                    b.Property<string>("PrsInteresting")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("prsInteresting");

                    b.Property<string>("PrsLname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prsLName");

                    b.Property<string>("PrsSkill")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsSkill");

                    b.Property<string>("PrsSpecialPoint")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("prsSpecialPoint");

                    b.Property<string>("PrsStudyField")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsStudyField");

                    b.Property<string>("PrsTelDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsTelDesc");

                    b.HasKey("CompanyPersonTemplateLangId");

                    b.HasIndex("CompanyPersonTemplateId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmCompanyPersonsTemplate_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersonsTmp", b =>
                {
                    b.Property<int>("CompanyPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyPersonID")
                        .UseIdentityColumn();

                    b.Property<int>("AddType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((2))");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CompanyPersonTemplateId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyPersonTemplateID");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ImportDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("ImportDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("PersonPicture")
                        .HasColumnType("image");

                    b.Property<string>("PrsAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("prsAddress");

                    b.Property<string>("PrsAddressDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prsAddressDesc");

                    b.Property<string>("PrsBirthDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("prsBirthDate");

                    b.Property<DateTime?>("PrsBirthDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("prsBirthDateTime");

                    b.Property<string>("PrsBirthPlace")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsBirthPlace");

                    b.Property<int?>("PrsCityId")
                        .HasColumnType("int")
                        .HasColumnName("prsCityId");

                    b.Property<int>("PrsCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("prsCompanyId");

                    b.Property<int?>("PrsCountryId")
                        .HasColumnType("int")
                        .HasColumnName("prsCountryId");

                    b.Property<int?>("PrsDepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("prsDepartmentId");

                    b.Property<string>("PrsDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("prsDescription");

                    b.Property<string>("PrsEducationField")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsEducationField");

                    b.Property<int?>("PrsEducationId")
                        .HasColumnType("int")
                        .HasColumnName("prsEducationId");

                    b.Property<string>("PrsEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsEmail");

                    b.Property<string>("PrsEmailIi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsEmailII");

                    b.Property<string>("PrsFatherName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFatherName");

                    b.Property<string>("PrsFax")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("prsFax");

                    b.Property<string>("PrsFaxDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFaxDesc");

                    b.Property<int?>("PrsFirstRegisterUserId")
                        .HasColumnType("int")
                        .HasColumnName("prsFirstRegisterUserId");

                    b.Property<string>("PrsFname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFName");

                    b.Property<int?>("PrsGroupId")
                        .HasColumnType("int")
                        .HasColumnName("prsGroupId");

                    b.Property<string>("PrsIdentityNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("prsIdentityNumber");

                    b.Property<string>("PrsInteresting")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("prsInteresting");

                    b.Property<bool?>("PrsIsMarried")
                        .HasColumnType("bit")
                        .HasColumnName("prsIsMarried");

                    b.Property<int?>("PrsJobId")
                        .HasColumnType("int")
                        .HasColumnName("prsJobId");

                    b.Property<string>("PrsLname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prsLName");

                    b.Property<string>("PrsMarriageDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("prsMarriageDate");

                    b.Property<DateTime?>("PrsMarriageDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("prsMarriageDateTime");

                    b.Property<string>("PrsMobile")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("prsMobile");

                    b.Property<string>("PrsNationalCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("prsNationalCode");

                    b.Property<int?>("PrsOrderView")
                        .HasColumnType("int")
                        .HasColumnName("prsOrderView");

                    b.Property<string>("PrsPostBox")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsPostBox");

                    b.Property<string>("PrsPreTel")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("prsPreTel");

                    b.Property<int?>("PrsProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("prsProvinceId");

                    b.Property<int?>("PrsSexId")
                        .HasColumnType("int")
                        .HasColumnName("prsSexId");

                    b.Property<string>("PrsSkill")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsSkill");

                    b.Property<string>("PrsSpecialPoint")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("prsSpecialPoint");

                    b.Property<bool?>("PrsStopSendSms")
                        .HasColumnType("bit")
                        .HasColumnName("prsStopSendSms");

                    b.Property<string>("PrsStudyField")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsStudyField");

                    b.Property<string>("PrsTel")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("prsTel");

                    b.Property<string>("PrsTelDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsTelDesc");

                    b.Property<string>("PrsTelIi")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("prsTelII");

                    b.Property<string>("PrsTelUpTo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("prsTelUpTo");

                    b.Property<int?>("PrsTelegramId")
                        .HasColumnType("int")
                        .HasColumnName("prsTelegramId");

                    b.Property<int?>("PrsTitleId")
                        .HasColumnType("int")
                        .HasColumnName("prsTitleId");

                    b.Property<int?>("PrsTypeId")
                        .HasColumnType("int")
                        .HasColumnName("prsTypeId");

                    b.Property<string>("PrsWebSite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsWebSite");

                    b.Property<bool?>("PrsWorkingOut")
                        .HasColumnType("bit")
                        .HasColumnName("prsWorkingOut");

                    b.Property<string>("PrsZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsZipCode");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CompanyPersonId");

                    b.HasIndex("CompanyPersonTemplateId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrsCityId");

                    b.HasIndex("PrsCompanyId");

                    b.HasIndex("PrsCountryId");

                    b.HasIndex("PrsDepartmentId");

                    b.HasIndex("PrsEducationId");

                    b.HasIndex("PrsFirstRegisterUserId");

                    b.HasIndex("PrsGroupId");

                    b.HasIndex("PrsJobId");

                    b.HasIndex("PrsProvinceId");

                    b.HasIndex("PrsSexId");

                    b.HasIndex("PrsTitleId");

                    b.HasIndex("PrsTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyPersonsTmp");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersonsTmpLang", b =>
                {
                    b.Property<int>("CrmCompanyPersonsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCompanyPersonsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyPersonId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyPersonID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PrsAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("prsAddress");

                    b.Property<string>("PrsAddressDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prsAddressDesc");

                    b.Property<string>("PrsBirthPlace")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsBirthPlace");

                    b.Property<string>("PrsDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("prsDescription");

                    b.Property<string>("PrsEducationField")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsEducationField");

                    b.Property<string>("PrsFatherName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFatherName");

                    b.Property<string>("PrsFaxDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFaxDesc");

                    b.Property<string>("PrsFname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFName");

                    b.Property<string>("PrsInteresting")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("prsInteresting");

                    b.Property<string>("PrsLname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prsLName");

                    b.Property<string>("PrsSkill")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsSkill");

                    b.Property<string>("PrsSpecialPoint")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("prsSpecialPoint");

                    b.Property<string>("PrsStudyField")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsStudyField");

                    b.Property<string>("PrsTelDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsTelDesc");

                    b.HasKey("CrmCompanyPersonsLangId");

                    b.HasIndex("CompanyPersonId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmCompanyPersonsTmp_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPictureAlbums", b =>
                {
                    b.Property<int>("CompanyPictureAlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyPictureAlbumID")
                        .UseIdentityColumn();

                    b.Property<string>("AlbumDate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AlbumName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CompanyPictureAlbumId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyPictureAlbums");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPictures", b =>
                {
                    b.Property<int>("CompanyPictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyPictureID")
                        .UseIdentityColumn();

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CompanyPictureId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyPictures");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPresentation", b =>
                {
                    b.Property<int>("CompanyPresentationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyPresentationID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("Presentation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CompanyPresentationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyPresentation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPresentationLang", b =>
                {
                    b.Property<int>("CrmCompanyPresentationLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCompanyPresentationLangID")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyPresentationId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyPresentationID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Presentation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CrmCompanyPresentationLangId");

                    b.HasIndex("CompanyPresentationId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmCompanyPresentation_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanySubGroups", b =>
                {
                    b.Property<int>("CompanySubGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanySubGroupID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("SubGroupDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SubGroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CompanySubGroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanySubGroups");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanySubGroupsLang", b =>
                {
                    b.Property<int>("CrmCompanySubGroupsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCompanySubGroupsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("CompanySubGroupId")
                        .HasColumnType("int")
                        .HasColumnName("CompanySubGroupID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("SubGroupDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SubGroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CrmCompanySubGroupsLangId");

                    b.HasIndex("CompanySubGroupId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmCompanySubGroups_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyTitle", b =>
                {
                    b.Property<int>("CompanyTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyTitleID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CompanyTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CompanyTitleId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyTitle");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyTitleLang", b =>
                {
                    b.Property<int>("CrmCompanyTitleLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCompanyTitleLangID")
                        .UseIdentityColumn();

                    b.Property<string>("CompanyTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CompanyTitleId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyTitleID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmCompanyTitleLangId");

                    b.HasIndex("CompanyTitleId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmCompanyTitle_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyTmp", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyID")
                        .UseIdentityColumn();

                    b.Property<int>("AddType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CmpAccInquiry")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpAccInquiry");

                    b.Property<string>("CmpAccountNumber")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpAccountNumber");

                    b.Property<string>("CmpActivityType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpActivityType");

                    b.Property<string>("CmpAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("cmpAddress");

                    b.Property<string>("CmpAddressDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpAddressDesc");

                    b.Property<string>("CmpBuyLimit")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpBuyLimit");

                    b.Property<int?>("CmpCityId")
                        .HasColumnType("int")
                        .HasColumnName("cmpCityId");

                    b.Property<string>("CmpCode")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpCode");

                    b.Property<DateTime?>("CmpCoordinateLastDate")
                        .HasColumnType("datetime")
                        .HasColumnName("cmpCoordinateLastDate");

                    b.Property<string>("CmpCoordinateLastDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cmpCoordinateLastDatePersian");

                    b.Property<int?>("CmpCoordinateLastUserId")
                        .HasColumnType("int")
                        .HasColumnName("cmpCoordinateLastUserId");

                    b.Property<string>("CmpCoordinateLatitude")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpCoordinateLatitude");

                    b.Property<string>("CmpCoordinateLongitude")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpCoordinateLongitude");

                    b.Property<int?>("CmpCoordinateZoomLevel")
                        .HasColumnType("int")
                        .HasColumnName("cmpCoordinateZoomLevel");

                    b.Property<int?>("CmpCountryId")
                        .HasColumnType("int")
                        .HasColumnName("cmpCountryId");

                    b.Property<string>("CmpDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpDescription");

                    b.Property<string>("CmpEconomicCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpEconomicCode");

                    b.Property<string>("CmpEffectiveDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cmpEffectiveDatePersian");

                    b.Property<DateTime?>("CmpEffectiveDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("cmpEffectiveDateTime");

                    b.Property<string>("CmpEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpEmail");

                    b.Property<string>("CmpFame")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("cmpFame");

                    b.Property<string>("CmpFax")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("cmpFax");

                    b.Property<string>("CmpFaxDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpFaxDesc");

                    b.Property<int?>("CmpFirstRegisterUserId")
                        .HasColumnType("int")
                        .HasColumnName("cmpFirstRegisterUserId");

                    b.Property<string>("CmpFreight")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("cmpFreight");

                    b.Property<int?>("CmpGroupId")
                        .HasColumnType("int")
                        .HasColumnName("cmpGroupId");

                    b.Property<int?>("CmpGroupIdIi")
                        .HasColumnType("int")
                        .HasColumnName("cmpGroupIdII");

                    b.Property<int?>("CmpGroupIdIii")
                        .HasColumnType("int")
                        .HasColumnName("cmpGroupIdIII");

                    b.Property<int?>("CmpGroupIdIv")
                        .HasColumnType("int")
                        .HasColumnName("cmpGroupIdIV");

                    b.Property<string>("CmpInquiry")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpInquiry");

                    b.Property<string>("CmpInteresting")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpInteresting");

                    b.Property<string>("CmpMobile")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("cmpMobile");

                    b.Property<string>("CmpMultiGroups")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpMultiGroups");

                    b.Property<string>("CmpName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("cmpName");

                    b.Property<string>("CmpNameEng")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("cmpNameEng");

                    b.Property<string>("CmpNationalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpNationalCode");

                    b.Property<int?>("CmpNumber")
                        .HasColumnType("int")
                        .HasColumnName("cmpNumber");

                    b.Property<string>("CmpPassword")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpPassword");

                    b.Property<string>("CmpPostBox")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpPostBox");

                    b.Property<string>("CmpPreTel")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("cmpPreTel");

                    b.Property<string>("CmpPreTelIi")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("cmpPreTelII");

                    b.Property<int?>("CmpPresentationId")
                        .HasColumnType("int")
                        .HasColumnName("cmpPresentationId");

                    b.Property<int?>("CmpProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("cmpProvinceId");

                    b.Property<int?>("CmpReferUserId")
                        .HasColumnType("int")
                        .HasColumnName("cmpReferUserId");

                    b.Property<string>("CmpRegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpRegistrationNumber");

                    b.Property<string>("CmpSpecialPoint")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpSpecialPoint");

                    b.Property<string>("CmpSpecialWordForCi")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("cmpSpecialWordForCI");

                    b.Property<int?>("CmpSubGroupId")
                        .HasColumnType("int")
                        .HasColumnName("cmpSubGroupId");

                    b.Property<string>("CmpTel")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("cmpTel");

                    b.Property<string>("CmpTelDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpTelDesc");

                    b.Property<string>("CmpTelIi")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("cmpTelII");

                    b.Property<string>("CmpTelIidesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpTelIIDesc");

                    b.Property<string>("CmpTelUpTo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("cmpTelUpTo");

                    b.Property<string>("CmpTelUpToIi")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("cmpTelUpToII");

                    b.Property<int?>("CmpTitleId")
                        .HasColumnType("int")
                        .HasColumnName("cmpTitleId");

                    b.Property<int?>("CmpTypeId")
                        .HasColumnType("int")
                        .HasColumnName("cmpTypeId");

                    b.Property<string>("CmpUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpUserName");

                    b.Property<string>("CmpWebSite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpWebSite");

                    b.Property<string>("CmpZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpZipCode");

                    b.Property<byte[]>("CompanyLogo")
                        .HasColumnType("image");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ImportDate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("ImportDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CompanyId");

                    b.HasIndex("CmpCityId");

                    b.HasIndex("CmpCoordinateLastUserId");

                    b.HasIndex("CmpCountryId");

                    b.HasIndex("CmpFirstRegisterUserId");

                    b.HasIndex("CmpGroupId");

                    b.HasIndex("CmpGroupIdIi");

                    b.HasIndex("CmpGroupIdIii");

                    b.HasIndex("CmpGroupIdIv");

                    b.HasIndex("CmpPresentationId");

                    b.HasIndex("CmpProvinceId");

                    b.HasIndex("CmpReferUserId");

                    b.HasIndex("CmpSubGroupId");

                    b.HasIndex("CmpTitleId");

                    b.HasIndex("CmpTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyTmp");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyTmpLang", b =>
                {
                    b.Property<int>("CrmCompanyLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCompanyLangID")
                        .UseIdentityColumn();

                    b.Property<string>("CmpActivityType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpActivityType");

                    b.Property<string>("CmpAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("cmpAddress");

                    b.Property<string>("CmpAddressDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpAddressDesc");

                    b.Property<string>("CmpDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpDescription");

                    b.Property<string>("CmpFame")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("cmpFame");

                    b.Property<string>("CmpFaxDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpFaxDesc");

                    b.Property<string>("CmpInquiry")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpInquiry");

                    b.Property<string>("CmpInteresting")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpInteresting");

                    b.Property<string>("CmpName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("cmpName");

                    b.Property<string>("CmpSpecialPoint")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpSpecialPoint");

                    b.Property<string>("CmpSpecialWordForCi")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("cmpSpecialWordForCI");

                    b.Property<string>("CmpTelDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpTelDesc");

                    b.Property<string>("CmpTelIidesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpTelIIDesc");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmCompanyLangId")
                        .HasName("PK_CrmCompanyTmpLang");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmCompanyTmp_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyType", b =>
                {
                    b.Property<int>("CompanyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyTypeID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CompanyTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CompanyTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyTypeLang", b =>
                {
                    b.Property<int>("CrmCompanyTypeLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmCompanyTypeLangID")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyTypeID");

                    b.Property<string>("CompanyTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmCompanyTypeLangId");

                    b.HasIndex("CompanyTypeId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmCompanyType_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyUserForbidden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("CanDel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("CanEdit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("CanSee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("ForbiddenCompanyId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("ForbiddenCompanyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmCompanyUserForbidden");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConversationID")
                        .UseIdentityColumn();

                    b.Property<string>("ApiId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CnvsCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("cnvsCompanyId");

                    b.Property<DateTime?>("CnvsCoordinateLastDate")
                        .HasColumnType("datetime")
                        .HasColumnName("cnvsCoordinateLastDate");

                    b.Property<string>("CnvsCoordinateLastDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cnvsCoordinateLastDatePersian");

                    b.Property<string>("CnvsCoordinateLatitude")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cnvsCoordinateLatitude");

                    b.Property<string>("CnvsCoordinateLongitude")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cnvsCoordinateLongitude");

                    b.Property<string>("CnvsDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("cnvsDate");

                    b.Property<DateTime?>("CnvsDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("cnvsDateTime");

                    b.Property<string>("CnvsDay")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("cnvsDay");

                    b.Property<string>("CnvsDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("cnvsDesc");

                    b.Property<TimeSpan?>("CnvsDoingTime")
                        .HasColumnType("time")
                        .HasColumnName("cnvsDoingTime");

                    b.Property<string>("CnvsFirstRegisterDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("cnvsFirstRegisterDate");

                    b.Property<DateTime?>("CnvsFirstRegisterDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("cnvsFirstRegisterDateTime");

                    b.Property<int?>("CnvsFirstRegisterUserId")
                        .HasColumnType("int")
                        .HasColumnName("cnvsFirstRegisterUserId");

                    b.Property<bool?>("CnvsFocmpCanSee")
                        .HasColumnType("bit")
                        .HasColumnName("cnvsFOCmpCanSee");

                    b.Property<bool?>("CnvsIsBookMark")
                        .HasColumnType("bit")
                        .HasColumnName("cnvsIsBookMark");

                    b.Property<bool?>("CnvsIsCopy")
                        .HasColumnType("bit")
                        .HasColumnName("cnvsIsCopy");

                    b.Property<bool?>("CnvsIsTicket")
                        .HasColumnType("bit")
                        .HasColumnName("cnvsIsTicket");

                    b.Property<int?>("CnvsPersonId")
                        .HasColumnType("int")
                        .HasColumnName("cnvsPersonId");

                    b.Property<int?>("CnvsPriorityId")
                        .HasColumnType("int")
                        .HasColumnName("cnvsPriorityId");

                    b.Property<int?>("CnvsProjectId")
                        .HasColumnType("int")
                        .HasColumnName("cnvsProjectId");

                    b.Property<string>("CnvsReferDesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cnvsReferDesc");

                    b.Property<int?>("CnvsReferUserId")
                        .HasColumnType("int")
                        .HasColumnName("cnvsReferUserId");

                    b.Property<string>("CnvsRemindDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("cnvsRemindDate");

                    b.Property<string>("CnvsRemindDateForAllarm")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("cnvsRemindDateForAllarm");

                    b.Property<DateTime?>("CnvsRemindDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("cnvsRemindDateTime");

                    b.Property<DateTime?>("CnvsRemindDateTimeForAllarm")
                        .HasColumnType("datetime")
                        .HasColumnName("cnvsRemindDateTimeForAllarm");

                    b.Property<bool?>("CnvsRemindOk")
                        .HasColumnType("bit")
                        .HasColumnName("cnvsRemindOk");

                    b.Property<string>("CnvsRemindTime")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("cnvsRemindTime");

                    b.Property<int?>("CnvsStatusId")
                        .HasColumnType("int")
                        .HasColumnName("cnvsStatusId");

                    b.Property<string>("CnvsSubject")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cnvsSubject");

                    b.Property<bool?>("CnvsTicketIsRead")
                        .HasColumnType("bit")
                        .HasColumnName("cnvsTicketIsRead");

                    b.Property<string>("CnvsTime")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("cnvsTime");

                    b.Property<int?>("CnvsTopicId")
                        .HasColumnType("int")
                        .HasColumnName("cnvsTopicId");

                    b.Property<int?>("CnvsUserId")
                        .HasColumnType("int")
                        .HasColumnName("cnvsUserId");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ConversationId");

                    b.HasIndex("CnvsCompanyId")
                        .HasDatabaseName("IX_CrmConversation_CompanyId");

                    b.HasIndex("CnvsFirstRegisterUserId");

                    b.HasIndex("CnvsPersonId");

                    b.HasIndex("CnvsPriorityId");

                    b.HasIndex("CnvsProjectId")
                        .HasDatabaseName("IX_CrmConversation_ProjectId");

                    b.HasIndex("CnvsReferUserId");

                    b.HasIndex("CnvsStatusId")
                        .HasDatabaseName("IX_CrmConversation_StatusId");

                    b.HasIndex("CnvsTopicId");

                    b.HasIndex("CnvsUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmConversation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationDefaultContext", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Col11")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col12")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col13")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col14")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col15")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col16")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col17")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col18")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col19")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col20")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col21")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col22")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col23")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col24")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col25")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col26")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col27")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col28")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col29")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col30")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col31")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col32")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col33")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col34")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col35")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col36")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col37")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col38")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col39")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col40")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col41")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col42")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col43")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col44")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col45")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col46")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col47")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col48")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col49")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col50")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col51")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col52")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col53")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col54")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col55")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col56")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColEight")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColFive")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColFour")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColNine")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColOne")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColSeven")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColSix")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColTen")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColThree")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColTwo")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmConversationDefaultContext");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationDefaultContextLang", b =>
                {
                    b.Property<int>("CrmConversationDefaultContextLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmConversationDefaultContextLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Col11")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col12")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col13")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col14")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col15")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col16")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col17")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col18")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col19")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col20")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col21")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col22")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col23")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col24")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col25")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col26")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col27")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col28")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col29")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col30")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col31")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col32")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col33")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col34")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col35")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col36")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col37")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col38")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col39")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col40")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col41")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col42")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col43")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col44")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col45")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col46")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col47")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col48")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col49")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col50")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col51")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col52")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col53")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col54")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col55")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Col56")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColEight")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColFive")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColFour")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColNine")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColOne")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColSeven")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColSix")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColTen")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColThree")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ColTwo")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmConversationDefaultContextLangId");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmConversationDefaultContext_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationLang", b =>
                {
                    b.Property<int>("CrmConversationLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmConversationLangID")
                        .UseIdentityColumn();

                    b.Property<string>("CnvsDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("cnvsDesc");

                    b.Property<string>("CnvsReferDesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cnvsReferDesc");

                    b.Property<string>("CnvsSubject")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cnvsSubject");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int")
                        .HasColumnName("ConversationID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmConversationLangId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmConversation_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationPriority", b =>
                {
                    b.Property<int>("ConversationPriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConversationPriorityID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PriorityDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ConversationPriorityId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmConversationPriority");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationPriorityLang", b =>
                {
                    b.Property<int>("CrmConversationPriorityLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmConversationPriorityLangID")
                        .UseIdentityColumn();

                    b.Property<int>("ConversationPriorityId")
                        .HasColumnType("int")
                        .HasColumnName("ConversationPriorityID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PriorityDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CrmConversationPriorityLangId");

                    b.HasIndex("ConversationPriorityId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmConversationPriority_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationReferUsers", b =>
                {
                    b.Property<int>("ConversationReferUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConversationReferUserID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int>("ReferUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ConversationReferUserId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ReferUserId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmConversationReferUsers");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatus", b =>
                {
                    b.Property<int>("ConversationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConversationStatusID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EmailBodyPatternFormula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSubjectPatternFormula")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("EventPolicyIsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("Fodefault")
                        .HasColumnType("bit")
                        .HasColumnName("FODefault");

                    b.Property<bool?>("ForcedStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProgressPercent")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("SendDelayDays")
                        .HasColumnType("int");

                    b.Property<bool?>("SendEmail")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendForAllCmpPersons")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendImmediately")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendSmsgsm")
                        .HasColumnType("bit")
                        .HasColumnName("SendSMSGSM");

                    b.Property<bool?>("SendSmsweb")
                        .HasColumnType("bit")
                        .HasColumnName("SendSMSWeb");

                    b.Property<string>("SmsbodyPatternFormula")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("SMSBodyPatternFormula");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StatusDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short?>("StatusOrder")
                        .HasColumnType("smallint");

                    b.Property<bool?>("UserCanCheckBeforeSend")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ConversationStatusId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmConversationStatus");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatusGroups", b =>
                {
                    b.Property<int>("ConversationStatusGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConversationStatusGroupID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ConversationStatusGroup")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConversationStatusGroupDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("FocnvsReferMultiUser")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("FOCnvsReferMultiUser");

                    b.Property<int?>("FocnvsReferUserId")
                        .HasColumnType("int")
                        .HasColumnName("FOCnvsReferUserId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ConversationStatusGroupId");

                    b.HasIndex("FocnvsReferUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmConversationStatusGroups");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatusGroupsLang", b =>
                {
                    b.Property<int>("CrmConversationStatusGroupsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmConversationStatusGroupsLangID")
                        .UseIdentityColumn();

                    b.Property<string>("ConversationStatusGroup")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConversationStatusGroupDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ConversationStatusGroupId")
                        .HasColumnType("int")
                        .HasColumnName("ConversationStatusGroupID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmConversationStatusGroupsLangId");

                    b.HasIndex("ConversationStatusGroupId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmConversationStatusGroups_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatusLang", b =>
                {
                    b.Property<int>("CrmConversationStatusLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmConversationStatusLangID")
                        .UseIdentityColumn();

                    b.Property<int>("ConversationStatusId")
                        .HasColumnType("int")
                        .HasColumnName("ConversationStatusID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StatusDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CrmConversationStatusLangId");

                    b.HasIndex("ConversationStatusId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmConversationStatus_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationTmp", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConversationID")
                        .UseIdentityColumn();

                    b.Property<string>("ApiId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CnvsCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("cnvsCompanyId");

                    b.Property<DateTime?>("CnvsCoordinateLastDate")
                        .HasColumnType("datetime")
                        .HasColumnName("cnvsCoordinateLastDate");

                    b.Property<string>("CnvsCoordinateLastDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cnvsCoordinateLastDatePersian");

                    b.Property<string>("CnvsCoordinateLatitude")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cnvsCoordinateLatitude");

                    b.Property<string>("CnvsCoordinateLongitude")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cnvsCoordinateLongitude");

                    b.Property<string>("CnvsDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("cnvsDate");

                    b.Property<DateTime?>("CnvsDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("cnvsDateTime");

                    b.Property<string>("CnvsDay")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("cnvsDay");

                    b.Property<string>("CnvsDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("cnvsDesc");

                    b.Property<bool?>("CnvsEventPolicyNeedCheck")
                        .HasColumnType("bit")
                        .HasColumnName("cnvsEventPolicyNeedCheck");

                    b.Property<string>("CnvsFirstRegisterDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("cnvsFirstRegisterDate");

                    b.Property<DateTime?>("CnvsFirstRegisterDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("cnvsFirstRegisterDateTime");

                    b.Property<int?>("CnvsFirstRegisterUserId")
                        .HasColumnType("int")
                        .HasColumnName("cnvsFirstRegisterUserId");

                    b.Property<bool?>("CnvsFocmpCanSee")
                        .HasColumnType("bit")
                        .HasColumnName("cnvsFOCmpCanSee");

                    b.Property<bool?>("CnvsIsBookMark")
                        .HasColumnType("bit")
                        .HasColumnName("cnvsIsBookMark");

                    b.Property<bool?>("CnvsIsTicket")
                        .HasColumnType("bit")
                        .HasColumnName("cnvsIsTicket");

                    b.Property<int?>("CnvsPersonId")
                        .HasColumnType("int")
                        .HasColumnName("cnvsPersonId");

                    b.Property<int?>("CnvsPriorityId")
                        .HasColumnType("int")
                        .HasColumnName("cnvsPriorityId");

                    b.Property<int?>("CnvsProjectId")
                        .HasColumnType("int")
                        .HasColumnName("cnvsProjectId");

                    b.Property<string>("CnvsReferDesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cnvsReferDesc");

                    b.Property<int?>("CnvsReferUserId")
                        .HasColumnType("int")
                        .HasColumnName("cnvsReferUserId");

                    b.Property<string>("CnvsRemindDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("cnvsRemindDate");

                    b.Property<string>("CnvsRemindDateForAllarm")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("cnvsRemindDateForAllarm");

                    b.Property<DateTime?>("CnvsRemindDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("cnvsRemindDateTime");

                    b.Property<DateTime?>("CnvsRemindDateTimeForAllarm")
                        .HasColumnType("datetime")
                        .HasColumnName("cnvsRemindDateTimeForAllarm");

                    b.Property<bool?>("CnvsRemindOk")
                        .HasColumnType("bit")
                        .HasColumnName("cnvsRemindOk");

                    b.Property<string>("CnvsRemindTime")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("cnvsRemindTime");

                    b.Property<int?>("CnvsStatusId")
                        .HasColumnType("int")
                        .HasColumnName("cnvsStatusId");

                    b.Property<string>("CnvsSubject")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cnvsSubject");

                    b.Property<string>("CnvsTime")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("cnvsTime");

                    b.Property<int?>("CnvsTopicId")
                        .HasColumnType("int")
                        .HasColumnName("cnvsTopicId");

                    b.Property<int?>("CnvsUserId")
                        .HasColumnType("int")
                        .HasColumnName("cnvsUserId");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("TmpUserMultiUserText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ConversationId");

                    b.HasIndex("CnvsCompanyId");

                    b.HasIndex("CnvsFirstRegisterUserId");

                    b.HasIndex("CnvsPersonId");

                    b.HasIndex("CnvsPriorityId");

                    b.HasIndex("CnvsProjectId");

                    b.HasIndex("CnvsReferUserId");

                    b.HasIndex("CnvsStatusId");

                    b.HasIndex("CnvsTopicId");

                    b.HasIndex("CnvsUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmConversationTmp");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationTmpLang", b =>
                {
                    b.Property<int>("CrmConversationLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmConversationLangID")
                        .UseIdentityColumn();

                    b.Property<string>("CnvsDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("cnvsDesc");

                    b.Property<string>("CnvsReferDesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cnvsReferDesc");

                    b.Property<string>("CnvsSubject")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cnvsSubject");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int")
                        .HasColumnName("ConversationID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmConversationLangId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmConversationTmp_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationTopics", b =>
                {
                    b.Property<int>("ConversationTopicsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConversationTopicsID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("Fodefault")
                        .HasColumnType("bit")
                        .HasColumnName("FODefault");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TopicDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short?>("TopicOrder")
                        .HasColumnType("smallint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ConversationTopicsId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmConversationTopics");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationTopicsLang", b =>
                {
                    b.Property<int>("CrmConversationTopicsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmConversationTopicsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("ConversationTopicsId")
                        .HasColumnType("int")
                        .HasColumnName("ConversationTopicsID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TopicDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CrmConversationTopicsLangId");

                    b.HasIndex("ConversationTopicsId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmConversationTopics_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldMasterValueDetails", b =>
                {
                    b.Property<int>("FormFieldMasterValueDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("CheckedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CheckedDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("CheckerUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("MasterValueId")
                        .HasColumnType("int");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("FormFieldMasterValueDetailId");

                    b.HasIndex("CheckerUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("FormId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MasterValueId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmDyFormFieldMasterValueDetails");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldMasterValues", b =>
                {
                    b.Property<int>("FormFieldMasterValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("CheckedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CheckedDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("CheckerUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyPersonId")
                        .HasColumnType("int");

                    b.Property<int?>("ConversationId")
                        .HasColumnType("int");

                    b.Property<int?>("DetailObjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int?>("MasterObjectId")
                        .HasColumnType("int");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("SubDetailObjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkflowId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkflowStepId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("FormFieldMasterValueId");

                    b.HasIndex("CheckerUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyPersonId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("FormId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkflowId");

                    b.HasIndex("WorkflowStepId");

                    b.ToTable("CrmDyFormFieldMasterValues");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldTypes", b =>
                {
                    b.Property<int>("FormFieldTypeId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("TypeInWeb")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeInWindows")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("FormFieldTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmDyFormFieldTypes");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldTypesLang", b =>
                {
                    b.Property<int>("CrmDyFormFieldTypeLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmDyFormFieldTypeLangID")
                        .UseIdentityColumn();

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CrmDyFormFieldTypeLangId");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmDyFormFieldTypes_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldValues", b =>
                {
                    b.Property<int>("FormFieldValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyPersonId")
                        .HasColumnType("int");

                    b.Property<int?>("ConversationId")
                        .HasColumnType("int");

                    b.Property<int?>("DetailObjectId")
                        .HasColumnType("int");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int?>("MasterObjectId")
                        .HasColumnType("int");

                    b.Property<int>("MasterValueId")
                        .HasColumnType("int");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("SubDetailObjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("FormFieldValueId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyPersonId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("FieldId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("FormId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MasterValueId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmDyFormFieldValues");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldValuesLang", b =>
                {
                    b.Property<int>("CrmDyFormFieldValueLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmDyFormFieldValueLangID")
                        .UseIdentityColumn();

                    b.Property<int>("FieldValueId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CrmDyFormFieldValueLangId");

                    b.HasIndex("FieldValueId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmDyFormFieldValues_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFields", b =>
                {
                    b.Property<int>("FormFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("ColumnPosition")
                        .HasColumnType("int");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FieldTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<long?>("MaxValue")
                        .HasColumnType("bigint");

                    b.Property<long?>("MinValue")
                        .HasColumnType("bigint");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("MultiItems")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<string>("ParentFieldBgColor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParentFieldColor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentFieldId")
                        .HasColumnType("int");

                    b.Property<int>("ParentFormId")
                        .HasColumnType("int");

                    b.Property<string>("PlaceholderTxt")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("RegularExpressionErrorTxt")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("RegularExpressionId")
                        .HasColumnType("int");

                    b.Property<long?>("StrLength")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("FormFieldId");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("FormId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("RegularExpressionId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmDyFormFields");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldsLang", b =>
                {
                    b.Property<int>("CrmDyFormFieldLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmDyFormFieldLangID")
                        .UseIdentityColumn();

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<string>("FieldTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("MultiItems")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceholderTxt")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RegularExpressionErrorTxt")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("CrmDyFormFieldLangId");

                    b.HasIndex("FieldId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmDyFormFields_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormRegularExpressions", b =>
                {
                    b.Property<int>("FormRegularExpressionId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("RegularExpression")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RegularExpressionOther")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("FormRegularExpressionId");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmDyFormRegularExpressions");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormRegularExpressionsLang", b =>
                {
                    b.Property<int>("CrmDyFormRegularExpressionLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmDyFormRegularExpressionLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("RegularExpressionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("CrmDyFormRegularExpressionLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("RegularExpressionId");

                    b.ToTable("CrmDyFormRegularExpressions_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormUserAccess", b =>
                {
                    b.Property<int>("FormUserAccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("FormUserAccessId");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("FormId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmDyFormUserAccess");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormWorkflowSteps", b =>
                {
                    b.Property<int>("FormWorkflowStepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CheckerUserIds")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("MultiReferUserIds")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool?>("NoNextWithOutCheck")
                        .HasColumnType("bit");

                    b.Property<bool?>("NoPrevious")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<int?>("ProgressPercent")
                        .HasColumnType("int");

                    b.Property<int?>("ReferRollId")
                        .HasColumnType("int");

                    b.Property<string>("ReferUserIds")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("SubFormId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowStepTitle")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("FormWorkflowStepId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ReferRollId");

                    b.HasIndex("SubFormId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("CrmDyFormWorkflowSteps");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormWorkflowStepsLang", b =>
                {
                    b.Property<int>("CrmDyFormWorkflowStepLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmDyFormWorkflowStepLangID")
                        .UseIdentityColumn();

                    b.Property<int>("FormWorkflowStepId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("WorkflowStepTitle")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("CrmDyFormWorkflowStepLangId");

                    b.HasIndex("FormWorkflowStepId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmDyFormWorkflowSteps_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormWorkflows", b =>
                {
                    b.Property<int>("FormWorkflowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("DyFormId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool?>("WorkflowPanelHide")
                        .HasColumnType("bit");

                    b.Property<int?>("WorkflowPanelShowType")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowTitle")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("FormWorkflowId");

                    b.HasIndex("DyFormId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmDyFormWorkflows");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormWorkflowsLang", b =>
                {
                    b.Property<int>("CrmDyFormWorkflowLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmDyFormWorkflowLangID")
                        .UseIdentityColumn();

                    b.Property<int>("FormWorkflowId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("WorkflowTitle")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("CrmDyFormWorkflowLangId");

                    b.HasIndex("FormWorkflowId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmDyFormWorkflows_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyForms", b =>
                {
                    b.Property<int>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CheckerUsersId")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("ColumnCount")
                        .HasColumnType("int");

                    b.Property<int?>("CrmSysPartId")
                        .HasColumnType("int");

                    b.Property<int?>("EnableForRollId")
                        .HasColumnType("int");

                    b.Property<string>("EnableForUsersId")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("FocanInsertMulti")
                        .HasColumnType("bit")
                        .HasColumnName("FOCanInsertMulti");

                    b.Property<bool?>("FoisEnable")
                        .HasColumnType("bit")
                        .HasColumnName("FOIsEnable");

                    b.Property<bool?>("FoisVisible")
                        .HasColumnType("bit")
                        .HasColumnName("FOIsVisible");

                    b.Property<string>("FormBgColor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FormBody")
                        .HasColumnType("ntext");

                    b.Property<string>("FormFooter")
                        .HasColumnType("ntext");

                    b.Property<string>("FormHeader")
                        .HasColumnType("ntext");

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FormTitle")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FormTitleColor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("FosysPartId")
                        .HasColumnType("int")
                        .HasColumnName("FOSysPartId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("HaveUploadFile")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<int?>("ParentFormId")
                        .HasColumnType("int");

                    b.Property<int?>("PrintFormatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("UploadFileCount")
                        .HasColumnType("int");

                    b.Property<string>("UploadFileDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("UploadFileExtension")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("UploadFileMaxSize")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkflowId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("FormId");

                    b.HasIndex("CrmSysPartId");

                    b.HasIndex("EnableForRollId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("FosysPartId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrintFormatId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("CrmDyForms");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormsLang", b =>
                {
                    b.Property<int>("CrmDyFormLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmDyFormLangID")
                        .UseIdentityColumn();

                    b.Property<string>("FormBody")
                        .HasColumnType("ntext");

                    b.Property<string>("FormFooter")
                        .HasColumnType("ntext");

                    b.Property<string>("FormHeader")
                        .HasColumnType("ntext");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FormTitle")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("UploadFileDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("CrmDyFormLangId");

                    b.HasIndex("FormId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmDyForms_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFileDirectoryType", b =>
                {
                    b.Property<int>("FileDirectoryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FileDirectoryTypeID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FileDirectoryType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("FileDirectoryTypeOprId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short?>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<short?>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("FileDirectoryTypeId");

                    b.HasIndex("FileDirectoryTypeOprId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmFileDirectoryType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFileDirectoryTypeLang", b =>
                {
                    b.Property<int>("CrmFileDirectoryTypeLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmFileDirectoryTypeLangID")
                        .UseIdentityColumn();

                    b.Property<string>("FileDirectoryType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FileDirectoryTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FileDirectoryTypeID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmFileDirectoryTypeLangId");

                    b.HasIndex("FileDirectoryTypeId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmFileDirectoryType_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFileDirectoryTypeOpr", b =>
                {
                    b.Property<int>("FileDirectoryTypeOprId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FileDirectoryTypeOpr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("FileDirectoryTypeOprId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmFileDirectoryTypeOpr");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFileDirectoryTypeOprLang", b =>
                {
                    b.Property<int>("CrmFileDirectoryTypeOprLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmFileDirectoryTypeOprLangID")
                        .UseIdentityColumn();

                    b.Property<string>("FileDirectoryTypeOpr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FileDirectoryTypeOprId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmFileDirectoryTypeOprLangId");

                    b.HasIndex("FileDirectoryTypeOprId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmFileDirectoryTypeOpr_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFilesDirectory", b =>
                {
                    b.Property<int>("FileDirectoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FileDirectoryID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CopyFromPath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("DetailId")
                        .HasColumnType("int");

                    b.Property<string>("DocDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("DocDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DocDay")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DocTime")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("FileDirectoryTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("FolderName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int?>("MasterId")
                        .HasColumnType("int");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("SubDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TypeOprObjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeOprObjectIdI")
                        .HasColumnType("int");

                    b.Property<int?>("TypeOprObjectIdIi")
                        .HasColumnType("int")
                        .HasColumnName("TypeOprObjectIdII");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("FileDirectoryId");

                    b.HasIndex("FileDirectoryTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MasterId");

                    b.HasIndex("SubDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmFilesDirectory");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFilesDirectoryLang", b =>
                {
                    b.Property<int>("CrmFilesDirectoryLanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmFilesDirectoryLanID")
                        .UseIdentityColumn();

                    b.Property<int>("FileDirectoryId")
                        .HasColumnType("int")
                        .HasColumnName("FileDirectoryID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CrmFilesDirectoryLanId");

                    b.HasIndex("FileDirectoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmFilesDirectory_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFilesDirectoryTemplate", b =>
                {
                    b.Property<long>("FileDirectoryTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("FileDirectoryTemplateID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CopyFromPath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("FileDirectoryTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FileDirectoryTemplateId");

                    b.HasIndex("FileDirectoryTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmFilesDirectoryTemplate");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFilesDirectoryTemplateType", b =>
                {
                    b.Property<int>("CrmFilesDirectoryTemplateTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CrmFilesDirectoryTemplateTypeID");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FilesDirectoryTemplateType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmFilesDirectoryTemplateTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmFilesDirectoryTemplateType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFoSetting", b =>
                {
                    b.Property<int>("FoSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CmpDefaultGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("CmpDefaultGroupIdIi")
                        .HasColumnType("int")
                        .HasColumnName("CmpDefaultGroupIdII");

                    b.Property<int?>("CmpDefaultGroupIdIii")
                        .HasColumnType("int")
                        .HasColumnName("CmpDefaultGroupIdIII");

                    b.Property<int?>("CmpDefaultGroupIdIv")
                        .HasColumnType("int")
                        .HasColumnName("CmpDefaultGroupIdIV");

                    b.Property<int?>("CmpDefaultPresentationId")
                        .HasColumnType("int");

                    b.Property<int>("CmpDefaultReferUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CmpDefaultSubGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("CmpDefaultTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CnvsDefaultDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("CnvsDefaultPriorityId")
                        .HasColumnType("int");

                    b.Property<string>("CnvsDefaultReferDesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CnvsDefaultReferUserId")
                        .HasColumnType("int");

                    b.Property<int>("CnvsDefaultStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CnvsDefaultTopicId")
                        .HasColumnType("int");

                    b.Property<int>("CnvsDefaultUserId")
                        .HasColumnType("int");

                    b.Property<string>("CnvsDescTooltip")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("EmailBodyPatternFormula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EmailSendingIsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("EmailSettingId")
                        .HasColumnType("int");

                    b.Property<string>("EmailSubjectPatternFormula")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("EmailUserInfoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("FoLogEmailAdminI")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FoLogEmailAdminIi")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FoLogEmailAdminII");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LoginBgColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LoginBgImagePath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("LoginBtnBgColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LoginBtnFontColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LoginFormTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LoginLinkColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("LoginPosition")
                        .HasColumnType("int");

                    b.Property<string>("LoginRegLinkTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LoginTextBorderFcolor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LoginTextBorderFColor");

                    b.Property<string>("LoginTextBorderTcolor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LoginTextBorderTColor");

                    b.Property<string>("LoginTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("PrdDisplayType")
                        .HasColumnType("int");

                    b.Property<bool?>("PrdFcrvisible")
                        .HasColumnType("bit")
                        .HasColumnName("PrdFCRVisible");

                    b.Property<bool?>("PrdPriceInDecimalVisible")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrdPriceVisible")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrdPriceWithFcrvisible")
                        .HasColumnType("bit")
                        .HasColumnName("PrdPriceWithFCRVisible");

                    b.Property<int>("PrjDefaultCnvsStatusGroupId")
                        .HasColumnType("int");

                    b.Property<bool?>("PrjDefaultFocmpCanSee")
                        .HasColumnType("bit")
                        .HasColumnName("PrjDefaultFOCmpCanSee");

                    b.Property<int?>("PrjDefaultGradeId")
                        .HasColumnType("int");

                    b.Property<int?>("PrjDefaultGroupId")
                        .HasColumnType("int");

                    b.Property<string>("PrjDefaultPostFix")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("PrjDefaultPriorityId")
                        .HasColumnType("int");

                    b.Property<int>("PrjDefaultStarterUserId")
                        .HasColumnType("int");

                    b.Property<string>("PrjDefaultTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("PrjInsertCrmProjectsForbiddenFufdpactive")
                        .HasColumnType("bit")
                        .HasColumnName("PrjInsertCrmProjectsForbiddenFUFDPActive");

                    b.Property<bool?>("PrjInsertProjectInformationsDefualtFieldActive")
                        .HasColumnType("bit");

                    b.Property<string>("RegBgColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegBgImagePath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RegBtnBgColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegBtnFontColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("RegDyFormId")
                        .HasColumnType("int");

                    b.Property<string>("RegFormTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegLinkColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegLoginLinkTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RegPosition")
                        .HasColumnType("int");

                    b.Property<string>("RegTextBorderFcolor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("RegTextBorderFColor");

                    b.Property<string>("RegTextBorderTcolor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("RegTextBorderTColor");

                    b.Property<string>("RegTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("ShpHomeGalleryIid")
                        .HasColumnType("int")
                        .HasColumnName("ShpHomeGalleryIId");

                    b.Property<int?>("ShpHomeGalleryIiid")
                        .HasColumnType("int")
                        .HasColumnName("ShpHomeGalleryIIId");

                    b.Property<int?>("ShpHomeGalleryIiiid")
                        .HasColumnType("int")
                        .HasColumnName("ShpHomeGalleryIIIId");

                    b.Property<string>("ShpHomePrdPartTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShpHomeTopHeaderBgColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShpHomeTopHeaderFontColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShpLogoPathWidth110")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ShpLogoPathWidth215")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("ShpSidebarMenuVisible")
                        .HasColumnType("bit");

                    b.Property<string>("SmsBodyPatternFormula")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("SmsSendByGsm")
                        .HasColumnType("bit")
                        .HasColumnName("SmsSendByGSM");

                    b.Property<bool?>("SmsSendByWeb")
                        .HasColumnType("bit");

                    b.Property<bool?>("SmsSendingIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SmsWebServiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SmsWebServicePassword")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SmsWebServiceUrl")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SmsWebServiceUserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TicketDescTooltip")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("TicketSubjSelectLoadDefaultContext")
                        .HasColumnType("bit");

                    b.Property<string>("TicketSubjectDefaultContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("FoSettingId");

                    b.HasIndex("CmpDefaultGroupId");

                    b.HasIndex("CmpDefaultGroupIdIi");

                    b.HasIndex("CmpDefaultGroupIdIii");

                    b.HasIndex("CmpDefaultGroupIdIv");

                    b.HasIndex("CmpDefaultPresentationId");

                    b.HasIndex("CmpDefaultReferUserId");

                    b.HasIndex("CmpDefaultSubGroupId");

                    b.HasIndex("CmpDefaultTypeId");

                    b.HasIndex("CnvsDefaultPriorityId");

                    b.HasIndex("CnvsDefaultReferUserId");

                    b.HasIndex("CnvsDefaultStatusId");

                    b.HasIndex("CnvsDefaultTopicId");

                    b.HasIndex("CnvsDefaultUserId");

                    b.HasIndex("EmailSettingId");

                    b.HasIndex("EmailUserInfoId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrjDefaultCnvsStatusGroupId");

                    b.HasIndex("PrjDefaultGradeId");

                    b.HasIndex("PrjDefaultGroupId");

                    b.HasIndex("PrjDefaultPriorityId");

                    b.HasIndex("PrjDefaultStarterUserId");

                    b.HasIndex("RegDyFormId");

                    b.HasIndex("ShpHomeGalleryIid");

                    b.HasIndex("ShpHomeGalleryIiid");

                    b.HasIndex("ShpHomeGalleryIiiid");

                    b.HasIndex("UserId");

                    b.ToTable("CrmFoSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFoSettingLang", b =>
                {
                    b.Property<int>("CrmFoSettingLandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmFoSettingLandID")
                        .UseIdentityColumn();

                    b.Property<string>("CnvsDefaultDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("CnvsDefaultReferDesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CnvsDescTooltip")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("FoSettingId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LoginFormTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LoginRegLinkTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LoginTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrjDefaultPostFix")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PrjDefaultTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegFormTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegLoginLinkTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShpHomePrdPartTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TicketDescTooltip")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("TicketSubjectDefaultContext")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CrmFoSettingLandId");

                    b.HasIndex("FoSettingId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmFoSetting_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFund", b =>
                {
                    b.Property<int>("FundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("FundCredit")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("FundDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FundDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<decimal?>("FundDebit")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("FundDesc")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("FundGroupId")
                        .HasColumnType("int");

                    b.Property<long>("FundNumber")
                        .HasColumnType("bigint");

                    b.Property<int?>("FundOrderView")
                        .HasColumnType("int");

                    b.Property<decimal?>("FundRemain")
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("FundId");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("FundGroupId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmFund");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFundGroups", b =>
                {
                    b.Property<int>("FundGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("FundGroupId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmFundGroups");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFundGroupsLang", b =>
                {
                    b.Property<int>("CrmFundGroupLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmFundGroupLangID")
                        .UseIdentityColumn();

                    b.Property<int>("FundGroupId")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmFundGroupLangId");

                    b.HasIndex("FundGroupId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmFundGroups_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFundLang", b =>
                {
                    b.Property<int>("CrmFundLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmFundLangID")
                        .UseIdentityColumn();

                    b.Property<string>("FundDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FundId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmFundLangId");

                    b.HasIndex("FundId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmFund_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmImportFromExcel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("CmpAccInquiry")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpAccInquiry");

                    b.Property<string>("CmpAccountNumber")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpAccountNumber");

                    b.Property<string>("CmpActivityType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpActivityType");

                    b.Property<string>("CmpAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("cmpAddress");

                    b.Property<string>("CmpAddressDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpAddressDesc");

                    b.Property<string>("CmpBuyLimit")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpBuyLimit");

                    b.Property<string>("CmpCode")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("cmpCode");

                    b.Property<string>("CmpCoordinateLastDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cmpCoordinateLastDatePersian");

                    b.Property<string>("CmpCoordinateLatitude")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpCoordinateLatitude");

                    b.Property<string>("CmpCoordinateLongitude")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpCoordinateLongitude");

                    b.Property<int?>("CmpCoordinateZoomLevel")
                        .HasColumnType("int")
                        .HasColumnName("cmpCoordinateZoomLevel");

                    b.Property<string>("CmpDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpDescription");

                    b.Property<string>("CmpEconomicCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cmpEconomicCode");

                    b.Property<string>("CmpEffectiveDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cmpEffectiveDatePersian");

                    b.Property<DateTime?>("CmpEffectiveDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("cmpEffectiveDateTime");

                    b.Property<string>("CmpEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpEmail");

                    b.Property<string>("CmpFame")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("cmpFame");

                    b.Property<string>("CmpFax")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("cmpFax");

                    b.Property<string>("CmpFaxDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cmpFaxDesc");

                    b.Property<string>("CmpFreight")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("cmpFreight");

                    b.Property<string>("CmpInquiry")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpInquiry");

                    b.Property<string>("CmpInteresting")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpInteresting");

                    b.Property<int?>("CmpKind")
                        .HasColumnType("int")
                        .HasColumnName("cmpKind");

                    b.Property<string>("CmpMobile")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("cmpMobile");

                    b.Property<string>("CmpName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("cmpName");

                    b.Property<string>("CmpNameEng")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("cmpNameEng");

                    b.Property<string>("CmpNationalCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cmpNationalCode");

                    b.Property<int?>("CmpNumber")
                        .HasColumnType("int")
                        .HasColumnName("cmpNumber");

                    b.Property<string>("CmpPassword")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpPassword");

                    b.Property<string>("CmpPostBox")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cmpPostBox");

                    b.Property<string>("CmpPreTel")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("cmpPreTel");

                    b.Property<string>("CmpPreTelIi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("cmpPreTelII");

                    b.Property<string>("CmpRegistrationNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cmpRegistrationNumber");

                    b.Property<string>("CmpSpecialPoint")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cmpSpecialPoint");

                    b.Property<string>("CmpSpecialWordForCi")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("cmpSpecialWordForCI");

                    b.Property<string>("CmpTel")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("cmpTel");

                    b.Property<string>("CmpTelDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cmpTelDesc");

                    b.Property<string>("CmpTelIi")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("cmpTelII");

                    b.Property<string>("CmpTelIidesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cmpTelIIDesc");

                    b.Property<string>("CmpTelUpTo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("cmpTelUpTo");

                    b.Property<string>("CmpTelUpToIi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("cmpTelUpToII");

                    b.Property<string>("CmpUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpUserName");

                    b.Property<string>("CmpWebSite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpWebSite");

                    b.Property<string>("CmpZipCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cmpZipCode");

                    b.Property<DateTime?>("CnvsDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("cnvsDateTime");

                    b.Property<string>("CnvsDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("cnvsDesc");

                    b.Property<DateTime?>("CnvsFirstRegisterDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("cnvsFirstRegisterDateTime");

                    b.Property<string>("CnvsReferDesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cnvsReferDesc");

                    b.Property<string>("CnvsRemindDate")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cnvsRemindDate");

                    b.Property<string>("CnvsRemindDateForAllarm")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cnvsRemindDateForAllarm");

                    b.Property<DateTime?>("CnvsRemindDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("cnvsRemindDateTime");

                    b.Property<DateTime?>("CnvsRemindDateTimeForAllarm")
                        .HasColumnType("datetime")
                        .HasColumnName("cnvsRemindDateTimeForAllarm");

                    b.Property<string>("CnvsRemindTime")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("cnvsRemindTime");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("FindedcmpId")
                        .HasColumnType("int");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime?>("ImportDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertedcmpId")
                        .HasColumnType("int");

                    b.Property<int?>("InsertedcnvsId")
                        .HasColumnType("int");

                    b.Property<int?>("InsertedprjId")
                        .HasColumnType("int");

                    b.Property<int?>("InsertedprsId")
                        .HasColumnType("int");

                    b.Property<int?>("IsDuplicate")
                        .HasColumnType("int");

                    b.Property<string>("PrjDesc")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("prjDesc");

                    b.Property<string>("PrjPostFix")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("prjPostFix");

                    b.Property<string>("PrjRemindDate")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("prjRemindDate");

                    b.Property<DateTime?>("PrjRemindDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("prjRemindDateTime");

                    b.Property<string>("PrjTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prjTitle");

                    b.Property<string>("PrsAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("prsAddress");

                    b.Property<string>("PrsAddressDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prsAddressDesc");

                    b.Property<string>("PrsBirthDate")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("prsBirthDate");

                    b.Property<DateTime?>("PrsBirthDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("prsBirthDateTime");

                    b.Property<string>("PrsDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("prsDescription");

                    b.Property<string>("PrsEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsEmail");

                    b.Property<string>("PrsEmailIi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsEmailII");

                    b.Property<string>("PrsFax")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("prsFax");

                    b.Property<string>("PrsFaxDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFaxDesc");

                    b.Property<string>("PrsFname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsFName");

                    b.Property<DateTime?>("PrsImportDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("prsImportDateTime");

                    b.Property<string>("PrsLname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prsLName");

                    b.Property<string>("PrsMarriageDate")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("prsMarriageDate");

                    b.Property<DateTime?>("PrsMarriageDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("prsMarriageDateTime");

                    b.Property<string>("PrsMobile")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("prsMobile");

                    b.Property<string>("PrsNationalCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("prsNationalCode");

                    b.Property<string>("PrsPostBox")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prsPostBox");

                    b.Property<string>("PrsPreTel")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("prsPreTel");

                    b.Property<string>("PrsTel")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("prsTel");

                    b.Property<string>("PrsTelDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsTelDesc");

                    b.Property<string>("PrsTelIi")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("prsTelII");

                    b.Property<string>("PrsTelUpTo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("prsTelUpTo");

                    b.Property<int?>("PrsTitleId")
                        .HasColumnType("int")
                        .HasColumnName("prsTitleId");

                    b.Property<string>("PrsWebSite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prsWebSite");

                    b.Property<string>("PrsZipCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prsZipCode");

                    b.Property<int?>("RelationId")
                        .HasColumnType("int");

                    b.Property<bool?>("Selector")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CrmImportFromExcel");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmImportFromExcelFields", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("FieldCaption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FieldType")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("FieldWidth")
                        .HasColumnType("int");

                    b.Property<int?>("GroupNum")
                        .HasColumnType("int");

                    b.Property<bool?>("HaveSearch")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderNum")
                        .HasColumnType("int");

                    b.Property<bool?>("Selector")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CrmImportFromExcelFields");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessage", b =>
                {
                    b.Property<int>("InternalMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InternalMessageID")
                        .UseIdentityColumn();

                    b.Property<string>("ApiId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<bool?>("MsgActiveInCycle")
                        .HasColumnType("bit")
                        .HasColumnName("msgActiveInCycle");

                    b.Property<int?>("MsgAttachRecId")
                        .HasColumnType("int")
                        .HasColumnName("msgAttachRecId");

                    b.Property<string>("MsgBody")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("msgBody");

                    b.Property<int>("MsgFromUserId")
                        .HasColumnType("int")
                        .HasColumnName("msgFromUserId");

                    b.Property<int?>("MsgIsFinalised")
                        .HasColumnType("int")
                        .HasColumnName("msgIsFinalised");

                    b.Property<int?>("MsgLastGroupId")
                        .HasColumnType("int")
                        .HasColumnName("msgLastGroupId");

                    b.Property<int?>("MsgMasterId")
                        .HasColumnType("int")
                        .HasColumnName("msgMasterId");

                    b.Property<string>("MsgSubject")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("msgSubject");

                    b.Property<int?>("MsgTypeId")
                        .HasColumnType("int")
                        .HasColumnName("msgTypeId");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("InternalMessageId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MsgFromUserId");

                    b.HasIndex("MsgTypeId");

                    b.ToTable("CrmInternalMessage");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageDefaultContext", b =>
                {
                    b.Property<int>("InternalMessageDefaultContextId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Col1")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col10")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col11")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col12")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col13")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col14")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col15")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col2")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col3")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col4")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col5")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col6")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col7")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col8")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col9")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("ContextUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("InternalMessageDefaultContextId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmInternalMessageDefaultContext");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageDefaultContextLang", b =>
                {
                    b.Property<int>("CrmInternalMessageDefaultContextLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmInternalMessageDefaultContextLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Col1")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col10")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col11")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col12")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col13")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col14")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col15")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col2")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col3")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col4")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col5")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col6")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col7")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col8")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Col9")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("InternalMessageDefaultContextId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmInternalMessageDefaultContextLangId");

                    b.HasIndex("InternalMessageDefaultContextId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmInternalMessageDefaultContext_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageDetails", b =>
                {
                    b.Property<int>("InternalMessageDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InternalMessageDetailID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("MsgdAttachFile")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("msgdAttachFile");

                    b.Property<string>("MsgdAttachRecDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("msgdAttachRecDesc");

                    b.Property<string>("MsgdAttachRecDescI")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("msgdAttachRecDescI");

                    b.Property<int?>("MsgdAttachRecId")
                        .HasColumnType("int")
                        .HasColumnName("msgdAttachRecId");

                    b.Property<int?>("MsgdAttachRecIdI")
                        .HasColumnType("int")
                        .HasColumnName("msgdAttachRecIdI");

                    b.Property<int>("MsgdFromUserId")
                        .HasColumnType("int")
                        .HasColumnName("msgdFromUserId");

                    b.Property<int?>("MsgdGroupId")
                        .HasColumnType("int")
                        .HasColumnName("msgdGroupId");

                    b.Property<int?>("MsgdInternalMessageId")
                        .HasColumnType("int")
                        .HasColumnName("msgdInternalMessageId");

                    b.Property<bool?>("MsgdIsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("msgdIsDeleted");

                    b.Property<bool?>("MsgdIsDraft")
                        .HasColumnType("bit")
                        .HasColumnName("msgdIsDraft");

                    b.Property<bool?>("MsgdIsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("msgdIsRead")
                        .HasDefaultValueSql("(0)");

                    b.Property<int?>("MsgdOldTypeId")
                        .HasColumnType("int")
                        .HasColumnName("msgdOldTypeId");

                    b.Property<int?>("MsgdPriorityId")
                        .HasColumnType("int")
                        .HasColumnName("msgdPriorityId");

                    b.Property<string>("MsgdReadDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("msgdReadDate");

                    b.Property<DateTime?>("MsgdReadDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("msgdReadDateTime");

                    b.Property<string>("MsgdReadTime")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("msgdReadTime");

                    b.Property<string>("MsgdReceiveDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("msgdReceiveDate");

                    b.Property<DateTime?>("MsgdReceiveDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("msgdReceiveDateTime");

                    b.Property<string>("MsgdReceiveTime")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("msgdReceiveTime");

                    b.Property<string>("MsgdSendDate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("msgdSendDate");

                    b.Property<DateTime>("MsgdSendDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("msgdSendDateTime");

                    b.Property<string>("MsgdSendTime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("msgdSendTime");

                    b.Property<int>("MsgdToUserId")
                        .HasColumnType("int")
                        .HasColumnName("msgdToUserId");

                    b.Property<int>("MsgdTypeId")
                        .HasColumnType("int")
                        .HasColumnName("msgdTypeId");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("InternalMessageDetailId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MsgdFromUserId");

                    b.HasIndex("MsgdGroupId");

                    b.HasIndex("MsgdInternalMessageId")
                        .HasDatabaseName("IX_CrmInternalMessageDetails_InternalMessageId");

                    b.HasIndex("MsgdToUserId");

                    b.HasIndex("MsgdTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmInternalMessageDetails");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageGroup", b =>
                {
                    b.Property<int>("InternalMessageGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InternalMessageGroupID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("InternalMessageGroup")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("InternalMessageGroupOrder")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("InternalMessageGroupId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmInternalMessageGroup");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageGroupLang", b =>
                {
                    b.Property<int>("CrmInternalMessageGroupLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmInternalMessageGroupLangID")
                        .UseIdentityColumn();

                    b.Property<string>("InternalMessageGroup")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("InternalMessageGroupId")
                        .HasColumnType("int")
                        .HasColumnName("InternalMessageGroupID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmInternalMessageGroupLangId");

                    b.HasIndex("InternalMessageGroupId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmInternalMessageGroup_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageLang", b =>
                {
                    b.Property<int>("CrmInternalMessageLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmInternalMessageLangID")
                        .UseIdentityColumn();

                    b.Property<int>("InternalMessageId")
                        .HasColumnType("int")
                        .HasColumnName("InternalMessageID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("MsgBody")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("msgBody");

                    b.Property<string>("MsgSubject")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("msgSubject");

                    b.HasKey("CrmInternalMessageLangId");

                    b.HasIndex("InternalMessageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmInternalMessage_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessagePriority", b =>
                {
                    b.Property<int>("InternalMessagePriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InternalMessagePriorityID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("InternalMessagePriority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short?>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<short?>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("InternalMessagePriorityId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmInternalMessagePriority");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessagePriorityLang", b =>
                {
                    b.Property<int>("CrmInternalMessagePriorityLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmInternalMessagePriorityLangID")
                        .UseIdentityColumn();

                    b.Property<string>("InternalMessagePriority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("InternalMessagePriorityId")
                        .HasColumnType("int")
                        .HasColumnName("InternalMessagePriorityID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmInternalMessagePriorityLangId");

                    b.HasIndex("InternalMessagePriorityId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmInternalMessagePriority_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageSelectReceiver", b =>
                {
                    b.Property<int>("CrmUserId")
                        .HasColumnType("int")
                        .HasColumnName("crmUserId");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short?>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool?>("Selector")
                        .HasColumnType("bit");

                    b.Property<string>("Val")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short?>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CrmUserId", "UserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmInternalMessageSelectReceiver");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageTreeType", b =>
                {
                    b.Property<int>("InternalMessageTreeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InternalMessageTreeTypeID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("MessageTreeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("InternalMessageTreeTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmInternalMessageTreeType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageTreeTypeLang", b =>
                {
                    b.Property<int>("CrmInternalMessageTreeTypeLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmInternalMessageTreeTypeLangID")
                        .UseIdentityColumn();

                    b.Property<int>("InternalMessageTreeTypeId")
                        .HasColumnType("int")
                        .HasColumnName("InternalMessageTreeTypeID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("MessageTreeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CrmInternalMessageTreeTypeLangId");

                    b.HasIndex("InternalMessageTreeTypeId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmInternalMessageTreeType_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageType", b =>
                {
                    b.Property<int>("InternalMessageTypeId")
                        .HasColumnType("int")
                        .HasColumnName("InternalMessageTypeID");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short?>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<short?>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("InternalMessageTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmInternalMessageType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageTypeLang", b =>
                {
                    b.Property<int>("CrmInternalMessageTypeLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmInternalMessageTypeLangID")
                        .UseIdentityColumn();

                    b.Property<int>("InternalMessageTypeId")
                        .HasColumnType("int")
                        .HasColumnName("InternalMessageTypeID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CrmInternalMessageTypeLangId");

                    b.HasIndex("InternalMessageTypeId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmInternalMessageType_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTank", b =>
                {
                    b.Property<int>("KnowledgeTankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("KnlgGroupId")
                        .HasColumnType("int")
                        .HasColumnName("knlgGroupId");

                    b.Property<string>("KnlgKnowledge")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("knlgKnowledge");

                    b.Property<int?>("KnlgPriorityId")
                        .HasColumnType("int")
                        .HasColumnName("knlgPriorityId");

                    b.Property<string>("KnlgSigns")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("knlgSigns");

                    b.Property<string>("KnlgTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("knlgTitle");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("KnowledgeTankId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("KnlgGroupId");

                    b.HasIndex("KnlgPriorityId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmKnowledgeTank");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTankGroup", b =>
                {
                    b.Property<int>("KnowledgeTankGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("KnowledgeTankGroupDesc")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("KnowledgeTankGroupOrderView")
                        .HasColumnType("int");

                    b.Property<string>("KnowledgeTankGroupTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("KnowledgeTankGroupId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmKnowledgeTankGroup");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTankGroupLang", b =>
                {
                    b.Property<int>("CrmKnowledgeTankGroupLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmKnowledgeTankGroupLangID")
                        .UseIdentityColumn();

                    b.Property<string>("KnowledgeTankGroupDesc")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("KnowledgeTankGroupId")
                        .HasColumnType("int");

                    b.Property<string>("KnowledgeTankGroupTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmKnowledgeTankGroupLangId");

                    b.HasIndex("KnowledgeTankGroupId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmKnowledgeTankGroup_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTankGroupPermission", b =>
                {
                    b.Property<int>("KnowledgeTankGroupPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("KnowledgeTankGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserRollId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("KnowledgeTankGroupPermissionId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("KnowledgeTankGroupId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRollId");

                    b.ToTable("CrmKnowledgeTankGroupPermission");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTankLang", b =>
                {
                    b.Property<int>("CrmKnowledgeTankLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmKnowledgeTankLangID")
                        .UseIdentityColumn();

                    b.Property<string>("KnlgKnowledge")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("knlgKnowledge");

                    b.Property<string>("KnlgSigns")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("knlgSigns");

                    b.Property<string>("KnlgTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("knlgTitle");

                    b.Property<int>("KnowledgeTankId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmKnowledgeTankLangId");

                    b.HasIndex("KnowledgeTankId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmKnowledgeTank_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTankPriority", b =>
                {
                    b.Property<int>("KnowledgeTankPriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("KnowledgeTankPriorityDesc")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("KnowledgeTankPriorityOrderView")
                        .HasColumnType("int");

                    b.Property<string>("KnowledgeTankPriorityTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("KnowledgeTankPriorityId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmKnowledgeTankPriority");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTankPriorityLang", b =>
                {
                    b.Property<int>("CrmKnowledgeTankPriorityLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmKnowledgeTankPriorityLangID")
                        .UseIdentityColumn();

                    b.Property<string>("KnowledgeTankPriorityDesc")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("KnowledgeTankPriorityId")
                        .HasColumnType("int");

                    b.Property<string>("KnowledgeTankPriorityTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmKnowledgeTankPriorityLangId");

                    b.HasIndex("KnowledgeTankPriorityId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmKnowledgeTankPriority_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLeave", b =>
                {
                    b.Property<int>("LeaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("DayCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("FromTime")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("HourCount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("KindId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int?>("LeaveStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("Place")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("ReplaceUserId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestUserId")
                        .HasColumnType("int");

                    b.Property<int?>("StayTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ToDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("ToTime")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("VerifierUserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("LeaveId")
                        .HasName("PK_CrmUserLeave");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmLeave");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLeaveKinds", b =>
                {
                    b.Property<int>("LeaveKindId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LeaveKindID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LeaveKind")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("LeaveKindId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmLeaveKinds");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLeaveStatus", b =>
                {
                    b.Property<int>("LeaveStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LeaveStatusID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LeaveStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LeaveStatusId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmLeaveStatus");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLeaveStayType", b =>
                {
                    b.Property<int>("LeaveStayTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LeaveStayTypeID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LeaveStayType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("LeaveStayTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmLeaveStayType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLeaveType", b =>
                {
                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int")
                        .HasColumnName("LeaveTypeID");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LeaveType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LeaveTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmLeaveType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLeaveVehicleType", b =>
                {
                    b.Property<int>("LeavdVehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LeavdVehicleTypeID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LeaveVehicleType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("LeavdVehicleTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmLeaveVehicleType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccNoAvSetting", b =>
                {
                    b.Property<int>("LinkAccNoAvSettingId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("ObjectType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PartDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("PartField")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PartLabelTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PartTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PartValue")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("LinkAccNoAvSettingId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmLinkAccNoAvSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccNoAvSettingDetails", b =>
                {
                    b.Property<int>("LinkAccNoAvSettingDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("LinkAccNoAvSettingId")
                        .HasColumnType("int");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("int");

                    b.Property<string>("PartField")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PartValue")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("LinkAccNoAvSettingDetailId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LinkAccNoAvSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmLinkAccNoAvSettingDetails");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccNoAvSettingDetailsLang", b =>
                {
                    b.Property<int>("CrmLinkAccNoAvSettingDetailLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmLinkAccNoAvSettingDetailLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("LinkAccNoAvSettingDetailId")
                        .HasColumnType("int");

                    b.HasKey("CrmLinkAccNoAvSettingDetailLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LinkAccNoAvSettingDetailId");

                    b.ToTable("CrmLinkAccNoAvSettingDetails_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccNoAvSettingLang", b =>
                {
                    b.Property<int>("CrmLinkAccNoAvSettingLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmLinkAccNoAvSettingLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("LinkAccNoAvSettingId")
                        .HasColumnType("int");

                    b.Property<string>("PartDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("PartLabelTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CrmLinkAccNoAvSettingLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LinkAccNoAvSettingId");

                    b.ToTable("CrmLinkAccNoAvSetting_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccSetting", b =>
                {
                    b.Property<int>("LinkAccSettingId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("ObjectType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PartDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("PartField")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PartLabelTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PartTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PartValue")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("LinkAccSettingId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmLinkAccSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccSettingDetails", b =>
                {
                    b.Property<int>("LinkAccSettingDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("LinkAccSettingId")
                        .HasColumnType("int");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("int");

                    b.Property<string>("PartField")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PartValue")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("LinkAccSettingDetailId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LinkAccSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmLinkAccSettingDetails");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccSettingDetailsLang", b =>
                {
                    b.Property<int>("CrmLinkAccSettingDetailLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmLinkAccSettingDetailLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("LinkAccSettingDetailId")
                        .HasColumnType("int");

                    b.HasKey("CrmLinkAccSettingDetailLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LinkAccSettingDetailId");

                    b.ToTable("CrmLinkAccSettingDetails_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccSettingLang", b =>
                {
                    b.Property<int>("CrmLinkAccSettingLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmLinkAccSettingLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("LinkAccSettingId")
                        .HasColumnType("int");

                    b.Property<string>("PartDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("PartLabelTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CrmLinkAccSettingLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LinkAccSettingId");

                    b.ToTable("CrmLinkAccSetting_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccSystems", b =>
                {
                    b.Property<int>("LinkAccSystemId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("SystemTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("LinkAccSystemId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmLinkAccSystems");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccTarazSetting", b =>
                {
                    b.Property<int>("LinkAccTarazSettingId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("ObjectType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PartDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("PartField")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PartLabelTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PartTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PartValue")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("LinkAccTarazSettingId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmLinkAccTarazSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccTarazSettingDetails", b =>
                {
                    b.Property<int>("LinkAccTarazSettingDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("LinkAccTarazSettingId")
                        .HasColumnType("int");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("int");

                    b.Property<string>("PartField")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PartValue")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("LinkAccTarazSettingDetailId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LinkAccTarazSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmLinkAccTarazSettingDetails");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccTarazSettingDetailsLang", b =>
                {
                    b.Property<int>("CrmLinkAccTarazSettingDetailLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmLinkAccTarazSettingDetailLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("LinkAccTarazSettingDetailId")
                        .HasColumnType("int");

                    b.HasKey("CrmLinkAccTarazSettingDetailLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LinkAccTarazSettingDetailId");

                    b.ToTable("CrmLinkAccTarazSettingDetails_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccTarazSettingLang", b =>
                {
                    b.Property<int>("CrmLinkAccTarazSettingLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmLinkAccTarazSettingLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("LinkAccTarazSettingId")
                        .HasColumnType("int");

                    b.Property<string>("PartDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("PartLabelTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CrmLinkAccTarazSettingLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LinkAccTarazSettingId");

                    b.ToTable("CrmLinkAccTarazSetting_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkedCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("LinkedCompanyId")
                        .HasColumnType("int");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LinkedCompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmLinkedCompany");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkedType", b =>
                {
                    b.Property<int>("LinkedTypeId")
                        .HasColumnType("int")
                        .HasColumnName("LinkedTypeID");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LinkTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("TypeOrder")
                        .HasColumnType("smallint");

                    b.HasKey("LinkedTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmLinkedType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkedTypeLang", b =>
                {
                    b.Property<int>("CrmLinkedTypeLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmLinkedTypeLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LinkTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LinkedTypeId")
                        .HasColumnType("int")
                        .HasColumnName("LinkedTypeID");

                    b.HasKey("CrmLinkedTypeLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LinkedTypeId");

                    b.ToTable("CrmLinkedType_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkedUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("LinkedTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LinkedUserId")
                        .HasColumnType("int");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LinkedUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("LinkedTypeId", "CrmUserId", "LinkedUserId")
                        .IsUnique()
                        .HasDatabaseName("IX_CrmLinkedUsers");

                    b.ToTable("CrmLinkedUsers");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmOperationsType", b =>
                {
                    b.Property<int>("OperationsTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OperationsTypeID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("OperationsTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmOperationsType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmOperationsTypeLang", b =>
                {
                    b.Property<int>("CrmOperationsTypeLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmOperationsTypeLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("OperationsTypeId")
                        .HasColumnType("int")
                        .HasColumnName("OperationsTypeID");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CrmOperationsTypeLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OperationsTypeId");

                    b.ToTable("CrmOperationsType_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonDepartments", b =>
                {
                    b.Property<int>("PersonDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("PersonDepartment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("PersonDepartmentId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmPersonDepartments");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonDepartmentsLang", b =>
                {
                    b.Property<int>("CrmPersonDepartmentsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmPersonDepartmentsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PersonDepartment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PersonDepartmentId")
                        .HasColumnType("int");

                    b.HasKey("CrmPersonDepartmentsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PersonDepartmentId");

                    b.ToTable("CrmPersonDepartments_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonGroups", b =>
                {
                    b.Property<int>("PersonGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonGroupID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("PersonGroup")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("PersonGroupId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmPersonGroups");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonGroupsLang", b =>
                {
                    b.Property<int>("CrmPersonGroupsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmPersonGroupsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PersonGroup")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PersonGroupId")
                        .HasColumnType("int")
                        .HasColumnName("PersonGroupID");

                    b.HasKey("CrmPersonGroupsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PersonGroupId");

                    b.ToTable("CrmPersonGroups_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonJobs", b =>
                {
                    b.Property<int>("PersonJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonJobID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Jobs")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("PersonJobId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmPersonJobs");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonJobsLang", b =>
                {
                    b.Property<int>("CrmPersonJobsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmPersonJobsLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Jobs")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("PersonJobId")
                        .HasColumnType("int")
                        .HasColumnName("PersonJobID");

                    b.HasKey("CrmPersonJobsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PersonJobId");

                    b.ToTable("CrmPersonJobs_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonPicture", b =>
                {
                    b.Property<int>("PersonPictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonPictureID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CompanyPersonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("PersonPicture")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<string>("PictureDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("PersonPictureId");

                    b.HasIndex("CompanyPersonId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmPersonPicture");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonTitle", b =>
                {
                    b.Property<int>("PersonTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonTitleID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("PersonTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("PersonTitleId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmPersonTitle");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonTitleLang", b =>
                {
                    b.Property<int>("CrmPersonTitleLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmPersonTitleLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PersonTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PersonTitleId")
                        .HasColumnType("int")
                        .HasColumnName("PersonTitleID");

                    b.HasKey("CrmPersonTitleLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PersonTitleId");

                    b.ToTable("CrmPersonTitle_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonType", b =>
                {
                    b.Property<int>("PersonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonTypeID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("PersonTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmPersonType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonTypeLang", b =>
                {
                    b.Property<int>("CrmPersonTypeLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmPersonTypeLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PersonTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PersonTypeID");

                    b.HasKey("CrmPersonTypeLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PersonTypeId");

                    b.ToTable("CrmPersonType_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectDefualtValue", b =>
                {
                    b.Property<int>("ProjectDefualtValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DefualtValue")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("FieldTitleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ProjectDefualtValueId");

                    b.HasIndex("FieldTitleId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmProjectDefualtValue");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectDefualtValueLang", b =>
                {
                    b.Property<int>("ProjectDefualtValueLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectDefualtValueLangID")
                        .UseIdentityColumn();

                    b.Property<string>("DefualtValue")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("ProjectDefualtValueId")
                        .HasColumnType("int");

                    b.HasKey("ProjectDefualtValueLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectDefualtValueId");

                    b.ToTable("CrmProjectDefualtValue_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectFieldTitle", b =>
                {
                    b.Property<int>("ProjectFieldTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FieldTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsDefualtField")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("SortCode")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ValueType")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ProjectFieldTitleId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmProjectFieldTitle");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectFieldTitleLang", b =>
                {
                    b.Property<int>("CrmProjectFieldTitleLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmProjectFieldTitleLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FieldTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("ProjectFieldTitleId")
                        .HasColumnType("int");

                    b.HasKey("CrmProjectFieldTitleLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectFieldTitleId");

                    b.ToTable("CrmProjectFieldTitle_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectFieldValueType", b =>
                {
                    b.Property<int>("ProjectFieldValueTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("ValueType")
                        .HasColumnType("int");

                    b.Property<string>("ValueTypeTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProjectFieldValueTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmProjectFieldValueType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGrade", b =>
                {
                    b.Property<int>("ProjectGradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectGradeID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("ProjectGrade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ProjectGradeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmProjectGrade");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGradeLang", b =>
                {
                    b.Property<int>("CrmProjectGradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmProjectGradeID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("ProjectGrade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProjectGradeId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectGradeID");

                    b.HasKey("CrmProjectGradeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectGradeId");

                    b.ToTable("CrmProjectGrade_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroups", b =>
                {
                    b.Property<int>("ProjectGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectGroupID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("ProjectGroup")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ProjectGroupId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmProjectGroups");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroupsLang", b =>
                {
                    b.Property<int>("ProjectGroupsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectGroupsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("ProjectGroup")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProjectGroupId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectGroupID");

                    b.HasKey("ProjectGroupsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectGroupId");

                    b.ToTable("CrmProjectGroups_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroupsMulti", b =>
                {
                    b.Property<int>("ProjectGroupsMultiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsDefualtField")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("ProjectGroupsMultiDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProjectGroupsMultiName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("SortCode")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ProjectGroupsMultiId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmProjectGroupsMulti");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroupsMultiI", b =>
                {
                    b.Property<int>("ProjectGroupsMultiIid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectGroupsMultiIId")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsDefualtField")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("ProjectGroupsMultiIdesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ProjectGroupsMultiIDesc");

                    b.Property<string>("ProjectGroupsMultiIname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProjectGroupsMultiIName");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("SortCode")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ProjectGroupsMultiIid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmProjectGroupsMultiI");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroupsMultiILang", b =>
                {
                    b.Property<int>("ProjectGroupsMultiIlangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectGroupsMultiILangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("ProjectGroupsMultiIdesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ProjectGroupsMultiIDesc");

                    b.Property<int>("ProjectGroupsMultiIid")
                        .HasColumnType("int")
                        .HasColumnName("ProjectGroupsMultiIId");

                    b.Property<string>("ProjectGroupsMultiIname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProjectGroupsMultiIName");

                    b.HasKey("ProjectGroupsMultiIlangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectGroupsMultiIid");

                    b.ToTable("CrmProjectGroupsMultiI_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroupsMultiLang", b =>
                {
                    b.Property<int>("ProjectGroupsMultiLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectGroupsMultiLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("ProjectGroupsMultiDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProjectGroupsMultiId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectGroupsMultiName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProjectGroupsMultiLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectGroupsMultiId");

                    b.ToTable("CrmProjectGroupsMulti_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectInformations", b =>
                {
                    b.Property<int>("ProjectInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("FieldTitleId")
                        .HasColumnType("int");

                    b.Property<string>("FieldValue")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ProjectInformationId");

                    b.HasIndex("FieldTitleId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.HasIndex("ProjectId", "FieldTitleId")
                        .IsUnique()
                        .HasDatabaseName("IX_CrmProjectInformations");

                    b.ToTable("CrmProjectInformations");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectInformationsLang", b =>
                {
                    b.Property<int>("ProjectInformationLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectInformationLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FieldValue")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("ProjectInformationId")
                        .HasColumnType("int");

                    b.HasKey("ProjectInformationLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectInformationId");

                    b.ToTable("CrmProjectInformations_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectMultiGroups", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<int>("ProjectGroupsMultiId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ProjectId", "ProjectGroupsMultiId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectGroupsMultiId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmProjectMultiGroups");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectMultiIgroups", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<int>("ProjectGroupsMultiIid")
                        .HasColumnType("int")
                        .HasColumnName("ProjectGroupsMultiIId");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ProjectId", "ProjectGroupsMultiIid");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectGroupsMultiIid");

                    b.HasIndex("UserId");

                    b.ToTable("CrmProjectMultiIGroups");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectPriority", b =>
                {
                    b.Property<int>("ProjectPriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectPriorityID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PriorityDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ProjectPriorityId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmProjectPriority");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectPriorityLang", b =>
                {
                    b.Property<int>("CrmProjectPriorityLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmProjectPriorityLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PriorityDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProjectPriorityId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectPriorityID");

                    b.HasKey("CrmProjectPriorityLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectPriorityId");

                    b.ToTable("CrmProjectPriority_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectTitles", b =>
                {
                    b.Property<int>("ProjectTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectTitleID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("ProjectTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProjectTitleDesc")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("ProjectTitleGradeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectTitleGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectTitlePriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectTitleStatusGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ProjectTitleId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectTitleGradeId");

                    b.HasIndex("ProjectTitleGroupId");

                    b.HasIndex("ProjectTitlePriorityId");

                    b.HasIndex("ProjectTitleStatusGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmProjectTitles");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectTitlesLang", b =>
                {
                    b.Property<int>("CrmProjectTitlesLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmProjectTitlesLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("ProjectTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProjectTitleDesc")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("ProjectTitleId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectTitleID");

                    b.HasKey("CrmProjectTitlesLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectTitleId");

                    b.ToTable("CrmProjectTitles_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime?>("FirstRegisterDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("PrjCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("prjCompanyId");

                    b.Property<string>("PrjDesc")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("prjDesc");

                    b.Property<string>("PrjFinishedDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("prjFinishedDate");

                    b.Property<DateTime?>("PrjFinishedDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("prjFinishedDateTime");

                    b.Property<string>("PrjFinishedDay")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prjFinishedDay");

                    b.Property<int?>("PrjFinishedStatusId")
                        .HasColumnType("int")
                        .HasColumnName("prjFinishedStatusId");

                    b.Property<string>("PrjFinishedTime")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("prjFinishedTime");

                    b.Property<int?>("PrjFinishedUserId")
                        .HasColumnType("int")
                        .HasColumnName("prjFinishedUserId");

                    b.Property<string>("PrjFirstRegisterDate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("prjFirstRegisterDate");

                    b.Property<DateTime?>("PrjFirstRegisterDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("prjFirstRegisterDateTime");

                    b.Property<int>("PrjFirstRegisterUserId")
                        .HasColumnType("int")
                        .HasColumnName("prjFirstRegisterUserId");

                    b.Property<bool?>("PrjFocmpCanSee")
                        .HasColumnType("bit")
                        .HasColumnName("prjFOCmpCanSee");

                    b.Property<int?>("PrjGradeId")
                        .HasColumnType("int")
                        .HasColumnName("prjGradeId");

                    b.Property<int?>("PrjGroupId")
                        .HasColumnType("int")
                        .HasColumnName("prjGroupId");

                    b.Property<bool?>("PrjHaveSms")
                        .HasColumnType("bit")
                        .HasColumnName("prjHaveSms");

                    b.Property<bool?>("PrjIsFinished")
                        .HasColumnType("bit")
                        .HasColumnName("prjIsFinished");

                    b.Property<bool?>("PrjIsTicket")
                        .HasColumnType("bit")
                        .HasColumnName("prjIsTicket");

                    b.Property<int?>("PrjOrderView")
                        .HasColumnType("int")
                        .HasColumnName("prjOrderView");

                    b.Property<string>("PrjPostFix")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("prjPostFix");

                    b.Property<int?>("PrjPriorityId")
                        .HasColumnType("int")
                        .HasColumnName("prjPriorityId");

                    b.Property<string>("PrjRemindDate")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("prjRemindDate");

                    b.Property<DateTime?>("PrjRemindDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("prjRemindDateTime");

                    b.Property<string>("PrjSmsPrsIds")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)")
                        .HasColumnName("prjSmsPrsIds");

                    b.Property<DateTime?>("PrjSmsSendDate")
                        .HasColumnType("datetime")
                        .HasColumnName("prjSmsSendDate");

                    b.Property<string>("PrjSmsSendDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("prjSmsSendDatePersian");

                    b.Property<string>("PrjSmsText")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("prjSmsText");

                    b.Property<string>("PrjStartDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("prjStartDate");

                    b.Property<DateTime?>("PrjStartDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("prjStartDateTime");

                    b.Property<string>("PrjStartDay")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("prjStartDay");

                    b.Property<string>("PrjStartTime")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("prjStartTime");

                    b.Property<int?>("PrjStarterUserId")
                        .HasColumnType("int")
                        .HasColumnName("prjStarterUserId");

                    b.Property<string>("PrjTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prjTitle");

                    b.Property<int?>("PrjUserDepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("prjUserDepartmentId");

                    b.Property<int?>("PrjcnvsStatusGroupId")
                        .HasColumnType("int")
                        .HasColumnName("prjcnvsStatusGroupId");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ProjectId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrjCompanyId")
                        .HasDatabaseName("IX_CrmProjects_CompanyId");

                    b.HasIndex("PrjFinishedStatusId");

                    b.HasIndex("PrjFinishedUserId");

                    b.HasIndex("PrjFirstRegisterUserId");

                    b.HasIndex("PrjGradeId");

                    b.HasIndex("PrjGroupId");

                    b.HasIndex("PrjPriorityId");

                    b.HasIndex("PrjStarterUserId");

                    b.HasIndex("PrjUserDepartmentId");

                    b.HasIndex("PrjcnvsStatusGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmProjects");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectsForbiddenForUser", b =>
                {
                    b.Property<int>("ProjectsForbiddenForUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectsForbiddenForUserID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("ForbiddenProjectTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ProjectsForbiddenForUserId");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmProjectsForbiddenForUser");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectsForbiddenForUserLang", b =>
                {
                    b.Property<int>("CrmProjectsForbiddenForUserLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmProjectsForbiddenForUserLangID")
                        .UseIdentityColumn();

                    b.Property<string>("ForbiddenProjectTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("ProjectsForbiddenForUserId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectsForbiddenForUserID");

                    b.HasKey("CrmProjectsForbiddenForUserLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectsForbiddenForUserId");

                    b.ToTable("CrmProjectsForbiddenForUser_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectsLang", b =>
                {
                    b.Property<int>("CrmProjectsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmProjectsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PrjDesc")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("prjDesc");

                    b.Property<string>("PrjPostFix")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("prjPostFix");

                    b.Property<string>("PrjTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prjTitle");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.HasKey("CrmProjectsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectId");

                    b.ToTable("CrmProjects_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectsTmp", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime?>("FirstRegisterDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("PrjCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("prjCompanyId");

                    b.Property<string>("PrjDesc")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("prjDesc");

                    b.Property<string>("PrjFinishedDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("prjFinishedDate");

                    b.Property<DateTime?>("PrjFinishedDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("prjFinishedDateTime");

                    b.Property<string>("PrjFinishedDay")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prjFinishedDay");

                    b.Property<int?>("PrjFinishedStatusId")
                        .HasColumnType("int")
                        .HasColumnName("prjFinishedStatusId");

                    b.Property<string>("PrjFinishedTime")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("prjFinishedTime");

                    b.Property<int?>("PrjFinishedUserId")
                        .HasColumnType("int")
                        .HasColumnName("prjFinishedUserId");

                    b.Property<string>("PrjFirstRegisterDate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("prjFirstRegisterDate");

                    b.Property<DateTime?>("PrjFirstRegisterDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("prjFirstRegisterDateTime");

                    b.Property<int>("PrjFirstRegisterUserId")
                        .HasColumnType("int")
                        .HasColumnName("prjFirstRegisterUserId");

                    b.Property<bool?>("PrjFocmpCanSee")
                        .HasColumnType("bit")
                        .HasColumnName("prjFOCmpCanSee");

                    b.Property<int?>("PrjGradeId")
                        .HasColumnType("int")
                        .HasColumnName("prjGradeId");

                    b.Property<int?>("PrjGroupId")
                        .HasColumnType("int")
                        .HasColumnName("prjGroupId");

                    b.Property<bool?>("PrjInsertForbidden")
                        .HasColumnType("bit")
                        .HasColumnName("prjInsertForbidden");

                    b.Property<bool?>("PrjIsFinished")
                        .HasColumnType("bit")
                        .HasColumnName("prjIsFinished");

                    b.Property<bool?>("PrjIsTicket")
                        .HasColumnType("bit")
                        .HasColumnName("prjIsTicket");

                    b.Property<int?>("PrjOrderView")
                        .HasColumnType("int")
                        .HasColumnName("prjOrderView");

                    b.Property<string>("PrjPostFix")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("prjPostFix");

                    b.Property<int?>("PrjPriorityId")
                        .HasColumnType("int")
                        .HasColumnName("prjPriorityId");

                    b.Property<string>("PrjRemindDate")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("prjRemindDate");

                    b.Property<DateTime?>("PrjRemindDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("prjRemindDateTime");

                    b.Property<string>("PrjStartDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("prjStartDate");

                    b.Property<DateTime?>("PrjStartDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("prjStartDateTime");

                    b.Property<string>("PrjStartDay")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("prjStartDay");

                    b.Property<string>("PrjStartTime")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("prjStartTime");

                    b.Property<int?>("PrjStarterUserId")
                        .HasColumnType("int")
                        .HasColumnName("prjStarterUserId");

                    b.Property<string>("PrjTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prjTitle");

                    b.Property<int?>("PrjUserDepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("prjUserDepartmentId");

                    b.Property<int?>("PrjcnvsStatusGroupId")
                        .HasColumnType("int")
                        .HasColumnName("prjcnvsStatusGroupId");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ProjectId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrjCompanyId");

                    b.HasIndex("PrjFinishedStatusId");

                    b.HasIndex("PrjFinishedUserId");

                    b.HasIndex("PrjFirstRegisterUserId");

                    b.HasIndex("PrjGradeId");

                    b.HasIndex("PrjGroupId");

                    b.HasIndex("PrjPriorityId");

                    b.HasIndex("PrjStarterUserId");

                    b.HasIndex("PrjUserDepartmentId");

                    b.HasIndex("PrjcnvsStatusGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmProjectsTmp");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectsTmpLang", b =>
                {
                    b.Property<int>("CrmProjectsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmProjectsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PrjDesc")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("prjDesc");

                    b.Property<string>("PrjPostFix")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("prjPostFix");

                    b.Property<string>("PrjTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prjTitle");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.HasKey("CrmProjectsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectId");

                    b.ToTable("CrmProjectsTmp_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmShowTableFieldInFo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FieldName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("TableId")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool?>("Visible")
                        .HasColumnType("bit");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmShowTableFieldInFO");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmSystemParts", b =>
                {
                    b.Property<int>("SystemPartId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("Part")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PartTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("SystemPartId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmSystemParts");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmSystemPartsLang", b =>
                {
                    b.Property<int>("CrmSystemPartLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmSystemPartLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PartTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SystemPartId")
                        .HasColumnType("int");

                    b.HasKey("CrmSystemPartLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SystemPartId");

                    b.ToTable("CrmSystemParts_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegBotChatMessage", b =>
                {
                    b.Property<int>("TelegBotChatMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<long?>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("DownloadFilePath")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("FileExensions")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("InComing")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Latitude")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Logitude")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("MessageLanguageCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MessageTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadDateTime")
                        .HasColumnType("datetime");

                    b.Property<long?>("ReplyToMessageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SendDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("SendStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SentDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("TextCaption")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("TelegBotChatMessageId");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MessageTypeId");

                    b.ToTable("CrmTelegBotChatMessage");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegBotContacts", b =>
                {
                    b.Property<int>("TelegBotContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<long?>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyPersonId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LastName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<short?>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("image");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Title")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<short?>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("TelegBotContactId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyPersonId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmTelegBotContacts");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegBotMessageType", b =>
                {
                    b.Property<int>("TelegBotMessageTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("TelegBotMessageTypeId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmTelegBotMessageType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegBotSetting", b =>
                {
                    b.Property<int>("TelegBotSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("About")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Caption")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageCollation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short?>("Month1")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("image");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WelcomeMessage")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<short?>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("TelegBotSettingId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmTelegBotSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegChatMessage", b =>
                {
                    b.Property<int>("TelegChatMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<long?>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("DownloadFilePath")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("FileExensions")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("InComing")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Latitude")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Logitude")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("MessageLanguageCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MessageTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadDateTime")
                        .HasColumnType("datetime");

                    b.Property<long?>("ReplyToMessageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SendDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("SendStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SentDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("SettingId")
                        .HasColumnType("int");

                    b.Property<string>("TextCaption")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("TelegChatMessageId");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MessageTypeId");

                    b.HasIndex("SettingId");

                    b.ToTable("CrmTelegChatMessage");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegContacts", b =>
                {
                    b.Property<int>("TelegContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<long?>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyPersonId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<DateTime?>("LastMessageDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<short?>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("image");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("SettingId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UnReadMessageCount")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<short?>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("TelegContactId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyPersonId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SettingId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmTelegContacts");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegMessageType", b =>
                {
                    b.Property<int>("TelegMessageTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("TelegMessageTypeId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmTelegMessageType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegSetting", b =>
                {
                    b.Property<int>("TelegSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppApiHash")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("AppApiId")
                        .HasColumnType("int");

                    b.Property<string>("AppTitle")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("image");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("TelegramId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("TelegSettingId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmTelegSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTempEmails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Body")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("BodyLangType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CmpName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpName");

                    b.Property<string>("CmpTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpTitle");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CompanyPersonId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EmailLength")
                        .HasColumnType("int");

                    b.Property<string>("EmailPartI")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailPartIi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EmailPartII");

                    b.Property<string>("EmailPartIii")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EmailPartIII");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PersonName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrsFname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PrsFName");

                    b.Property<string>("PrsJob")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrsLname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PrsLName");

                    b.Property<int?>("PrsRegisterUserId")
                        .HasColumnType("int")
                        .HasColumnName("prsRegisterUserId");

                    b.Property<string>("PrsTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("Selector")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrsRegisterUserId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmTempEmails");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTimeAttendance", b =>
                {
                    b.Property<int>("TimeAttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime>("TmDate")
                        .HasColumnType("datetime")
                        .HasColumnName("tmDate");

                    b.Property<string>("TmDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("tmDatePersian");

                    b.Property<int>("TmDay")
                        .HasColumnType("int")
                        .HasColumnName("tmDay");

                    b.Property<int>("TmDayOfWeek")
                        .HasColumnType("int")
                        .HasColumnName("tmDayOfWeek");

                    b.Property<string>("TmDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("tmDescription");

                    b.Property<DateTime>("TmEntryBase")
                        .HasColumnType("datetime")
                        .HasColumnName("tmEntryBase");

                    b.Property<int>("TmEntryDelay")
                        .HasColumnType("int")
                        .HasColumnName("tmEntryDelay");

                    b.Property<int>("TmEntryDelayAllowMin")
                        .HasColumnType("int")
                        .HasColumnName("tmEntryDelayAllowMin");

                    b.Property<string>("TmEntryRegisterIp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tmEntryRegisterIP");

                    b.Property<DateTime>("TmEntryTime")
                        .HasColumnType("datetime")
                        .HasColumnName("tmEntryTime");

                    b.Property<DateTime?>("TmExitBase")
                        .HasColumnType("datetime")
                        .HasColumnName("tmExitBase");

                    b.Property<int?>("TmExitHurry")
                        .HasColumnType("int")
                        .HasColumnName("tmExitHurry");

                    b.Property<int?>("TmExitHurryAllowMin")
                        .HasColumnType("int")
                        .HasColumnName("tmExitHurryAllowMin");

                    b.Property<string>("TmExitRegisterIp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tmExitRegisterIP");

                    b.Property<DateTime?>("TmExitTime")
                        .HasColumnType("datetime")
                        .HasColumnName("tmExitTime");

                    b.Property<int>("TmTypeId")
                        .HasColumnType("int")
                        .HasColumnName("tmTypeId");

                    b.Property<int>("TmUserId")
                        .HasColumnType("int")
                        .HasColumnName("tmUserId");

                    b.Property<short>("TmYear1")
                        .HasColumnType("smallint")
                        .HasColumnName("tmYear1");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TimeAttendanceId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TmUserId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmTimeAttendance");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTimeAttendanceBase", b =>
                {
                    b.Property<int>("TimeAttendanceBaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("TmbDay")
                        .HasColumnType("int")
                        .HasColumnName("tmbDay");

                    b.Property<int>("TmbEntryAllowMin")
                        .HasColumnType("int")
                        .HasColumnName("tmbEntryAllowMin");

                    b.Property<string>("TmbEntryBase")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tmbEntryBase");

                    b.Property<int>("TmbExitAllowMin")
                        .HasColumnType("int")
                        .HasColumnName("tmbExitAllowMin");

                    b.Property<string>("TmbExitBase")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tmbExitBase");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TimeAttendanceBaseId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmTimeAttendanceBase");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTimeAttendanceLog", b =>
                {
                    b.Property<int>("TimeAttendanceLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime>("TmlDate")
                        .HasColumnType("datetime")
                        .HasColumnName("tmlDate");

                    b.Property<string>("TmlDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("tmlDatePersian");

                    b.Property<int>("TmlDay")
                        .HasColumnType("int")
                        .HasColumnName("tmlDay");

                    b.Property<int>("TmlDayOfWeek")
                        .HasColumnType("int")
                        .HasColumnName("tmlDayOfWeek");

                    b.Property<string>("TmlDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("tmlDescription");

                    b.Property<string>("TmlEntryRegisterIp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tmlEntryRegisterIP");

                    b.Property<DateTime>("TmlEntryTime")
                        .HasColumnType("datetime")
                        .HasColumnName("tmlEntryTime");

                    b.Property<string>("TmlExitRegisterIp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tmlExitRegisterIP");

                    b.Property<DateTime?>("TmlExitTime")
                        .HasColumnType("datetime")
                        .HasColumnName("tmlExitTime");

                    b.Property<int>("TmlTypeId")
                        .HasColumnType("int")
                        .HasColumnName("tmlTypeId");

                    b.Property<int>("TmlUserId")
                        .HasColumnType("int")
                        .HasColumnName("tmlUserId");

                    b.Property<short>("TmlYear1")
                        .HasColumnType("smallint")
                        .HasColumnName("tmlYear1");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TimeAttendanceLogId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TmlUserId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmTimeAttendanceLog");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserNotes", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Note1")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Note2")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Note3")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("NoteId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmUserNotes");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTaskGroups", b =>
                {
                    b.Property<int>("UserTaskGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserTaskGroup")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("UserTaskGroupId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmUserTaskGroups");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTaskGroupsLang", b =>
                {
                    b.Property<int>("CrmUserTaskGroupsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmUserTaskGroupsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("UserTaskGroup")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserTaskGroupId")
                        .HasColumnType("int");

                    b.HasKey("CrmUserTaskGroupsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserTaskGroupId");

                    b.ToTable("CrmUserTaskGroups_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTaskPriorities", b =>
                {
                    b.Property<int>("UserTaskPriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PriorityDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("UserTaskPriorityId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmUserTaskPriorities");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTaskPrioritiesLang", b =>
                {
                    b.Property<int>("CrmUserTaskPrioritiesLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmUserTaskPrioritiesLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PriorityDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserTaskPriorityId")
                        .HasColumnType("int");

                    b.HasKey("CrmUserTaskPrioritiesLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserTaskPriorityId");

                    b.ToTable("CrmUserTaskPriorities_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTasks", b =>
                {
                    b.Property<int>("UserTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UserTaskDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserTaskDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("UserTaskDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("UserTaskDidIt")
                        .HasColumnType("bit");

                    b.Property<int?>("UserTaskGroupId")
                        .HasColumnType("int");

                    b.Property<bool?>("UserTaskIsPublic")
                        .HasColumnType("bit");

                    b.Property<int?>("UserTaskPriorityId")
                        .HasColumnType("int");

                    b.Property<string>("UserTaskRemindDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("UserTaskRemindDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UserTaskRemindTime")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int?>("UserTaskShowAllarm")
                        .HasColumnType("int");

                    b.Property<string>("UserTaskTime")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("UserTaskTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("UserTaskId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserTaskGroupId");

                    b.HasIndex("UserTaskPriorityId");

                    b.ToTable("CrmUserTasks");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTasksLang", b =>
                {
                    b.Property<int>("CrmUserTasksLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmUserTasksLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("UserTaskDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("UserTaskId")
                        .HasColumnType("int");

                    b.Property<string>("UserTaskTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CrmUserTasksLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserTaskId");

                    b.ToTable("CrmUserTasks_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmVersionUpgrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("GuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReleaseDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool?>("Upgraded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<DateTime?>("UpgradedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpgradedDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("UpgradedUserId")
                        .HasColumnType("int")
                        .HasColumnName("UpgradedUserID");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmVersionUpgrade");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmVersionUpgradeDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActionValue")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<DateTime?>("RunDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RunDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("RunUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("Succeed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmVersionUpgradeDetails");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmVersions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReleaseDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmVersions");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmWebSetting", b =>
                {
                    b.Property<int>("WebSettingId")
                        .HasColumnType("int")
                        .HasColumnName("WebSettingID");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDecoded")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("KeyFa")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("int");

                    b.Property<int?>("MinLength")
                        .HasColumnType("int");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("RregularExpression")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment(" numeric\r\n text\r\n date\r\n textarea\r\n boolean\r\n password");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("WebSettingId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmWebSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysCideviceType", b =>
                {
                    b.Property<int>("CideviceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CIDeviceTypeId");

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Cidesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("CIDesc");

                    b.Property<string>("CideviceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CIDeviceType");

                    b.Property<int>("CideviceTypeMode")
                        .HasColumnType("int")
                        .HasColumnName("CIDeviceTypeMode");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CideviceTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmsysCIDeviceType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysCipopUpSetting", b =>
                {
                    b.Property<int>("CipopUpSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CIPopUpSettingID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("PatternForCallTime")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatternForLastProject")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatternForLastcnvsRefUser")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatternForLastcnvsStatus")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatternForLastcnvscmpPerson")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatternForLineNumber")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatternForPhoneName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatternForPhoneNumber")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatternForcmpActivityType")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatternForcmpCity")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatternForcmpCiword")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("PatternForcmpCIWord");

                    b.Property<string>("PatternForcmpCompanyGroup")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatternForcmpCompanyGroupIi")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("PatternForcmpCompanyGroupII");

                    b.Property<string>("PatternForcmpCompanyGroupIii")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("PatternForcmpCompanyGroupIII");

                    b.Property<string>("PatternForcmpCompanyGroupIv")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("PatternForcmpCompanyGroupIV");

                    b.Property<string>("PatternForcmpCompanyType")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatternForcmpCountry")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatternForcmpName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatternForcmpPresentation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatternForcmpProvince")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatternForcmpPrsName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatternForcmpReferUser")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatternForcmpSubGroupName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatternFormulaPopUp")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool?>("PopUpDeActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("PopUpDeActiveForUnknownNumber")
                        .HasColumnType("bit");

                    b.Property<bool?>("PopUpJustForcmpReferUser")
                        .HasColumnType("bit");

                    b.Property<bool?>("PopUpJustForcmpReferUserAndLinked")
                        .HasColumnType("bit");

                    b.Property<bool?>("PopUpWinFormIdeActive")
                        .HasColumnType("bit")
                        .HasColumnName("PopUpWinFormIDeActive");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("SettingTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("UseClientNameForNetworking")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("CipopUpSettingId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmsysCIPopUpSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysCisetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CiserverIp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CIServerIP");

                    b.Property<string>("ComPort")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ComSetting")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dbname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DBName");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DeviceTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Spass")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SPass");

                    b.Property<string>("SrvName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StartLineNumber")
                        .HasColumnType("int");

                    b.Property<string>("Suser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SUser");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmsysCISetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysDbobjects", b =>
                {
                    b.Property<int>("DbobjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DBObjectId")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DbobjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DBObjectName");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FieldTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<bool?>("NotNull")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.HasKey("DbobjectId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmsysDBObjects");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysDbobjectsLang", b =>
                {
                    b.Property<int>("CrmsysDbobjectsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmsysDBObjectsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("DbobjectId")
                        .HasColumnType("int")
                        .HasColumnName("DBObjectId");

                    b.Property<string>("FieldTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmsysDbobjectsLangId");

                    b.HasIndex("DbobjectId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmsysDBObjects_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysDbtempInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Txt")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TXT");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmsysDBTempInfo");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysDbtempInfoType", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmsysDBTempInfoType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysFormActions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActionPersianName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("FormId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmsysFormActions");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysFormActionsLang", b =>
                {
                    b.Property<int>("CrmsysFormActionsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmsysFormActionsLangID")
                        .UseIdentityColumn();

                    b.Property<string>("ActionPersianName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmsysFormActionsLangId");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmsysFormActions_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysFormObjectProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int?>("FormId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int?>("Leftt")
                        .HasColumnType("int");

                    b.Property<short?>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("ObjectName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ObjectPersianName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ObjectType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("Topp")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<bool?>("Visible")
                        .HasColumnType("bit");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.Property<short?>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("FormId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmsysFormObjectProperties");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysFormObjectPropertiesLang", b =>
                {
                    b.Property<int>("CrmsysFormObjectPropertiesLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmsysFormObjectPropertiesLangID")
                        .UseIdentityColumn();

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("ObjectPersianName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CrmsysFormObjectPropertiesLangId");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmsysFormObjectProperties_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysForms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FormPersianName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("FormName")
                        .IsUnique()
                        .HasDatabaseName("IX_CrmsysForms");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmsysForms");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysFormsLang", b =>
                {
                    b.Property<int>("CrmsysFormsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmsysFormsLangID")
                        .UseIdentityColumn();

                    b.Property<string>("FormPersianName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("CrmsysFormsLangId");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmsysForms_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysManageAlarmChanges", b =>
                {
                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("datetime");

                    b.ToTable("CrmsysManageAlarmChanges");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysManageInternalMessageChanges", b =>
                {
                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("datetime");

                    b.ToTable("CrmsysManageInternalMessageChanges");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysRollPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int?>("FormActionId")
                        .HasColumnType("int");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("RollId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("FormActionId");

                    b.HasIndex("FormId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("RollId");

                    b.ToTable("CrmsysRollPermission");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysRolls", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<bool?>("LimitOrderDiscountActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("LimitOrderDiscountPercent")
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool?>("LimitPreOrderDiscountActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("LimitPreOrderDiscountPercent")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("RollName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmsysRolls");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysRollsLang", b =>
                {
                    b.Property<int>("CrmsysRollsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmsysRollsLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("RollName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CrmsysRollsLangId");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmsysRolls_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AppFilePath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CallerIdoldVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CallerIDOldVersion");

                    b.Property<string>("CallerIdserverIp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CallerIDServerIP");

                    b.Property<string>("CallerIdversion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CallerIDVersion");

                    b.Property<bool?>("CantSaveDupCmpEconomicCode")
                        .HasColumnType("bit");

                    b.Property<bool?>("CantSaveDupCmpNationalCode")
                        .HasColumnType("bit");

                    b.Property<bool?>("CantSaveDupFax")
                        .HasColumnType("bit");

                    b.Property<bool?>("CantSaveDupPrsEmail")
                        .HasColumnType("bit");

                    b.Property<bool?>("CantSaveDupPrsMob")
                        .HasColumnType("bit");

                    b.Property<bool?>("CantSaveDupPrsNationalCode")
                        .HasColumnType("bit");

                    b.Property<bool?>("CantSaveDupTel")
                        .HasColumnType("bit");

                    b.Property<bool?>("CantSaveDupZipCode")
                        .HasColumnType("bit");

                    b.Property<int?>("CmpQdefCountryId")
                        .HasColumnType("int")
                        .HasColumnName("cmpQDefCountryId");

                    b.Property<bool?>("CmpQdefPrintAfterSave")
                        .HasColumnType("bit")
                        .HasColumnName("cmpQDefPrintAfterSave");

                    b.Property<int?>("CmpQdefProjectGroupId")
                        .HasColumnType("int")
                        .HasColumnName("cmpQDefProjectGroupId");

                    b.Property<string>("CmpQdefProjectTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpQDefProjectTitle");

                    b.Property<int?>("CmpQdefcnvsTopicId")
                        .HasColumnType("int")
                        .HasColumnName("cmpQDefcnvsTopicId");

                    b.Property<bool?>("CmpQnotNullProjectGrade")
                        .HasColumnType("bit")
                        .HasColumnName("cmpQNotNullProjectGrade");

                    b.Property<bool?>("CmpQnotNullProjectGroup")
                        .HasColumnType("bit")
                        .HasColumnName("cmpQNotNullProjectGroup");

                    b.Property<bool?>("CmpQnotNullProjectPriority")
                        .HasColumnType("bit")
                        .HasColumnName("cmpQNotNullProjectPriority");

                    b.Property<byte[]>("CoLoGo")
                        .HasColumnType("image");

                    b.Property<string>("CoName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("DefaultLanguageId")
                        .HasColumnType("int")
                        .HasColumnName("DefaultLanguageID");

                    b.Property<bool?>("DisablefrmcmpSearchOnType")
                        .HasColumnType("bit");

                    b.Property<string>("EconomicCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("Fourl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("FOUrl");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LinkAccOldVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LinkAccSystemId")
                        .HasColumnType("int");

                    b.Property<string>("LinkAccVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("LockControl")
                        .HasColumnType("bit");

                    b.Property<string>("LockCounter")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LockNu")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("LockNU");

                    b.Property<string>("LockSerial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("Month1")
                        .HasColumnType("smallint");

                    b.Property<bool?>("MustFullPrsNationalCode")
                        .HasColumnType("bit");

                    b.Property<bool?>("MustFullcnvsRemindDate")
                        .HasColumnType("bit");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrdBarcodeFormula")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("PublicNotice")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("QuickAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecordingVoiceServerIp")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("RecordingVoiceServerIP");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SantralPreNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ServerIp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ServerIP");

                    b.Property<bool?>("ServiceAutoSmsip")
                        .HasColumnType("bit")
                        .HasColumnName("ServiceAutoSMSIP");

                    b.Property<bool?>("ServiceBuyOrdIp")
                        .HasColumnType("bit")
                        .HasColumnName("ServiceBuyOrdIP");

                    b.Property<bool?>("ServiceCiip")
                        .HasColumnType("bit")
                        .HasColumnName("ServiceCIIP");

                    b.Property<bool?>("ServiceDecimalIp")
                        .HasColumnType("bit")
                        .HasColumnName("ServiceDecimalIP");

                    b.Property<bool?>("ServiceEmailIp")
                        .HasColumnType("bit")
                        .HasColumnName("ServiceEmailIP");

                    b.Property<bool?>("ServiceFadeAc")
                        .HasColumnType("bit")
                        .HasColumnName("ServiceFADeAc");

                    b.Property<bool?>("ServiceLetterIp")
                        .HasColumnType("bit")
                        .HasColumnName("ServiceLetterIP");

                    b.Property<bool?>("ServicePrip")
                        .HasColumnType("bit")
                        .HasColumnName("ServicePRIP");

                    b.Property<bool?>("ServiceRip")
                        .HasColumnType("bit")
                        .HasColumnName("ServiceRIP");

                    b.Property<bool?>("ServiceSgip")
                        .HasColumnType("bit")
                        .HasColumnName("ServiceSGIP");

                    b.Property<bool?>("ServiceSip")
                        .HasColumnType("bit")
                        .HasColumnName("ServiceSIP");

                    b.Property<string>("SmsgsmserviceOldVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SMSGSMServiceOldVersion");

                    b.Property<string>("SmsgsmserviceVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SMSGSMServiceVersion");

                    b.Property<string>("SmsserviceOldVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SMSServiceOldVersion");

                    b.Property<string>("SmsserviceVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SMSServiceVersion");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WebSite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("Year1")
                        .HasColumnType("smallint");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LinkAccSystemId");

                    b.HasIndex("UserId");

                    b.ToTable("CrmsysSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysSettingLang", b =>
                {
                    b.Property<int>("CrmsysSettingLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CrmsysSettingLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CoName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PublicNotice")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("QuickAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CrmsysSettingLangId");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("CrmsysSetting_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmtmpManageTellNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CmpCityId")
                        .HasColumnType("int")
                        .HasColumnName("cmpCityId");

                    b.Property<string>("CmpFax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpFax");

                    b.Property<string>("CmpFaxNew")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpFaxNew");

                    b.Property<int?>("CmpId")
                        .HasColumnType("int")
                        .HasColumnName("cmpId");

                    b.Property<string>("CmpPreTel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpPreTel");

                    b.Property<string>("CmpPreTelIi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpPreTelII");

                    b.Property<string>("CmpPreTelIinew")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpPreTelIINew");

                    b.Property<string>("CmpPreTelNew")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpPreTelNew");

                    b.Property<string>("CmpTel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpTel");

                    b.Property<string>("CmpTelIi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpTelII");

                    b.Property<string>("CmpTelIinew")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpTelIINew");

                    b.Property<string>("CmpTelNew")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cmpTelNew");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int?>("Mode")
                        .HasColumnType("int")
                        .HasColumnName("mode");

                    b.Property<int?>("PrsId")
                        .HasColumnType("int")
                        .HasColumnName("prsId");

                    b.Property<bool?>("Sel")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("CRMtmpManageTellNumber");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EducationID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Education1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Education");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short?>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<short?>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("EducationId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EducationLang", b =>
                {
                    b.Property<int>("EducationLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EducationLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EducationId")
                        .HasColumnType("int")
                        .HasColumnName("EducationID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("EducationLangId");

                    b.HasIndex("EducationId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Education_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailDefaultBodyText", b =>
                {
                    b.Property<int>("EmailDefaultBodyTextId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("EmailDefaultBodyTextId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailDefaultBodyText");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailDefaultBodyTextLang", b =>
                {
                    b.Property<int>("EmailDefaultBodyTextLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmailDefaultBodyTextLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<int>("EmailDefaultBodyTextId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("EmailDefaultBodyTextLangId");

                    b.HasIndex("EmailDefaultBodyTextId");

                    b.HasIndex("LanguageId");

                    b.ToTable("EmailDefaultBodyText_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailReceive", b =>
                {
                    b.Property<int>("EmailReceiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Bcc")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cc")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyPersonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EmailDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("EmailReceiveFolderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("FolderName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FromUserEmail")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("HtmlBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("MessageId")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("Priority")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReadDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReceiveDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ToUserEmail")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ToUserEmailUserInfoId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("EmailReceiveId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyPersonId");

                    b.HasIndex("EmailReceiveFolderId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ToUserEmailUserInfoId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailReceive");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailReceiveAttachments", b =>
                {
                    b.Property<int>("EmailReceiveAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyPersonId")
                        .HasColumnType("int");

                    b.Property<string>("ContentId")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("EmailReceiveId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FileType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("SaveFilePath")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("EmailReceiveAttachmentId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyPersonId");

                    b.HasIndex("EmailReceiveId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailReceiveAttachments");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailReceiveFolders", b =>
                {
                    b.Property<int>("EmailReceiveFolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("EmailUsersInfoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("EmailReceiveFolderId");

                    b.HasIndex("EmailUsersInfoId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailReceiveFolders");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailSendAttachment", b =>
                {
                    b.Property<int>("EmailSendAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("EmailSendHeaderId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.HasKey("EmailSendAttachmentId");

                    b.HasIndex("EmailSendHeaderId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("EmailSendAttachment");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailSendDetail", b =>
                {
                    b.Property<int>("EmailSendDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("EmailCmpId")
                        .HasColumnType("int");

                    b.Property<string>("EmailCmpName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("EmailCmpPrjId")
                        .HasColumnType("int");

                    b.Property<int?>("EmailCmpPrsId")
                        .HasColumnType("int");

                    b.Property<string>("EmailCmpPrsName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EmailPrsJob")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EmailSendHeaderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("SendDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime>("SendDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("SendedDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime?>("SendedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TryCount")
                        .HasColumnType("int");

                    b.HasKey("EmailSendDetailId");

                    b.HasIndex("EmailCmpId");

                    b.HasIndex("EmailCmpPrjId");

                    b.HasIndex("EmailCmpPrsId");

                    b.HasIndex("EmailSendHeaderId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("EmailSendDetail");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailSendHeader", b =>
                {
                    b.Property<int>("EmailSendHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<int>("EmailSettingId")
                        .HasColumnType("int");

                    b.Property<int>("EmailUsersInfoId")
                        .HasColumnType("int");

                    b.Property<string>("EndDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("StartDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Subject")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmailSendHeaderId");

                    b.HasIndex("EmailSettingId");

                    b.HasIndex("EmailUsersInfoId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailSendHeader");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailSetting", b =>
                {
                    b.Property<int>("EmailSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CmpPattern")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CmpPrsJobPattern")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CmpPrsPattern")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailBulkingDailyEndTime")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EmailBulkingDailyStarTime")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("EmailBulkingDelayTime")
                        .HasColumnType("int");

                    b.Property<bool?>("EmailBulkingIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("EmailSenderEditorFilePath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EmailSp")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("EmailSP");

                    b.Property<string>("EmailSu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EmailSU");

                    b.Property<string>("EmailsAttachFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EmailsAttachShareFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EmailsAttachShareFilePathFtp")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EmailsPdfbodyFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("EmailsPDFBodyFilePath");

                    b.Property<string>("EmailsPdfbodyFilePathFtp")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("EmailsPDFBodyFilePathFtp");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmailSettingId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailUserDefaultSetting", b =>
                {
                    b.Property<int>("EmailUserDefaultSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EudBody")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("eudBody");

                    b.Property<string>("EudTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("eudTitle");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmailUserDefaultSettingId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailUserDefaultSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailUserTempTank", b =>
                {
                    b.Property<long>("EmailUserTempTankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("EmailCmpId")
                        .HasColumnType("int");

                    b.Property<string>("EmailCmpName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("EmailCmpPrjId")
                        .HasColumnType("int");

                    b.Property<int?>("EmailCmpPrsId")
                        .HasColumnType("int");

                    b.Property<string>("EmailCmpPrsName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EmailPrsJob")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FilePathIi")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("FilePathII");

                    b.Property<string>("FilePathIii")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("FilePathIII");

                    b.Property<string>("FilePathIv")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("FilePathIV");

                    b.Property<string>("FilePathV")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmailUserTempTankId");

                    b.HasIndex("EmailCmpId");

                    b.HasIndex("EmailCmpPrjId");

                    b.HasIndex("EmailCmpPrsId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailUserTempTank");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailUsersInfo", b =>
                {
                    b.Property<int>("EmailUsersInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("EuAutoDeleteReceivedEmail")
                        .HasColumnType("bit")
                        .HasColumnName("euAutoDeleteReceivedEmail");

                    b.Property<bool?>("EuIsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("euIsActive")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("EuNikeEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("euNikeEmail");

                    b.Property<string>("EuNikeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("euNikeName");

                    b.Property<string>("EuPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("euPassword");

                    b.Property<int?>("EuPop3port")
                        .HasColumnType("int")
                        .HasColumnName("euPOP3Port");

                    b.Property<string>("EuPop3server")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("euPOP3Server");

                    b.Property<bool?>("EuPop3useSsl")
                        .HasColumnType("bit")
                        .HasColumnName("euPOP3UseSsl");

                    b.Property<string>("EuSmtpserver")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("euSMTPServer");

                    b.Property<int>("EuUserId")
                        .HasColumnType("int")
                        .HasColumnName("euUserId");

                    b.Property<string>("EuUserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("euUserName");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmailUsersInfoId");

                    b.HasIndex("EuUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailUsersInfo");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Languages", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageCollation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LanguageDirection")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("LanguageId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.MobApiAndTableDetail", b =>
                {
                    b.Property<int>("ApiAndTableDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Apis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short?>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<short?>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ApiAndTableDetailId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("MobApiAndTableDetail");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.MobCompanyAppInfo", b =>
                {
                    b.Property<int>("MobCompanyAppInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MobCompanyAppInfoID")
                        .UseIdentityColumn();

                    b.Property<string>("AppName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Cmp")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("cmp");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("CompanyPersonId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyPersonID");

                    b.Property<int?>("DevTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DownloadUrl")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("DownloadURL");

                    b.Property<string>("ExtraCode")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ImeiCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LastVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("NewVersionDownloadUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NewVersionDownloadURL");

                    b.Property<string>("RegisterCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WcfUrl")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("WcfURL");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("MobCompanyAppInfoId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyPersonId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("MobCompanyAppInfo");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.MobErrorLogs", b =>
                {
                    b.Property<int>("MobErrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AndroidVersion")
                        .HasColumnType("int");

                    b.Property<string>("ApiVersion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ApplicationVersion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Cause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CompanyPersonId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyPersonID");

                    b.Property<string>("DeviceResolution")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("InternetType")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("MobErrorLogId");

                    b.ToTable("MobErrorLogs");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.MyWebsites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("Website")
                        .IsUnique()
                        .HasDatabaseName("IX_MyWebsites");

                    b.ToTable("MyWebsites");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.ParsaPooladMenus", b =>
                {
                    b.Property<int>("ParsaPooladMenusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentMenusId")
                        .HasColumnType("int");

                    b.Property<int?>("ParsaPooladMenusId1")
                        .HasColumnType("int");

                    b.HasKey("ParsaPooladMenusId");

                    b.HasIndex("ParsaPooladMenusId1");

                    b.ToTable("ParsaPooladMenus");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollItemTypes", b =>
                {
                    b.Property<int>("PayRollItemTypeId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("PayRollItemTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("PayRollItemTypes");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollItemTypesLang", b =>
                {
                    b.Property<int>("PayRollItemTypeLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PayRollItemTypeLangID")
                        .UseIdentityColumn();

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("PayRollItemTypeId")
                        .HasColumnType("int");

                    b.HasKey("PayRollItemTypeLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PayRollItemTypeId");

                    b.ToTable("PayRollItemTypes_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollItems", b =>
                {
                    b.Property<int>("PayRollItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal?>("ItemDefaultValue")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ItemFormula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemFormulaTag")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("ItemIsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("ItemJustForShow")
                        .HasColumnType("bit");

                    b.Property<int>("ItemKind")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("ItemOrderView")
                        .HasColumnType("int");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("PayRollItemId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("PayRollItems");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollItemsLang", b =>
                {
                    b.Property<int>("PayRollItemLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PayRollItemLangID")
                        .UseIdentityColumn();

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("PayRollItemId")
                        .HasColumnType("int");

                    b.HasKey("PayRollItemLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PayRollItemId");

                    b.ToTable("PayRollItems_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserCycle", b =>
                {
                    b.Property<int>("PayRollUserCycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CycleDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CycleDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("CycleDuration")
                        .HasColumnType("int");

                    b.Property<bool?>("CycleIsVerified")
                        .HasColumnType("bit");

                    b.Property<int?>("CyclePrintFormatId")
                        .HasColumnType("int");

                    b.Property<string>("CycleTitle")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("CycleVerifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CycleVerifiedDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("CycleVerifierUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("PayRollUserCycleId");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("CyclePrintFormatId");

                    b.HasIndex("CycleVerifierUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("PayRollUserCycle");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserCycleItemValues", b =>
                {
                    b.Property<int>("PayRollUserCycleItemValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("UsefulIds")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Value")
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool?>("ValueNotValid")
                        .HasColumnType("bit");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("PayRollUserCycleItemValueId");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("CycleId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("PayRollUserCycleItemValues");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserCycleLang", b =>
                {
                    b.Property<int>("PayRollUserCycleLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PayRollUserCycleLangID")
                        .UseIdentityColumn();

                    b.Property<string>("CycleTitle")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("PayRollUserCycleId")
                        .HasColumnType("int");

                    b.HasKey("PayRollUserCycleLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PayRollUserCycleId");

                    b.ToTable("PayRollUserCycle_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserDefaultItems", b =>
                {
                    b.Property<int>("PayRollUserDefaultItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserItemId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("PayRollUserDefaultItemId");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserItemId");

                    b.ToTable("PayRollUserDefaultItems");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserPaymentTypes", b =>
                {
                    b.Property<int>("PayRollUserPaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("PayRollUserPaymentTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("PayRollUserPaymentTypes");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserPaymentTypesLang", b =>
                {
                    b.Property<int>("PayRollUserPaymentTypeLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PayRollUserPaymentTypeLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("PayRollUserPaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("PayRollUserPaymentTypeLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PayRollUserPaymentTypeId");

                    b.ToTable("PayRollUserPaymentTypes_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserPayments", b =>
                {
                    b.Property<int>("PayRollUserPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("PayTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("PaymentNumber")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("UserAccountNumber")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("PayRollUserPaymentId");

                    b.HasIndex("CycleId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PayTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("PayRollUserPayments");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserPaymentsLang", b =>
                {
                    b.Property<int>("PayRollUserPaymentLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PayRollUserPaymentLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("PayRollUserPaymentId")
                        .HasColumnType("int");

                    b.HasKey("PayRollUserPaymentLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PayRollUserPaymentId");

                    b.ToTable("PayRollUserPayments_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormat", b =>
                {
                    b.Property<int>("PrintFormatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrintFormatID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileNameWeb")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("PrintFormatTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PrintFormatId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrintFormatTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("PrintFormat");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormatLang", b =>
                {
                    b.Property<int>("PrintFormatLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrintFormatLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("PrintFormatId")
                        .HasColumnType("int")
                        .HasColumnName("PrintFormatID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PrintFormatLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrintFormatId");

                    b.ToTable("PrintFormat_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormatType", b =>
                {
                    b.Property<int>("PrintFormatTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PrintFormatTypeID");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("PrintFormatType1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("PrintFormatType");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PrintFormatTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("PrintFormatType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormatTypeLang", b =>
                {
                    b.Property<int>("PrintFormatTypeLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrintFormatTypeLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PrintFormatType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PrintFormatTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PrintFormatTypeID");

                    b.HasKey("PrintFormatTypeLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrintFormatTypeId");

                    b.ToTable("PrintFormatType_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Projects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AboutCompany")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<short>("Code")
                        .HasColumnType("smallint");

                    b.Property<string>("Company")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LogoPath")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("LogoPic")
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OldVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.ProjectsLang", b =>
                {
                    b.Property<int>("ProjectsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectsLangID")
                        .UseIdentityColumn();

                    b.Property<string>("AboutCompany")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Company")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProjectsLangId");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Projects_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProvinceID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("Province1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Province");

                    b.Property<string>("ProvinceCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ProvinceId");

                    b.HasIndex("CountryId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.ProvinceLang", b =>
                {
                    b.Property<int>("ProvinceLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProvinceLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("ProvinceID");

                    b.HasKey("ProvinceLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Province_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SecLetterDefaultSettings", b =>
                {
                    b.Property<int>("LetterDefaultSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Ldannex")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LDAnnex");

                    b.Property<string>("LdcmpNickName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LDcmpNickName");

                    b.Property<string>("LdcmpPersonNickName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LDcmpPersonNickName");

                    b.Property<string>("Ldcontext")
                        .HasColumnType("ntext")
                        .HasColumnName("LDContext");

                    b.Property<string>("Ldfooter")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LDFooter");

                    b.Property<string>("Ldheader")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LDHeader");

                    b.Property<int?>("LdprintFormatId")
                        .HasColumnType("int")
                        .HasColumnName("LDPrintFormatId");

                    b.Property<int?>("LdreferUserId")
                        .HasColumnType("int")
                        .HasColumnName("LDReferUserId");

                    b.Property<string>("LdsigningI")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LDSigningI");

                    b.Property<string>("LdsigningIi")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LDSigningII");

                    b.Property<string>("LdsigningIii")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LDSigningIII");

                    b.Property<string>("LdsigningIv")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LDSigningIV");

                    b.Property<string>("Ldsubject")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LDSubject");

                    b.Property<string>("Ldtitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LDTitle");

                    b.Property<int?>("LdverifierRequestId")
                        .HasColumnType("int")
                        .HasColumnName("LDVerifierRequestId");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("LetterDefaultSettingId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LdprintFormatId");

                    b.HasIndex("LdreferUserId");

                    b.HasIndex("LdverifierRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("SecLetterDefaultSettings");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SecLetterDefaultSettingsLang", b =>
                {
                    b.Property<int>("SecLetterDefaultSettingsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SecLetterDefaultSettingsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Ldannex")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LDAnnex");

                    b.Property<string>("LdcmpNickName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LDcmpNickName");

                    b.Property<string>("LdcmpPersonNickName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LDcmpPersonNickName");

                    b.Property<string>("Ldcontext")
                        .HasColumnType("ntext")
                        .HasColumnName("LDContext");

                    b.Property<string>("Ldfooter")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LDFooter");

                    b.Property<string>("Ldheader")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LDHeader");

                    b.Property<string>("LdsigningI")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LDSigningI");

                    b.Property<string>("LdsigningIi")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LDSigningII");

                    b.Property<string>("LdsigningIii")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LDSigningIII");

                    b.Property<string>("LdsigningIv")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LDSigningIV");

                    b.Property<string>("Ldsubject")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LDSubject");

                    b.Property<string>("Ldtitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LDTitle");

                    b.Property<int>("LetterDefaultSettingId")
                        .HasColumnType("int");

                    b.HasKey("SecLetterDefaultSettingsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LetterDefaultSettingId");

                    b.ToTable("SecLetterDefaultSettings_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SecLetterType", b =>
                {
                    b.Property<int>("LetterTypeId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LetterTypeTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("LetterTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("SecLetterType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SecLetterTypeLang", b =>
                {
                    b.Property<int>("SecLetterTypeLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SecLetterTypeLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("LetterTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LetterTypeTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SecLetterTypeLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LetterTypeId");

                    b.ToTable("SecLetterType_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SecLetters", b =>
                {
                    b.Property<int>("LetterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LetterAnnex")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LetterCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("LetterContext")
                        .HasColumnType("ntext");

                    b.Property<string>("LetterDate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime>("LetterDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LetterFooter")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LetterHeader")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("LetterIsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LetterLastPrintDate")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime?>("LetterLastPrintDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LetterLastPrintTime")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<long>("LetterNumber")
                        .HasColumnType("bigint");

                    b.Property<long?>("LetterNumberIi")
                        .HasColumnType("bigint")
                        .HasColumnName("LetterNumberII");

                    b.Property<string>("LetterPreNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LetterPreNumberIi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LetterPreNumberII");

                    b.Property<int?>("LetterPrintFormatId")
                        .HasColumnType("int");

                    b.Property<string>("LetterSigningI")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LetterSigningIi")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LetterSigningII");

                    b.Property<string>("LetterSigningIii")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LetterSigningIII");

                    b.Property<string>("LetterSigningIv")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LetterSigningIV");

                    b.Property<string>("LetterSubject")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("LetterTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LetterVerifiedRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LetterVerifiedRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("LetterVerifierId")
                        .HasColumnType("int");

                    b.Property<int?>("LetterVerifierRequestId")
                        .HasColumnType("int");

                    b.Property<string>("LettercmpNickName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("LettercmpPersonId")
                        .HasColumnType("int");

                    b.Property<string>("LettercmpPersonNickName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("LettercmpProjectId")
                        .HasColumnType("int");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("LetterId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LetterCompanyId");

                    b.HasIndex("LetterPrintFormatId");

                    b.HasIndex("LetterTypeId");

                    b.HasIndex("LetterVerifierId");

                    b.HasIndex("LetterVerifierRequestId");

                    b.HasIndex("LettercmpPersonId");

                    b.HasIndex("LettercmpProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("SecLetters");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SecLettersLang", b =>
                {
                    b.Property<int>("SecLettersLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SecLettersLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LetterAnnex")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LetterContext")
                        .HasColumnType("ntext");

                    b.Property<string>("LetterFooter")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LetterHeader")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("LetterId")
                        .HasColumnType("int");

                    b.Property<string>("LetterSigningI")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LetterSigningIi")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LetterSigningII");

                    b.Property<string>("LetterSigningIii")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LetterSigningIII");

                    b.Property<string>("LetterSigningIv")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LetterSigningIV");

                    b.Property<string>("LetterSubject")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LettercmpNickName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LettercmpPersonNickName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("SecLettersLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LetterId");

                    b.ToTable("SecLetters_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Sex", b =>
                {
                    b.Property<int>("SexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SexID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("SexType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("SexId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Sex");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SexLang", b =>
                {
                    b.Property<int>("SexLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SexLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("SexId")
                        .HasColumnType("int")
                        .HasColumnName("SexID");

                    b.Property<string>("SexType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SexLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SexId");

                    b.ToTable("Sex_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsDefaultBodyText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("SmsDefaultBodyText");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsDefaultBodyTextGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<short?>("Code")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("SmsDefaultBodyTextGroups");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsDefaultBodyTextGroupsLang", b =>
                {
                    b.Property<int>("SmsDefaultBodyTextGroupsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SmsDefaultBodyTextGroupsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SmsDefaultBodyTextGroupsLangId");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("SmsDefaultBodyTextGroups_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsDefaultBodyTextLang", b =>
                {
                    b.Property<int>("SmsDefaultBodyTextLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SmsDefaultBodyTextLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("SmsDefaultBodyTextLangId");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("SmsDefaultBodyText_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsDeliveryStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DeliveryStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("WebServiceId")
                        .HasColumnType("int")
                        .HasColumnName("WebServiceID");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("SmsDeliveryStatus");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsDeliveryStatusLang", b =>
                {
                    b.Property<int>("SmsDeliveryStatusLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SmsDeliveryStatusLangID")
                        .UseIdentityColumn();

                    b.Property<string>("DeliveryStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("SmsDeliveryStatusLangId");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("SmsDeliveryStatus_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsGsmmodemDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DeliveryFaDateTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Dstatus")
                        .HasColumnType("int")
                        .HasColumnName("DStatus");

                    b.Property<string>("Dtime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DTime");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int?>("Folder")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int?>("Location")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("SendReference")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("SmsGSMModemDelivery");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsGsmmodemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("AutoDeleteAllReports")
                        .HasColumnType("bit");

                    b.Property<bool?>("AutoDeleteNewSms")
                        .HasColumnType("bit")
                        .HasColumnName("AutoDeleteNewSMS");

                    b.Property<bool?>("ConcatenatedSms")
                        .HasColumnType("bit")
                        .HasColumnName("ConcatenatedSMS");

                    b.Property<string>("ConnectStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DelayTime")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DeviceUniqeOrderIdForServiceSelect")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("FlashSms")
                        .HasColumnType("bit")
                        .HasColumnName("FlashSMS");

                    b.Property<string>("GsmBatteryLevel")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("gsmBatteryLevel");

                    b.Property<string>("GsmFirmware")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("gsmFirmware");

                    b.Property<string>("GsmHardware")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("gsmHardware");

                    b.Property<string>("GsmImei")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("gsmIMEI");

                    b.Property<string>("GsmManufacturer")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("gsmManufacturer");

                    b.Property<string>("GsmModel")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("gsmModel");

                    b.Property<string>("GsmNetworkInfo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("gsmNetworkInfo");

                    b.Property<string>("GsmSignalLevel")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("gsmSignalLevel");

                    b.Property<string>("GsmSmscnumber")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("gsmSMSCNumber");

                    b.Property<string>("GsmTime")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("gsmTime");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LastSendError")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("LineIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Mode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("Parameter")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PinCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Protocol")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool?>("RequestSendReport")
                        .HasColumnType("bit");

                    b.Property<int?>("RetryTimes")
                        .HasColumnType("int");

                    b.Property<string>("SendFtime")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SendFTime");

                    b.Property<int?>("SendInterval")
                        .HasColumnType("int");

                    b.Property<int?>("SendStop")
                        .HasColumnType("int");

                    b.Property<int?>("SendTimeout")
                        .HasColumnType("int");

                    b.Property<string>("SendTtime")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SendTTime");

                    b.Property<bool?>("SendWithDelay")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendingIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SimNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<short?>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("SmsGSMModemSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsGsmreceives", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("Coding")
                        .HasColumnType("int");

                    b.Property<string>("ConcatenatedInfo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int?>("Folder")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int?>("Location")
                        .HasColumnType("int");

                    b.Property<string>("ReceiveNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReceiveText")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("ReceiveTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("SmsGSMReceives");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsGsmsendingTank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Body")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Info")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long?>("RefId")
                        .HasColumnType("bigint");

                    b.Property<string>("RequestDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("RequestTime")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("SendDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("SendUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("Sended")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("SmsGSMSendingTank");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsProviders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<decimal?>("EnCost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("FaCost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<decimal?>("LastCreditAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ProviderDomain")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProviderIdentity")
                        .HasColumnType("int");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("ReceiveIsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool?>("SendIsActive")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("SmsProviders");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsReceive", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyPersonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GetId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short?>("Month1")
                        .HasColumnType("smallint");

                    b.Property<long?>("OrderNum")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReceiveDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("ReceiveDatePersianPreview")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("ReceiveDay")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReceiveTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ReceiveType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SendDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("SendDatePersianPreview")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("SmsDesc")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SmsNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<short?>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyPersonId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("SmsReceive");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsReceiveFromWsdl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GetId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<long?>("OrderNum")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReceiveDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("ReceiveDatePersianPreview")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("ReceiveDay")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReceiveTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ReceiveType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SendDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("SendDatePersianPreview")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("SmsDesc")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SmsNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("SmsReceiveFromWSDL");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsSendDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Body")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal?>("BodyCost")
                        .HasColumnType("numeric(18,0)");

                    b.Property<int?>("BodyCount")
                        .HasColumnType("int");

                    b.Property<string>("BodyLangType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyPersonId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("HeadId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("int");

                    b.Property<string>("ObjectIdType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long?>("RefId")
                        .HasColumnType("bigint")
                        .HasColumnName("RefID");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("SendDate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("SendDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("SendDay")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("SendNeedCheck")
                        .HasColumnType("bit");

                    b.Property<int?>("SendPriority")
                        .HasColumnType("int");

                    b.Property<string>("SendTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SendUserId")
                        .HasColumnType("int");

                    b.Property<long?>("Sid")
                        .HasColumnType("bigint")
                        .HasColumnName("SID");

                    b.Property<string>("StatusChangeDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("StatusChangeDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("StatusChangeTime")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyPersonId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("HeadId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SendUserId");

                    b.HasIndex("UserId");

                    b.ToTable("SmsSendDetail");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsSendHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int?>("AllsmsCount")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("Cmessage")
                        .HasColumnType("int")
                        .HasColumnName("CMessage");

                    b.Property<string>("CompaniesId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyPersonsId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("NumberCount")
                        .HasColumnType("int");

                    b.Property<string>("Numbers")
                        .HasColumnType("text");

                    b.Property<string>("RefNumbers")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("SchedulDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SendDate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("SendDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("SendDay")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SendTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SendTopic")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SendType")
                        .HasColumnType("int");

                    b.Property<int>("SendUserId")
                        .HasColumnType("int");

                    b.Property<long?>("Sid")
                        .HasColumnType("bigint")
                        .HasColumnName("SID");

                    b.Property<string>("SmsBody")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("smsBody");

                    b.Property<decimal?>("SmsBodyCost")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("smsBodyCost");

                    b.Property<int?>("SmsBodyCount")
                        .HasColumnType("int")
                        .HasColumnName("smsBodyCount");

                    b.Property<string>("SmsBodyLangType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("smsBodyLangType");

                    b.Property<decimal?>("UserCost")
                        .HasColumnType("numeric(18,0)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SendUserId");

                    b.HasIndex("UserId");

                    b.ToTable("SmsSendHeader");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsSendType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("SmssendType1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SMSSendType");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("SmsSendType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsSendTypeLang", b =>
                {
                    b.Property<int>("SmsSendTypeLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SmsSendTypeLangID")
                        .UseIdentityColumn();

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("SmssendType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SMSSendType");

                    b.HasKey("SmsSendTypeLangId");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("SmsSendType_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool?>("ActiveSendAfterKnownCallNum")
                        .HasColumnType("bit");

                    b.Property<bool?>("ActiveSendAfterRegNewNum")
                        .HasColumnType("bit");

                    b.Property<bool?>("ActiveSendAfterUnKnownNumCall")
                        .HasColumnType("bit");

                    b.Property<bool?>("ActiveSendBirthCongratulate")
                        .HasColumnType("bit");

                    b.Property<bool?>("ActiveSendMarriageCongratulate")
                        .HasColumnType("bit");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CmpPattern")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("CmpTpattern")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("CmpTPattern");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("DomainName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("EnCost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("FaCost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("GetAutoDeliveryIsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<decimal?>("LastCreditAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("Number")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("PrsFnpattern")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("PrsFNPattern");

                    b.Property<string>("PrsJobPattern")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PrsLnpattern")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("PrsLNPattern");

                    b.Property<string>("PrsTpattern")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("PrsTPattern");

                    b.Property<bool?>("ReceiveIsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool?>("SendAfterKnownNumCallGsm")
                        .HasColumnType("bit")
                        .HasColumnName("SendAfterKnownNumCallGSM");

                    b.Property<string>("SendAfterKnownNumCallText")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("SendAfterKnownNumCallWeb")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendAfterRegNewNumGsm")
                        .HasColumnType("bit")
                        .HasColumnName("SendAfterRegNewNumGSM");

                    b.Property<string>("SendAfterRegNewNumText")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("SendAfterRegNewNumWeb")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendAfterUnKnownNumCallGsm")
                        .HasColumnType("bit")
                        .HasColumnName("SendAfterUnKnownNumCallGSM");

                    b.Property<string>("SendAfterUnKnownNumCallText")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("SendAfterUnKnownNumCallWeb")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendBirthCongratulateGsm")
                        .HasColumnType("bit")
                        .HasColumnName("SendBirthCongratulateGSM");

                    b.Property<string>("SendBirthCongratulateText")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("SendBirthCongratulateWeb")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendIsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendMarriageCongratulateGsm")
                        .HasColumnType("bit")
                        .HasColumnName("SendMarriageCongratulateGSM");

                    b.Property<string>("SendMarriageCongratulateText")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("SendMarriageCongratulateWeb")
                        .HasColumnType("bit");

                    b.Property<string>("Tmp")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("tmp");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("SmsSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsTempMobileNumbers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Body")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal?>("BodyCost")
                        .HasColumnType("numeric(18,0)");

                    b.Property<int?>("BodyCount")
                        .HasColumnType("int");

                    b.Property<string>("BodyLangType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CmpName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("cmpName");

                    b.Property<string>("CmpTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cmpTitle");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CompanyPersonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("MobileLength")
                        .HasColumnType("int");

                    b.Property<string>("MobilePreNum")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PersonName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrsFname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PrsFName");

                    b.Property<string>("PrsJob")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrsLname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PrsLName");

                    b.Property<string>("PrsTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("Selector")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<int?>("Sid")
                        .HasColumnType("int")
                        .HasColumnName("SID");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyPersonId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("SmsTempMobileNumbers");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsUserSendCredit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CreditUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ImportDate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("ImportDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreditUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("SmsUserSendCredit");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsUserSendCreditLang", b =>
                {
                    b.Property<int>("SmsUserSendCreditLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SmsUserSendCreditLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("SmsUserSendCreditLangId");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("SmsUserSendCredit_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UserDepartmentTicketReferUsers", b =>
                {
                    b.Property<int>("UserDepartmentTicketReferUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short?>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("ReferUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<short?>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("UserDepartmentTicketReferUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ReferUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartmentTicketReferUsers");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UserDepartments", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("DefaultTicketUserId")
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("DepartmentId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UserDepartmentsLang", b =>
                {
                    b.Property<int>("UserDepartmentsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserDepartmentsLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("UserDepartmentsLangId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LanguageId");

                    b.ToTable("UserDepartments_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UserLanguages", b =>
                {
                    b.Property<int>("UserLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserLanguageID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageDirection")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("UserLanguageId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UserLoginAllowedTimes", b =>
                {
                    b.Property<int>("UserLoginAllowedTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CrmUserId")
                        .HasColumnType("int")
                        .HasColumnName("crmUserId");

                    b.Property<int?>("DayNumber")
                        .HasColumnType("int");

                    b.Property<string>("FdatePersian")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FDatePersian");

                    b.Property<DateTime?>("Fdatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("FDatetime");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("FirstUserId")
                        .HasColumnType("int");

                    b.Property<string>("Ftime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FTime");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IPAddress");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("TdatePersian")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TDatePersian");

                    b.Property<DateTime?>("Tdatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("TDatetime");

                    b.Property<string>("Ttime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TTime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("UserLoginAllowedTimeId");

                    b.HasIndex("CrmUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("FirstUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginAllowedTimes");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UserSignature", b =>
                {
                    b.Property<int>("SignatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SignatureID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<byte[]>("Signature")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<int>("SignatureUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("SignatureId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SignatureUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSignature");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool?>("AllowCopyOtherLanguage")
                        .HasColumnType("bit");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("CallreIdDeActive")
                        .HasColumnType("bit");

                    b.Property<string>("CallreIdDeActiveLines")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("CanSetFree")
                        .HasColumnType("bit");

                    b.Property<string>("ComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CoordinateLastDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CoordinateLastDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("CoordinateLatitude")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CoordinateLongitude")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool?>("DisableInternalMessageAllarmVoice")
                        .HasColumnType("bit");

                    b.Property<bool?>("DisableReceiveCnvsinfoAllarm")
                        .HasColumnType("bit")
                        .HasColumnName("DisableReceiveCNVSInfoAllarm");

                    b.Property<string>("EmailAttachFileLocation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("Fname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FName");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<string>("IsAdmin")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Lname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LName");

                    b.Property<int?>("MaxNumberCmpDraft")
                        .HasColumnType("int");

                    b.Property<bool?>("MobAppBaseInfoNeedUpdate")
                        .HasColumnType("bit");

                    b.Property<string>("MobAppBaseInfoNeedUpdateDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("ResponsibleUserId")
                        .HasColumnType("int");

                    b.Property<int?>("Row")
                        .HasColumnType("int");

                    b.Property<int?>("SignatureId")
                        .HasColumnType("int");

                    b.Property<string>("Tel")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("TelDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("UseClientNameForNetworking")
                        .HasColumnType("bit");

                    b.Property<bool?>("UserAccessDailyChrtAllUsers")
                        .HasColumnType("bit");

                    b.Property<bool?>("UserAccessSaleChrtAllUsers")
                        .HasColumnType("bit");

                    b.Property<string>("UserCipatternFormulaPopUp")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("UserCIPatternFormulaPopUp");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.Property<bool?>("UserIsActiveInFosetting")
                        .HasColumnType("bit")
                        .HasColumnName("UserIsActiveInFOSetting");

                    b.Property<bool?>("UserIsActiveInMobApp")
                        .HasColumnType("bit");

                    b.Property<bool?>("UserIsActiveInWebApp")
                        .HasColumnType("bit");

                    b.Property<bool?>("UserIsActiveInWinApp")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId1");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("IX_Users");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UsersLang", b =>
                {
                    b.Property<int>("UsersLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UsersLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Fname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FName");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Lname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LName");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UsersLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Users_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UsersPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AccessLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("PrjId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RollId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrjId");

                    b.HasIndex("RollId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersPermission");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UsersPermissionLang", b =>
                {
                    b.Property<int>("UsersPermissionLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UsersPermissionLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("UsersPermissionLangId");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("UsersPermission_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsWareHouse", b =>
                {
                    b.Property<int>("WareHouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WareHouseID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<short?>("IsFix")
                        .HasColumnType("smallint");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WrhsAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WrhsArea")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WrhsCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("WrhsDeActive")
                        .HasColumnType("bit");

                    b.Property<string>("WrhsDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WrhsFax")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("WrhsFaxSecond")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("WrhsLinkAccWhCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("WrhsLinkAccWhId")
                        .HasColumnType("int");

                    b.Property<string>("WrhsName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WrhsPerson")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WrhsPreTel")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("WrhsTel")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("WrhsTelSecond")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("WrhsTelThird")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("WareHouseId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WsWareHouse");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsWareHouseLang", b =>
                {
                    b.Property<int>("WsWareHouseLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WsWareHouseLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("WareHouseId")
                        .HasColumnType("int")
                        .HasColumnName("WareHouseID");

                    b.Property<string>("WrhsAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WrhsArea")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WrhsDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WrhsName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WrhsPerson")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WsWareHouseLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("WsWareHouse_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrder", b =>
                {
                    b.Property<int>("BuyOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BuyOrderID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("BordCalculateTax")
                        .HasColumnType("bit")
                        .HasColumnName("bordCalculateTax");

                    b.Property<int>("BordCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("bordCompanyId");

                    b.Property<int?>("BordCompanyPersonId")
                        .HasColumnType("int")
                        .HasColumnName("bordCompanyPersonId");

                    b.Property<string>("BordDate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("bordDate");

                    b.Property<DateTime?>("BordDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("bordDateTime");

                    b.Property<string>("BordDay")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("bordDay");

                    b.Property<decimal?>("BordDiscount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bordDiscount");

                    b.Property<decimal?>("BordDiscountPercent")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bordDiscountPercent");

                    b.Property<string>("BordDiscountTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bordDiscountTitle");

                    b.Property<int?>("BordFirstRegisterUserId")
                        .HasColumnType("int")
                        .HasColumnName("bordFirstRegisterUserId");

                    b.Property<string>("BordImportDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("bordImportDate");

                    b.Property<DateTime?>("BordImportDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("bordImportDateTime");

                    b.Property<bool?>("BordIsFixed")
                        .HasColumnType("bit")
                        .HasColumnName("bordIsFixed");

                    b.Property<bool?>("BordIsVerified")
                        .HasColumnType("bit")
                        .HasColumnName("bordIsVerified");

                    b.Property<int?>("BordItemCount")
                        .HasColumnType("int")
                        .HasColumnName("bordItemCount");

                    b.Property<decimal?>("BordItemsAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bordItemsAmount");

                    b.Property<int?>("BordLinkAccBuyOrderId")
                        .HasColumnType("int")
                        .HasColumnName("bordLinkAccBuyOrderId");

                    b.Property<string>("BordLinkAccBuyOrderNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("bordLinkAccBuyOrderNumber");

                    b.Property<string>("BordLinkAccCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("bordLinkAccCode");

                    b.Property<int?>("BordLinkAccCodeId")
                        .HasColumnType("int")
                        .HasColumnName("bordLinkAccCodeId");

                    b.Property<int?>("BordLinkAccVoucherId")
                        .HasColumnType("int")
                        .HasColumnName("bordLinkAccVoucherId");

                    b.Property<string>("BordLinkAccVoucherNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("bordLinkAccVoucherNumber");

                    b.Property<string>("BordNote")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("bordNote");

                    b.Property<long>("BordNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("bordNumber");

                    b.Property<string>("BordOrderDate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("bordOrderDate");

                    b.Property<DateTime?>("BordOrderDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("bordOrderDateTime");

                    b.Property<string>("BordOrderNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("bordOrderNumber");

                    b.Property<int?>("BordPrintFormatId")
                        .HasColumnType("int")
                        .HasColumnName("bordPrintFormatId");

                    b.Property<int?>("BordProjectId")
                        .HasColumnType("int")
                        .HasColumnName("bordProjectId");

                    b.Property<int?>("BordReferUserId")
                        .HasColumnType("int")
                        .HasColumnName("bordReferUserId");

                    b.Property<decimal?>("BordRound")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bordRound");

                    b.Property<int?>("BordSettlementTypeId")
                        .HasColumnType("int")
                        .HasColumnName("bordSettlementTypeId");

                    b.Property<int?>("BordStatusId")
                        .HasColumnType("int")
                        .HasColumnName("bordStatusId");

                    b.Property<string>("BordSubject")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bordSubject");

                    b.Property<decimal?>("BordSumAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bordSumAmount");

                    b.Property<decimal?>("BordTax")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bordTax");

                    b.Property<decimal?>("BordTaxIndex")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bordTaxIndex");

                    b.Property<string>("BordTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("bordTime");

                    b.Property<string>("BordTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bordTitle");

                    b.Property<decimal?>("BordTotalAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bordTotalAmount");

                    b.Property<string>("BordTotalAmountStr")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("bordTotalAmountStr");

                    b.Property<decimal?>("BordTransportation")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bordTransportation");

                    b.Property<DateTime?>("BordVerifiedRegisterDate")
                        .HasColumnType("datetime")
                        .HasColumnName("bordVerifiedRegisterDate");

                    b.Property<string>("BordVerifiedRegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("bordVerifiedRegisterDatePersian");

                    b.Property<int?>("BordVerifierId")
                        .HasColumnType("int")
                        .HasColumnName("bordVerifierId");

                    b.Property<string>("BordcmpTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bordcmpTitle");

                    b.Property<int?>("BuyOrderOprId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("PreBuyOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PreBuyOrderVerifierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BuyOrderId");

                    b.HasIndex("BordCompanyId")
                        .HasDatabaseName("IX_WSBuyOrder_CompanyId");

                    b.HasIndex("BordCompanyPersonId")
                        .HasDatabaseName("IX_WSBuyOrder_CompanyPersonId");

                    b.HasIndex("BordFirstRegisterUserId");

                    b.HasIndex("BordPrintFormatId");

                    b.HasIndex("BordProjectId")
                        .HasDatabaseName("IX_WSBuyOrder_ProjectId");

                    b.HasIndex("BordReferUserId");

                    b.HasIndex("BordStatusId");

                    b.HasIndex("BordVerifierId");

                    b.HasIndex("BuyOrderOprId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSBuyOrder");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderItemSerials", b =>
                {
                    b.Property<int>("BuyOrderItemSerialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BuyOrderItemSerialID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("BuyOrderItemId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("ExpDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ExpDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("InfoI")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InfoIi")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("InfoII");

                    b.Property<string>("InfoIii")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("InfoIII");

                    b.Property<string>("InfoIv")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("InfoIV");

                    b.Property<string>("InfoV")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InfoVi")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("InfoVI");

                    b.Property<bool?>("IsAutoBarcode")
                        .HasColumnType("bit");

                    b.Property<short?>("IsFix")
                        .HasColumnType("smallint");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Serial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SerialId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TblTmpBarcodeId")
                        .HasColumnType("int")
                        .HasColumnName("tblTmpBarcodeId");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Whid")
                        .HasColumnType("int")
                        .HasColumnName("WHId");

                    b.HasKey("BuyOrderItemSerialId");

                    b.HasIndex("BuyOrderItemId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.HasIndex("Whid");

                    b.ToTable("WSBuyOrderItemSerials");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderItemSerialsLang", b =>
                {
                    b.Property<int>("WsbuyOrderItemSerialsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSBuyOrderItemSerialsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("BuyOrderItemSerialId")
                        .HasColumnType("int")
                        .HasColumnName("BuyOrderItemSerialID");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("InfoI")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InfoIi")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("InfoII");

                    b.Property<string>("InfoIii")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("InfoIII");

                    b.Property<string>("InfoIv")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("InfoIV");

                    b.Property<string>("InfoV")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InfoVi")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("InfoVI");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("WsbuyOrderItemSerialsLangId");

                    b.HasIndex("BuyOrderItemSerialId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSBuyOrderItemSerials_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderItems", b =>
                {
                    b.Property<int>("BuyOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("BordIcalculateTax")
                        .HasColumnType("bit")
                        .HasColumnName("bordICalculateTax");

                    b.Property<decimal?>("BordIcost")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bordICost");

                    b.Property<int?>("BordIcurrencyUnitId")
                        .HasColumnType("int")
                        .HasColumnName("bordICurrencyUnitId");

                    b.Property<string>("BordIdescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("bordIDescription");

                    b.Property<decimal?>("BordIdiscount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bordIDiscount");

                    b.Property<decimal?>("BordIdiscountI")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bordIDiscountI");

                    b.Property<decimal?>("BordIdiscountIpercent")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bordIDiscountIPercent");

                    b.Property<decimal?>("BordIdiscountPercent")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bordIDiscountPercent");

                    b.Property<double?>("BordIfcr")
                        .HasColumnType("float")
                        .HasColumnName("bordIFCR");

                    b.Property<double?>("BordIfcri")
                        .HasColumnType("float")
                        .HasColumnName("bordIFCRI");

                    b.Property<int?>("BordIlinkAccItemId")
                        .HasColumnType("int")
                        .HasColumnName("bordILinkAccItemId");

                    b.Property<bool?>("BordInotInSum")
                        .HasColumnType("bit")
                        .HasColumnName("bordINotInSum");

                    b.Property<bool?>("BordInotVisible")
                        .HasColumnType("bit")
                        .HasColumnName("bordINotVisible");

                    b.Property<int?>("BordIorderView")
                        .HasColumnType("int")
                        .HasColumnName("bordIOrderView");

                    b.Property<int?>("BordIprdCostGroupId")
                        .HasColumnType("int")
                        .HasColumnName("bordIPrdCostGroupID");

                    b.Property<int>("BordIprdId")
                        .HasColumnType("int")
                        .HasColumnName("bordIPrdId");

                    b.Property<int?>("BordIprdUnitId")
                        .HasColumnType("int")
                        .HasColumnName("bordIPrdUnitId");

                    b.Property<double?>("BordIquantity")
                        .HasColumnType("float")
                        .HasColumnName("bordIQuantity");

                    b.Property<string>("BordIquantityDesc")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("bordIQuantityDesc");

                    b.Property<decimal?>("BordItax")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bordITax");

                    b.Property<decimal?>("BordItaxIndex")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bordITaxIndex");

                    b.Property<decimal?>("BordItotalCost")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bordITotalCost");

                    b.Property<string>("BordItracing")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("bordITracing");

                    b.Property<int?>("BordIwhid")
                        .HasColumnType("int")
                        .HasColumnName("bordIWHId");

                    b.Property<int>("BuyOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BuyOrderItemId");

                    b.HasIndex("BordIcurrencyUnitId");

                    b.HasIndex("BordIprdId")
                        .HasDatabaseName("IX_WSBuyOrderItems_PrdId");

                    b.HasIndex("BordIprdUnitId");

                    b.HasIndex("BordIwhid");

                    b.HasIndex("BuyOrderId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSBuyOrderItems");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderItemsLang", b =>
                {
                    b.Property<int>("WsbuyOrderItemsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSBuyOrderItemsLangID")
                        .UseIdentityColumn();

                    b.Property<string>("BordIdescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("bordIDescription");

                    b.Property<string>("BordIquantityDesc")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("bordIQuantityDesc");

                    b.Property<int>("BuyOrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("WsbuyOrderItemsLangId");

                    b.HasIndex("BuyOrderItemId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSBuyOrderItems_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderLang", b =>
                {
                    b.Property<int>("WsbuyOrderLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSBuyOrderLangID")
                        .UseIdentityColumn();

                    b.Property<string>("BordDiscountTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bordDiscountTitle");

                    b.Property<string>("BordNote")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("bordNote");

                    b.Property<string>("BordSubject")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bordSubject");

                    b.Property<string>("BordTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bordTitle");

                    b.Property<string>("BordTotalAmountStr")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("bordTotalAmountStr");

                    b.Property<string>("BordcmpTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bordcmpTitle");

                    b.Property<int>("BuyOrderId")
                        .HasColumnType("int")
                        .HasColumnName("BuyOrderID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("WsbuyOrderLangId");

                    b.HasIndex("BuyOrderId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSBuyOrder_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderOpr", b =>
                {
                    b.Property<int>("BuyOrderOprId")
                        .HasColumnType("int")
                        .HasColumnName("BuyOrderOprID");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("DocOprId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OprType")
                        .HasColumnType("int");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.HasKey("BuyOrderOprId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSBuyOrderOpr");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderOprLang", b =>
                {
                    b.Property<int>("WsbuyOrderOprLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSBuyOrderOprLangID")
                        .UseIdentityColumn();

                    b.Property<int>("BuyOrderOprId")
                        .HasColumnType("int")
                        .HasColumnName("BuyOrderOprID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WsbuyOrderOprLangId");

                    b.HasIndex("BuyOrderOprId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSBuyOrderOpr_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderPaymentTypes", b =>
                {
                    b.Property<int>("BuyOrderPaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("BordpayType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("bordpayType");

                    b.Property<string>("BordpayTypeDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bordpayTypeDescription");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int?>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BuyOrderPaymentTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSBuyOrderPaymentTypes");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderPaymentTypesLang", b =>
                {
                    b.Property<int>("WsbuyOrderPaymentTypesLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSBuyOrderPaymentTypesLangID")
                        .UseIdentityColumn();

                    b.Property<string>("BordpayType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("bordpayType");

                    b.Property<string>("BordpayTypeDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bordpayTypeDescription");

                    b.Property<int>("BuyOrderPaymentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("WsbuyOrderPaymentTypesLangId");

                    b.HasIndex("BuyOrderPaymentTypeId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSBuyOrderPaymentTypes_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderPayments", b =>
                {
                    b.Property<int>("BuyOrderPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("BordpayAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bordpayAmount");

                    b.Property<string>("BordpayDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("bordpayDescription");

                    b.Property<decimal?>("BordpayDocAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bordpayDocAmount");

                    b.Property<string>("BordpayDocDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("bordpayDocDate");

                    b.Property<DateTime?>("BordpayDocDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("bordpayDocDateTime");

                    b.Property<int?>("BordpayDocId")
                        .HasColumnType("int")
                        .HasColumnName("bordpayDocId");

                    b.Property<string>("BordpayDocNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("bordpayDocNumber");

                    b.Property<int?>("BordpayDocTypeId")
                        .HasColumnType("int")
                        .HasColumnName("bordpayDocTypeId");

                    b.Property<DateTime?>("BordpayFirstRegisteDate")
                        .HasColumnType("datetime")
                        .HasColumnName("bordpayFirstRegisteDate");

                    b.Property<string>("BordpayFirstRegisteDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("bordpayFirstRegisteDatePersian");

                    b.Property<int?>("BordpayFirstRegisterUserId")
                        .HasColumnType("int")
                        .HasColumnName("bordpayFirstRegisterUserId");

                    b.Property<int?>("BordpayLinkAccDetailId")
                        .HasColumnType("int")
                        .HasColumnName("bordpayLinkAccDetailId");

                    b.Property<int?>("BordpayLinkAccHeaderId")
                        .HasColumnType("int")
                        .HasColumnName("bordpayLinkAccHeaderId");

                    b.Property<string>("BordpayLinkAccHeaderNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("bordpayLinkAccHeaderNumber");

                    b.Property<int?>("BordpayLinkAccVoucherId")
                        .HasColumnType("int")
                        .HasColumnName("bordpayLinkAccVoucherId");

                    b.Property<string>("BordpayLinkAccVoucherNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("bordpayLinkAccVoucherNumber");

                    b.Property<int>("BordpayOrderId")
                        .HasColumnType("int")
                        .HasColumnName("bordpayOrderId");

                    b.Property<int>("BordpayTypeId")
                        .HasColumnType("int")
                        .HasColumnName("bordpayTypeId");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ImportDate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("ImportDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BuyOrderPaymentId");

                    b.HasIndex("BordpayFirstRegisterUserId");

                    b.HasIndex("BordpayOrderId");

                    b.HasIndex("BordpayTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSBuyOrderPayments");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderPaymentsLang", b =>
                {
                    b.Property<int>("WsbuyOrderPaymentsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSBuyOrderPaymentsLangID")
                        .UseIdentityColumn();

                    b.Property<string>("BordpayDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("bordpayDescription");

                    b.Property<int>("BuyOrderPaymentId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("WsbuyOrderPaymentsLangId");

                    b.HasIndex("BuyOrderPaymentId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSBuyOrderPayments_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderStatus", b =>
                {
                    b.Property<int>("BuyOrderStatusId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("BuyOrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BuyOrderStatusId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSBuyOrderStatus");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderStatusLang", b =>
                {
                    b.Property<int>("WsbuyOrderStatusLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSBuyOrderStatusLangID")
                        .UseIdentityColumn();

                    b.Property<string>("BuyOrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BuyOrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("WsbuyOrderStatusLangId");

                    b.HasIndex("BuyOrderStatusId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSBuyOrderStatus_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WscreditDuration", b =>
                {
                    b.Property<int>("CreditDurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CreditDurationID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CreditDuration")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CreditDurationHours")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CreditDurationId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSCreditDuration");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WscreditDurationLang", b =>
                {
                    b.Property<int>("WscreditDurationLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSCreditDurationLangID")
                        .UseIdentityColumn();

                    b.Property<string>("CreditDuration")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CreditDurationId")
                        .HasColumnType("int")
                        .HasColumnName("CreditDurationID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("WscreditDurationLangId");

                    b.HasIndex("CreditDurationId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSCreditDuration_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WscurrencyUnits", b =>
                {
                    b.Property<int>("CurrencyUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CurrencyUnitID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CurrencyUnit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CurrencyUnitEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CurrencyUnitId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSCurrencyUnits");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WscurrencyUnitsLang", b =>
                {
                    b.Property<int>("WscurrencyUnitsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSCurrencyUnitsLangID")
                        .UseIdentityColumn();

                    b.Property<string>("CurrencyUnit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CurrencyUnitEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CurrencyUnitId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyUnitID");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("WscurrencyUnitsLangId");

                    b.HasIndex("CurrencyUnitId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSCurrencyUnits_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdeliveryTime", b =>
                {
                    b.Property<int>("DeliveryTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeliveryTimeID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DeliveryTime")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryTimeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSDeliveryTime");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdeliveryTimeLang", b =>
                {
                    b.Property<int>("WsdeliveryTimeLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSDeliveryTimeLangID")
                        .UseIdentityColumn();

                    b.Property<string>("DeliveryTime")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DeliveryTimeId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryTimeID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("WsdeliveryTimeLangId");

                    b.HasIndex("DeliveryTimeId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSDeliveryTime_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Wsdoc", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("BijakNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("BuyOrderId")
                        .HasColumnType("int");

                    b.Property<string>("CarNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CmpTitle")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("cmpTitle");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyPersonId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DocDate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("DocDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DocLinkAccCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DocLinkAccCodeId")
                        .HasColumnType("int");

                    b.Property<int?>("DocLinkAccDocId")
                        .HasColumnType("int");

                    b.Property<string>("DocLinkAccDocNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DocLinkAccVoucherId")
                        .HasColumnType("int");

                    b.Property<string>("DocLinkAccVoucherNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DocNumber")
                        .HasColumnType("int");

                    b.Property<string>("DriverName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DriverTel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FactorNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<string>("FreightName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<short?>("IsFix")
                        .HasColumnType("smallint");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("OprId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("SendAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("SenderName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Whid")
                        .HasColumnType("int")
                        .HasColumnName("WHId");

                    b.Property<int?>("WhidI")
                        .HasColumnType("int")
                        .HasColumnName("WHIdI");

                    b.HasKey("DocId");

                    b.HasIndex("BuyOrderId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyPersonId");

                    b.HasIndex("DocDateTime");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OprId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.HasIndex("Whid");

                    b.HasIndex("WhidI");

                    b.ToTable("WSDoc");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdocItemSerials", b =>
                {
                    b.Property<int>("DocItemSerialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocItemSerialID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("DocIslinkAccItemSerialId")
                        .HasColumnType("int")
                        .HasColumnName("DocISLinkAccItemSerialId");

                    b.Property<DateTime?>("ExpDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ExpDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("InfoI")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InfoIi")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("InfoII");

                    b.Property<string>("InfoIii")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("InfoIII");

                    b.Property<string>("InfoIv")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("InfoIV");

                    b.Property<string>("InfoV")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InfoVi")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("InfoVI");

                    b.Property<bool?>("IsAutoBarcode")
                        .HasColumnType("bit");

                    b.Property<short?>("IsFix")
                        .HasColumnType("smallint");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Serial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SerialId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TblTmpBarcodeId")
                        .HasColumnType("int")
                        .HasColumnName("tblTmpBarcodeId");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Whid")
                        .HasColumnType("int")
                        .HasColumnName("WHId");

                    b.HasKey("DocItemSerialId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("ItemId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.HasIndex("Whid");

                    b.ToTable("WSDocItemSerials");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdocItemSerialsLang", b =>
                {
                    b.Property<int>("WsdocItemSerialsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSDocItemSerialsLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("DocItemSerialId")
                        .HasColumnType("int")
                        .HasColumnName("DocItemSerialID");

                    b.Property<string>("InfoI")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InfoIi")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("InfoII");

                    b.Property<string>("InfoIii")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("InfoIII");

                    b.Property<string>("InfoIv")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("InfoIV");

                    b.Property<string>("InfoV")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InfoVi")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("InfoVI");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("WsdocItemSerialsLangId");

                    b.HasIndex("DocItemSerialId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSDocItemSerials_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdocItems", b =>
                {
                    b.Property<int>("DocItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocItemID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("numeric(18,0)");

                    b.Property<int?>("CostId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("DocId")
                        .HasColumnType("int");

                    b.Property<int?>("DocIlinkAccItemId")
                        .HasColumnType("int")
                        .HasColumnName("DocILinkAccItemId");

                    b.Property<double?>("Fcr")
                        .HasColumnType("float")
                        .HasColumnName("FCR");

                    b.Property<double?>("Fcri")
                        .HasColumnType("float")
                        .HasColumnName("FCRI");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<short?>("IsFix")
                        .HasColumnType("smallint");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<bool?>("NotVisible")
                        .HasColumnType("bit");

                    b.Property<int>("PrdId")
                        .HasColumnType("int");

                    b.Property<double?>("Quantity")
                        .HasColumnType("float");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Tracing")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Whid")
                        .HasColumnType("int")
                        .HasColumnName("WHId");

                    b.HasKey("DocItemId");

                    b.HasIndex("CostId");

                    b.HasIndex("DocId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrdId");

                    b.HasIndex("UserId");

                    b.HasIndex("Whid");

                    b.ToTable("WSDocItems");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdocItemsLang", b =>
                {
                    b.Property<int>("WsdocItemsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSDocItemsLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("DocItemId")
                        .HasColumnType("int")
                        .HasColumnName("DocItemID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("WsdocItemsLangId");

                    b.HasIndex("DocItemId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSDocItems_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdocLang", b =>
                {
                    b.Property<int>("WsdocLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSDocLangID")
                        .UseIdentityColumn();

                    b.Property<string>("CmpTitle")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("cmpTitle");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("DocId")
                        .HasColumnType("int")
                        .HasColumnName("DocID");

                    b.Property<string>("DriverName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FreightName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("SendAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SenderName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("WsdocLangId");

                    b.HasIndex("DocId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSDoc_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdocOpr", b =>
                {
                    b.Property<int>("DocOprId")
                        .HasColumnType("int")
                        .HasColumnName("DocOprID");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OprType")
                        .HasColumnType("int");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.HasKey("DocOprId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSDocOpr");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdocOprLang", b =>
                {
                    b.Property<int>("WsdocOprLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSDocOprLangID")
                        .UseIdentityColumn();

                    b.Property<int>("DocOprId")
                        .HasColumnType("int")
                        .HasColumnName("DocOprID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WsdocOprLangId");

                    b.HasIndex("DocOprId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSDocOpr_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Fdate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("FDate");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int?>("FpLinkAccFpid")
                        .HasColumnType("int")
                        .HasColumnName("FpLinkAccFPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Tdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TDate");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short?>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSFinancialPeriod");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Wsguaranty", b =>
                {
                    b.Property<int>("GuarantyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GuarantyID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<string>("Guaranty")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GuarantyId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSGuaranty");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsguarantyLang", b =>
                {
                    b.Property<int>("WsguarantyLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSGuarantyLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Guaranty")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("GuarantyId")
                        .HasColumnType("int")
                        .HasColumnName("GuarantyID");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("WsguarantyLangId");

                    b.HasIndex("GuarantyId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSGuaranty_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WslinkedProducts", b =>
                {
                    b.Property<int>("LinkedProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("LinkedPrdId")
                        .HasColumnType("int");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("PrdId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LinkedProductId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LinkedPrdId");

                    b.HasIndex("PrdId");

                    b.HasIndex("UserId");

                    b.ToTable("WSLinkedProducts");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Wslogo", b =>
                {
                    b.Property<int>("LogoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogoID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<byte[]>("Logo")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<string>("LogoDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LogoId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSLogo");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WslogoLang", b =>
                {
                    b.Property<int>("WslogoLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSLogoLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LogoDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LogoId")
                        .HasColumnType("int")
                        .HasColumnName("LogoID");

                    b.HasKey("WslogoLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LogoId");

                    b.ToTable("WSLogo_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Wsorder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("OrdAccountNumberI")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordAccountNumberI");

                    b.Property<string>("OrdAccountNumberIi")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordAccountNumberII");

                    b.Property<string>("OrdAccountShabaNumberI")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordAccountShabaNumberI");

                    b.Property<string>("OrdAccountShabaNumberIi")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordAccountShabaNumberII");

                    b.Property<bool?>("OrdCalculateTax")
                        .HasColumnType("bit")
                        .HasColumnName("ordCalculateTax");

                    b.Property<int>("OrdCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("ordCompanyId");

                    b.Property<int?>("OrdCompanyPersonId")
                        .HasColumnType("int")
                        .HasColumnName("ordCompanyPersonId");

                    b.Property<string>("OrdDate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("ordDate");

                    b.Property<DateTime?>("OrdDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("ordDateTime");

                    b.Property<string>("OrdDay")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ordDay");

                    b.Property<string>("OrdDeliveryDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("ordDeliveryDate");

                    b.Property<DateTime?>("OrdDeliveryDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("ordDeliveryDateTime");

                    b.Property<string>("OrdDeliveryTime")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ordDeliveryTime");

                    b.Property<string>("OrdDescriptionI")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ordDescriptionI");

                    b.Property<int?>("OrdDescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("ordDescriptionId");

                    b.Property<string>("OrdDescriptionIi")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ordDescriptionII");

                    b.Property<decimal?>("OrdDiscount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordDiscount");

                    b.Property<decimal?>("OrdDiscountPercent")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordDiscountPercent");

                    b.Property<string>("OrdDiscountTitle")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordDiscountTitle");

                    b.Property<int?>("OrdFirstRegisterUserId")
                        .HasColumnType("int")
                        .HasColumnName("ordFirstRegisterUserId");

                    b.Property<int?>("OrdGuarantyId")
                        .HasColumnType("int")
                        .HasColumnName("ordGuarantyId");

                    b.Property<string>("OrdImportDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("ordImportDate");

                    b.Property<DateTime?>("OrdImportDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("ordImportDateTime");

                    b.Property<decimal?>("OrdInstallAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordInstallAmount");

                    b.Property<bool?>("OrdIsFixed")
                        .HasColumnType("bit")
                        .HasColumnName("ordIsFixed");

                    b.Property<bool?>("OrdIsVerified")
                        .HasColumnType("bit")
                        .HasColumnName("ordIsVerified");

                    b.Property<int?>("OrdItemCount")
                        .HasColumnType("int")
                        .HasColumnName("ordItemCount");

                    b.Property<decimal?>("OrdItemsAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordItemsAmount");

                    b.Property<string>("OrdLinkAccCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ordLinkAccCode");

                    b.Property<int?>("OrdLinkAccCodeId")
                        .HasColumnType("int")
                        .HasColumnName("ordLinkAccCodeId");

                    b.Property<int?>("OrdLinkAccOrderId")
                        .HasColumnType("int")
                        .HasColumnName("ordLinkAccOrderId");

                    b.Property<string>("OrdLinkAccOrderNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ordLinkAccOrderNumber");

                    b.Property<int?>("OrdLinkAccVoucherId")
                        .HasColumnType("int")
                        .HasColumnName("ordLinkAccVoucherId");

                    b.Property<string>("OrdLinkAccVoucherNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ordLinkAccVoucherNumber");

                    b.Property<int?>("OrdLlogoId")
                        .HasColumnType("int")
                        .HasColumnName("ordLLogoId");

                    b.Property<string>("OrdNote")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ordNote");

                    b.Property<long>("OrdNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("ordNumber");

                    b.Property<int?>("OrdPrintFormatId")
                        .HasColumnType("int")
                        .HasColumnName("ordPrintFormatId");

                    b.Property<int?>("OrdProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ordProjectId");

                    b.Property<int?>("OrdReferUserId")
                        .HasColumnType("int")
                        .HasColumnName("ordReferUserId");

                    b.Property<int?>("OrdRlogoId")
                        .HasColumnType("int")
                        .HasColumnName("ordRLogoId");

                    b.Property<decimal?>("OrdRound")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordRound");

                    b.Property<string>("OrdSerial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ordSerial");

                    b.Property<int?>("OrdSettlementTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ordSettlementTypeId");

                    b.Property<int?>("OrdSignatureId")
                        .HasColumnType("int")
                        .HasColumnName("ordSignatureId");

                    b.Property<string>("OrdSigningI")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordSigningI");

                    b.Property<string>("OrdSigningIi")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordSigningII");

                    b.Property<string>("OrdSigningIii")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordSigningIII");

                    b.Property<string>("OrdSpecialWord")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordSpecialWord");

                    b.Property<int?>("OrdStatusId")
                        .HasColumnType("int")
                        .HasColumnName("ordStatusId")
                        .HasDefaultValueSql("(1)");

                    b.Property<string>("OrdSubject")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordSubject");

                    b.Property<decimal?>("OrdSumAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordSumAmount");

                    b.Property<decimal?>("OrdTax")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordTax");

                    b.Property<decimal?>("OrdTaxIndex")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordTaxIndex");

                    b.Property<string>("OrdTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ordTime");

                    b.Property<string>("OrdTitle")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordTitle");

                    b.Property<decimal?>("OrdTotalAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordTotalAmount");

                    b.Property<string>("OrdTotalAmountStr")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordTotalAmountStr");

                    b.Property<decimal?>("OrdTransportation")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordTransportation");

                    b.Property<int?>("OrdVerificationWorkFlowId")
                        .HasColumnType("int")
                        .HasColumnName("ordVerificationWorkFlowId");

                    b.Property<DateTime?>("OrdVerifiedRegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ordVerifiedRegisterDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("OrdVerifiedRegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("ordVerifiedRegisterDatePersian");

                    b.Property<int?>("OrdVerifierId")
                        .HasColumnType("int")
                        .HasColumnName("ordVerifierId");

                    b.Property<int?>("OrdVerifierRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ordVerifierRequestId");

                    b.Property<string>("OrdcmpTitle")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordcmpTitle");

                    b.Property<int?>("OrderOprId")
                        .HasColumnType("int")
                        .HasColumnName("OrderOprID");

                    b.Property<int?>("PreOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PreOrderVerifierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrdCompanyId")
                        .HasDatabaseName("IX_WSOrder_CompanyId");

                    b.HasIndex("OrdCompanyPersonId")
                        .HasDatabaseName("IX_WSOrder_CompanyPersonId");

                    b.HasIndex("OrdFirstRegisterUserId");

                    b.HasIndex("OrdGuarantyId");

                    b.HasIndex("OrdLlogoId");

                    b.HasIndex("OrdPrintFormatId");

                    b.HasIndex("OrdProjectId")
                        .HasDatabaseName("IX_WSOrder_ProjectId");

                    b.HasIndex("OrdReferUserId");

                    b.HasIndex("OrdRlogoId");

                    b.HasIndex("OrdSettlementTypeId");

                    b.HasIndex("OrdSignatureId");

                    b.HasIndex("OrdStatusId");

                    b.HasIndex("OrdVerificationWorkFlowId");

                    b.HasIndex("OrdVerifierId");

                    b.HasIndex("OrdVerifierRequestId");

                    b.HasIndex("OrderOprId");

                    b.HasIndex("PreOrderId");

                    b.HasIndex("PreOrderVerifierId");

                    b.HasIndex("UserId");

                    b.ToTable("WSOrder");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderCommissionPayTypes", b =>
                {
                    b.Property<int>("OrderCommissionPayTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CommPayTypeDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("CommPayTypeTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("OrderCommissionPayTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSOrderCommissionPayTypes");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderCommissionPayTypesLang", b =>
                {
                    b.Property<int>("WsorderCommissionPayTypeLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSOrderCommissionPayTypeLangID")
                        .UseIdentityColumn();

                    b.Property<string>("CommPayTypeDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("CommPayTypeTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("OrderCommissionPayTypeId")
                        .HasColumnType("int");

                    b.HasKey("WsorderCommissionPayTypeLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrderCommissionPayTypeId");

                    b.ToTable("WSOrderCommissionPayTypes_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderCommissions", b =>
                {
                    b.Property<int>("OrderCommissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("CommAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("CommBaseAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CommBaseAmountDec")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("CommBaseAmountDecDesc")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("CommCmpId")
                        .HasColumnType("int");

                    b.Property<string>("CommDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime>("CommDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CommDesc")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CommEffectiveDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("CommEffectiveDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("CommIsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("CommIsPaidDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("CommIsPaidDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("CommIsPaidPayRollUserCycleId")
                        .HasColumnType("int");

                    b.Property<int?>("CommIsPaidUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("CommIsVerified")
                        .HasColumnType("bit");

                    b.Property<int>("CommOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("CommPayTypeId")
                        .HasColumnType("int");

                    b.Property<double?>("CommRate")
                        .HasColumnType("float");

                    b.Property<string>("CommRateDesc")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("CommStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CommUserId")
                        .HasColumnType("int");

                    b.Property<string>("CommVerifiedDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime?>("CommVerifiedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("CommVerifierUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("OrderCommissionId");

                    b.HasIndex("CommCmpId");

                    b.HasIndex("CommIsPaidPayRollUserCycleId");

                    b.HasIndex("CommIsPaidUserId");

                    b.HasIndex("CommOrderId");

                    b.HasIndex("CommPayTypeId");

                    b.HasIndex("CommUserId");

                    b.HasIndex("CommVerifierUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSOrderCommissions");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderCommissionsLang", b =>
                {
                    b.Property<int>("WsorderCommissionLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSOrderCommissionLangID")
                        .UseIdentityColumn();

                    b.Property<string>("CommBaseAmountDecDesc")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CommDesc")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CommRateDesc")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("OrderCommissionId")
                        .HasColumnType("int");

                    b.HasKey("WsorderCommissionLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrderCommissionId");

                    b.ToTable("WSOrderCommissions_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderDefaultSetting", b =>
                {
                    b.Property<int>("OrderSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderSettingID")
                        .UseIdentityColumn();

                    b.Property<string>("AccountNumberI")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("AccountNumberIi")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("AccountNumberII");

                    b.Property<string>("AccountShabaNumberI")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("AccountShabaNumberIi")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("AccountShabaNumberII");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("AutoGenerateOrdSerial")
                        .HasColumnType("bit");

                    b.Property<bool?>("CalculateTax")
                        .HasColumnType("bit");

                    b.Property<string>("DescriptionI")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DescriptionIi")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("DescriptionII");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<int?>("GuarantyId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int?>("LeftLogoId")
                        .HasColumnType("int");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("Note")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("OrderOprId")
                        .HasColumnType("int")
                        .HasColumnName("OrderOprID");

                    b.Property<int?>("PrintFormatId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("RightLogoId")
                        .HasColumnType("int");

                    b.Property<string>("SettingTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("SignatureId")
                        .HasColumnType("int");

                    b.Property<string>("SigningI")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SigningIi")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("SigningII");

                    b.Property<string>("SigningIii")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("SigningIII");

                    b.Property<string>("SpecialWord")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("TaxIndex")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Title")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderSettingId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("GuarantyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LeftLogoId");

                    b.HasIndex("OrderOprId");

                    b.HasIndex("PrintFormatId");

                    b.HasIndex("ReferUserId");

                    b.HasIndex("RightLogoId");

                    b.HasIndex("SignatureId");

                    b.HasIndex("UserId");

                    b.ToTable("WSOrderDefaultSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderDefaultSettingLang", b =>
                {
                    b.Property<int>("WsorderDefaultSettingLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSOrderDefaultSettingLangID")
                        .UseIdentityColumn();

                    b.Property<string>("DescriptionI")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DescriptionIi")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("DescriptionII");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Note")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("OrderSettingId")
                        .HasColumnType("int")
                        .HasColumnName("OrderSettingID");

                    b.Property<string>("SettingTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SigningI")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SigningIi")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("SigningII");

                    b.Property<string>("SigningIii")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("SigningIII");

                    b.Property<string>("SpecialWord")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("WsorderDefaultSettingLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrderSettingId");

                    b.ToTable("WSOrderDefaultSetting_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderItemSerials", b =>
                {
                    b.Property<int>("OrderItemSerialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderItemSerialID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("SerialId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Whid")
                        .HasColumnType("int")
                        .HasColumnName("WHId");

                    b.HasKey("OrderItemSerialId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("UserId");

                    b.HasIndex("Whid");

                    b.ToTable("WSOrderItemSerials");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderItemSerialsLang", b =>
                {
                    b.Property<int>("WsorderItemSerialsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSOrderItemSerialsLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("OrderItemSerialId")
                        .HasColumnType("int")
                        .HasColumnName("OrderItemSerialID");

                    b.HasKey("WsorderItemSerialsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrderItemSerialId");

                    b.ToTable("WSOrderItemSerials_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderItems", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderItemID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<bool?>("OrdIcalculateTax")
                        .HasColumnType("bit")
                        .HasColumnName("ordICalculateTax");

                    b.Property<int?>("OrdIcurrencyUnitId")
                        .HasColumnType("int")
                        .HasColumnName("ordICurrencyUnitId");

                    b.Property<string>("OrdIdescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ordIDescription");

                    b.Property<decimal?>("OrdIdiscount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordIDiscount");

                    b.Property<decimal?>("OrdIdiscountI")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordIDiscountI");

                    b.Property<decimal?>("OrdIdiscountIpercent")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordIDiscountIPercent");

                    b.Property<decimal?>("OrdIdiscountPercent")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordIDiscountPercent");

                    b.Property<double?>("OrdIfcr")
                        .HasColumnType("float")
                        .HasColumnName("ordIFCR");

                    b.Property<double?>("OrdIfcri")
                        .HasColumnType("float")
                        .HasColumnName("ordIFCRI");

                    b.Property<int?>("OrdIlinkAccItemId")
                        .HasColumnType("int")
                        .HasColumnName("ordILinkAccItemId");

                    b.Property<bool?>("OrdInotInSum")
                        .HasColumnType("bit")
                        .HasColumnName("ordINotInSum");

                    b.Property<bool?>("OrdInotVisible")
                        .HasColumnType("bit")
                        .HasColumnName("ordINotVisible");

                    b.Property<int?>("OrdIorderView")
                        .HasColumnType("int")
                        .HasColumnName("ordIOrderView");

                    b.Property<int>("OrdIprdId")
                        .HasColumnType("int")
                        .HasColumnName("ordIPrdId");

                    b.Property<int?>("OrdIprdPriceGroupId")
                        .HasColumnType("int")
                        .HasColumnName("ordIPrdPriceGroupID");

                    b.Property<int?>("OrdIprdUnitId")
                        .HasColumnType("int")
                        .HasColumnName("ordIPrdUnitId");

                    b.Property<decimal?>("OrdIprice")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordIPrice");

                    b.Property<decimal?>("OrdIpricePartI")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordIPricePartI");

                    b.Property<decimal?>("OrdIpricePartIi")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordIPricePartII");

                    b.Property<double?>("OrdIpricePartRate")
                        .HasColumnType("float")
                        .HasColumnName("ordIPricePartRate");

                    b.Property<double?>("OrdIquantity")
                        .HasColumnType("float")
                        .HasColumnName("ordIQuantity");

                    b.Property<string>("OrdIquantityDesc")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordIQuantityDesc");

                    b.Property<decimal?>("OrdIround")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordIRound");

                    b.Property<decimal?>("OrdIroundPlus")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordIRoundPlus");

                    b.Property<decimal?>("OrdItax")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordITax");

                    b.Property<decimal?>("OrdItaxIndex")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordITaxIndex");

                    b.Property<decimal?>("OrdItotalPrice")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordITotalPrice");

                    b.Property<string>("OrdItracing")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ordITracing");

                    b.Property<int?>("OrdIwhid")
                        .HasColumnType("int")
                        .HasColumnName("ordIWHId");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrdIcurrencyUnitId");

                    b.HasIndex("OrdIprdId")
                        .HasDatabaseName("IX_WSOrderItems_PrdId");

                    b.HasIndex("OrdIprdUnitId");

                    b.HasIndex("OrdIwhid");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("WSOrderItems");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderItemsLang", b =>
                {
                    b.Property<int>("WsorderItemsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSOrderItemsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("OrdIdescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ordIDescription");

                    b.Property<string>("OrdIquantityDesc")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordIQuantityDesc");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int")
                        .HasColumnName("OrderItemID");

                    b.HasKey("WsorderItemsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("WSOrderItems_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderLang", b =>
                {
                    b.Property<int>("WsorderLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSOrderLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("OrdDescriptionI")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ordDescriptionI");

                    b.Property<string>("OrdDescriptionIi")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ordDescriptionII");

                    b.Property<string>("OrdDiscountTitle")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordDiscountTitle");

                    b.Property<string>("OrdNote")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ordNote");

                    b.Property<string>("OrdSigningI")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordSigningI");

                    b.Property<string>("OrdSigningIi")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordSigningII");

                    b.Property<string>("OrdSigningIii")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordSigningIII");

                    b.Property<string>("OrdSpecialWord")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordSpecialWord");

                    b.Property<string>("OrdSubject")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordSubject");

                    b.Property<string>("OrdTitle")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordTitle");

                    b.Property<string>("OrdTotalAmountStr")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordTotalAmountStr");

                    b.Property<string>("OrdcmpTitle")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ordcmpTitle");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.HasKey("WsorderLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrderId");

                    b.ToTable("WSOrder_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderOpr", b =>
                {
                    b.Property<int>("OrderOprId")
                        .HasColumnType("int")
                        .HasColumnName("OrderOprID");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("DocOprId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OprType")
                        .HasColumnType("int")
                        .HasComment("1=Exit; 2=Enter");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.HasKey("OrderOprId");

                    b.HasIndex("DocOprId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSOrderOpr");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderOprLang", b =>
                {
                    b.Property<int>("WsorderOprLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSOrderOprLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrderOprId")
                        .HasColumnType("int")
                        .HasColumnName("OrderOprID");

                    b.HasKey("WsorderOprLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrderOprId");

                    b.ToTable("WSOrderOpr_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderPaymentTypes", b =>
                {
                    b.Property<int>("OrderPaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<string>("OrdpayType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("ordpayType");

                    b.Property<string>("OrdpayTypeDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ordpayTypeDescription");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderPaymentTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSOrderPaymentTypes");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderPaymentTypesLang", b =>
                {
                    b.Property<int>("WsorderPaymentTypesLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSOrderPaymentTypesLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("OrderPaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("OrdpayType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("ordpayType");

                    b.Property<string>("OrdpayTypeDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ordpayTypeDescription");

                    b.HasKey("WsorderPaymentTypesLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrderPaymentTypeId");

                    b.ToTable("WSOrderPaymentTypes_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderPayments", b =>
                {
                    b.Property<int>("OrderPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ImportDate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("ImportDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<decimal>("OrdpayAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordpayAmount");

                    b.Property<string>("OrdpayBankDocNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ordpayBankDocNumber");

                    b.Property<string>("OrdpayDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("ordpayDescription");

                    b.Property<decimal?>("OrdpayDocAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ordpayDocAmount");

                    b.Property<string>("OrdpayDocDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("ordpayDocDate");

                    b.Property<DateTime?>("OrdpayDocDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("ordpayDocDateTime");

                    b.Property<int?>("OrdpayDocId")
                        .HasColumnType("int")
                        .HasColumnName("ordpayDocId");

                    b.Property<string>("OrdpayDocNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ordpayDocNumber");

                    b.Property<int?>("OrdpayDocTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ordpayDocTypeId");

                    b.Property<DateTime?>("OrdpayFirstRegisteDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ordpayFirstRegisteDate");

                    b.Property<string>("OrdpayFirstRegisteDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("ordpayFirstRegisteDatePersian");

                    b.Property<int?>("OrdpayFirstRegisterUserId")
                        .HasColumnType("int")
                        .HasColumnName("ordpayFirstRegisterUserId");

                    b.Property<int?>("OrdpayLinkAccDetailId")
                        .HasColumnType("int")
                        .HasColumnName("ordpayLinkAccDetailId");

                    b.Property<int?>("OrdpayLinkAccHeaderId")
                        .HasColumnType("int")
                        .HasColumnName("ordpayLinkAccHeaderId");

                    b.Property<string>("OrdpayLinkAccHeaderNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ordpayLinkAccHeaderNumber");

                    b.Property<int?>("OrdpayLinkAccVoucherId")
                        .HasColumnType("int")
                        .HasColumnName("ordpayLinkAccVoucherId");

                    b.Property<string>("OrdpayLinkAccVoucherNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ordpayLinkAccVoucherNumber");

                    b.Property<int>("OrdpayOrderId")
                        .HasColumnType("int")
                        .HasColumnName("ordpayOrderId");

                    b.Property<int>("OrdpayTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ordpayTypeId");

                    b.Property<int?>("PreOrderPaymentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderPaymentId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrdpayFirstRegisterUserId");

                    b.HasIndex("OrdpayOrderId");

                    b.HasIndex("OrdpayTypeId");

                    b.HasIndex("PreOrderPaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("WSOrderPayments");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderPaymentsLang", b =>
                {
                    b.Property<int>("WsorderPaymentsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSOrderPaymentsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("OrderPaymentId")
                        .HasColumnType("int");

                    b.Property<string>("OrdpayDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("ordpayDescription");

                    b.HasKey("WsorderPaymentsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrderPaymentId");

                    b.ToTable("WSOrderPayments_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderStatusId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSOrderStatus");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderStatusLang", b =>
                {
                    b.Property<int>("WsorderStatusLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSOrderStatusLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.HasKey("WsorderStatusLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("WSOrderStatus_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspayCondition", b =>
                {
                    b.Property<int>("PayConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PayConditionID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<string>("PayCondition")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PayConditionId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSPayCondition");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspayConditionLang", b =>
                {
                    b.Property<int>("WspayConditionLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSPayConditionLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PayCondition")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PayConditionId")
                        .HasColumnType("int")
                        .HasColumnName("PayConditionID");

                    b.HasKey("WspayConditionLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PayConditionId");

                    b.ToTable("WSPayCondition_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrder", b =>
                {
                    b.Property<int>("PreOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PreOrderID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("PordAccountNumberI")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordAccountNumberI");

                    b.Property<string>("PordAccountNumberIi")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordAccountNumberII");

                    b.Property<string>("PordAccountShabaNumberI")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordAccountShabaNumberI");

                    b.Property<string>("PordAccountShabaNumberIi")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordAccountShabaNumberII");

                    b.Property<string>("PordAddress")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordAddress");

                    b.Property<bool?>("PordCalculateTax")
                        .HasColumnType("bit")
                        .HasColumnName("pordCalculateTax");

                    b.Property<int?>("PordCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("pordCompanyId");

                    b.Property<int?>("PordCompanyPersonId")
                        .HasColumnType("int")
                        .HasColumnName("pordCompanyPersonId");

                    b.Property<int?>("PordCreditDurationId")
                        .HasColumnType("int")
                        .HasColumnName("pordCreditDurationId");

                    b.Property<string>("PordDate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("pordDate");

                    b.Property<DateTime?>("PordDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("pordDateTime");

                    b.Property<string>("PordDay")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("pordDay");

                    b.Property<string>("PordDeliveryDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("pordDeliveryDate");

                    b.Property<DateTime?>("PordDeliveryDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("pordDeliveryDateTime");

                    b.Property<string>("PordDeliveryTime")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("pordDeliveryTime");

                    b.Property<int?>("PordDeliveryTimeId")
                        .HasColumnType("int")
                        .HasColumnName("pordDeliveryTimeId");

                    b.Property<string>("PordDescriptionI")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("pordDescriptionI");

                    b.Property<int?>("PordDescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("pordDescriptionId");

                    b.Property<string>("PordDescriptionIi")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("pordDescriptionII");

                    b.Property<decimal?>("PordDiscount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordDiscount");

                    b.Property<decimal?>("PordDiscountPercent")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordDiscountPercent");

                    b.Property<string>("PordDiscountTitle")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordDiscountTitle");

                    b.Property<string>("PordEmail")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordEmail");

                    b.Property<string>("PordExpireDate")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("pordExpireDate");

                    b.Property<DateTime?>("PordExpireDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("pordExpireDateTime");

                    b.Property<string>("PordFax")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordFax");

                    b.Property<int?>("PordFirstRegisterUserId")
                        .HasColumnType("int")
                        .HasColumnName("pordFirstRegisterUserId");

                    b.Property<int?>("PordGuarantyId")
                        .HasColumnType("int")
                        .HasColumnName("pordGuarantyId");

                    b.Property<string>("PordImportDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("pordImportDate");

                    b.Property<DateTime?>("PordImportDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("pordImportDateTime");

                    b.Property<decimal?>("PordInstallAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordInstallAmount");

                    b.Property<bool?>("PordIsFixed")
                        .HasColumnType("bit")
                        .HasColumnName("pordIsFixed");

                    b.Property<bool?>("PordIsVerified")
                        .HasColumnType("bit")
                        .HasColumnName("pordIsVerified");

                    b.Property<int?>("PordItemCount")
                        .HasColumnType("int")
                        .HasColumnName("pordItemCount");

                    b.Property<decimal?>("PordItemsAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordItemsAmount");

                    b.Property<int?>("PordLinkAccPreOrderId")
                        .HasColumnType("int")
                        .HasColumnName("pordLinkAccPreOrderId");

                    b.Property<string>("PordLinkAccPreOrderNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("pordLinkAccPreOrderNumber");

                    b.Property<int?>("PordLlogoId")
                        .HasColumnType("int")
                        .HasColumnName("pordLLogoId");

                    b.Property<long>("PordNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("pordNumber");

                    b.Property<int?>("PordPayConditionId")
                        .HasColumnType("int")
                        .HasColumnName("pordPayConditionId");

                    b.Property<int?>("PordPrintFormatId")
                        .HasColumnType("int")
                        .HasColumnName("pordPrintFormatId");

                    b.Property<int?>("PordProjectId")
                        .HasColumnType("int")
                        .HasColumnName("pordProjectId");

                    b.Property<int?>("PordReferUserId")
                        .HasColumnType("int")
                        .HasColumnName("pordReferUserId");

                    b.Property<int?>("PordRlogoId")
                        .HasColumnType("int")
                        .HasColumnName("pordRLogoId");

                    b.Property<decimal?>("PordRound")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordRound");

                    b.Property<int?>("PordSignatureId")
                        .HasColumnType("int")
                        .HasColumnName("pordSignatureId");

                    b.Property<string>("PordSigningI")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordSigningI");

                    b.Property<string>("PordSigningIi")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordSigningII");

                    b.Property<string>("PordSigningIii")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordSigningIII");

                    b.Property<string>("PordSpecialWord")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordSpecialWord");

                    b.Property<int?>("PordStatusId")
                        .HasColumnType("int")
                        .HasColumnName("pordStatusId")
                        .HasDefaultValueSql("(1)");

                    b.Property<string>("PordSubject")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordSubject");

                    b.Property<decimal?>("PordSumAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordSumAmount");

                    b.Property<decimal?>("PordTax")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordTax");

                    b.Property<decimal?>("PordTaxIndex")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordTaxIndex");

                    b.Property<string>("PordTelephone")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordTelephone");

                    b.Property<string>("PordTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("pordTime");

                    b.Property<string>("PordTitle")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordTitle");

                    b.Property<decimal?>("PordTotalAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordTotalAmount");

                    b.Property<string>("PordTotalAmountStr")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordTotalAmountStr");

                    b.Property<decimal?>("PordTransportation")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordTransportation");

                    b.Property<int?>("PordVerificationWorkFlowId")
                        .HasColumnType("int")
                        .HasColumnName("pordVerificationWorkFlowId");

                    b.Property<DateTime?>("PordVerifiedRegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("pordVerifiedRegisterDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PordVerifiedRegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("pordVerifiedRegisterDatePersian");

                    b.Property<int?>("PordVerifierId")
                        .HasColumnType("int")
                        .HasColumnName("pordVerifierId");

                    b.Property<int?>("PordVerifierRequestId")
                        .HasColumnType("int")
                        .HasColumnName("pordVerifierRequestId");

                    b.Property<string>("PordWebSite")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordWebSite");

                    b.Property<string>("PordcmpTitle")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordcmpTitle");

                    b.Property<int?>("PreOrderOprId")
                        .HasColumnType("int")
                        .HasColumnName("PreOrderOprID");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PreOrderId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PordCompanyId")
                        .HasDatabaseName("IX_WSPreOrder_CompanyId");

                    b.HasIndex("PordCompanyPersonId")
                        .HasDatabaseName("IX_WSPreOrder_CompanyPersonId");

                    b.HasIndex("PordCreditDurationId");

                    b.HasIndex("PordDeliveryTimeId");

                    b.HasIndex("PordFirstRegisterUserId");

                    b.HasIndex("PordGuarantyId");

                    b.HasIndex("PordLlogoId");

                    b.HasIndex("PordPayConditionId");

                    b.HasIndex("PordPrintFormatId");

                    b.HasIndex("PordProjectId")
                        .HasDatabaseName("IX_WSPreOrder_ProjectId");

                    b.HasIndex("PordReferUserId");

                    b.HasIndex("PordRlogoId");

                    b.HasIndex("PordSignatureId");

                    b.HasIndex("PordStatusId");

                    b.HasIndex("PordVerificationWorkFlowId");

                    b.HasIndex("PordVerifierId");

                    b.HasIndex("PordVerifierRequestId");

                    b.HasIndex("PreOrderOprId");

                    b.HasIndex("UserId");

                    b.ToTable("WSPreOrder");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderDefaultSetting", b =>
                {
                    b.Property<int>("PreOrderSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PreOrderSettingID")
                        .UseIdentityColumn();

                    b.Property<string>("AccountNumberI")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("AccountNumberIi")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("AccountNumberII");

                    b.Property<string>("AccountShabaNumberI")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("AccountShabaNumberIi")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("AccountShabaNumberII");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("CalculateTax")
                        .HasColumnType("bit");

                    b.Property<int?>("CreditDurationId")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryTimeId")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionI")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DescriptionIi")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("DescriptionII");

                    b.Property<string>("Email")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Fax")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<int?>("GuarantyId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int?>("LeftLogoId")
                        .HasColumnType("int");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("PayConditionId")
                        .HasColumnType("int");

                    b.Property<int?>("PreOrderOprId")
                        .HasColumnType("int")
                        .HasColumnName("PreOrderOprID");

                    b.Property<int?>("PrintFormatId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("RightLogoId")
                        .HasColumnType("int");

                    b.Property<string>("SettingTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("SignatureId")
                        .HasColumnType("int");

                    b.Property<string>("SigningI")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SigningIi")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("SigningII");

                    b.Property<string>("SigningIii")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("SigningIII");

                    b.Property<string>("SpecialWord")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("TaxIndex")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VerificationWorkFlowId")
                        .HasColumnType("int");

                    b.Property<int?>("VerifierRequestId")
                        .HasColumnType("int");

                    b.Property<string>("WebSite")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("PreOrderSettingId");

                    b.HasIndex("CreditDurationId");

                    b.HasIndex("DeliveryTimeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("GuarantyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LeftLogoId");

                    b.HasIndex("PayConditionId");

                    b.HasIndex("PreOrderOprId");

                    b.HasIndex("PrintFormatId");

                    b.HasIndex("ReferUserId");

                    b.HasIndex("RightLogoId");

                    b.HasIndex("SignatureId");

                    b.HasIndex("UserId");

                    b.HasIndex("VerificationWorkFlowId");

                    b.HasIndex("VerifierRequestId");

                    b.ToTable("WSPreOrderDefaultSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderDefaultSettingLang", b =>
                {
                    b.Property<int>("WspreOrderDefaultSettingLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSPreOrderDefaultSettingLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DescriptionI")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("DescriptionIi")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("DescriptionII");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("PreOrderSettingId")
                        .HasColumnType("int")
                        .HasColumnName("PreOrderSettingID");

                    b.Property<string>("SettingTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SigningI")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SigningIi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SigningII");

                    b.Property<string>("SigningIii")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SigningIII");

                    b.Property<string>("SpecialWord")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("WspreOrderDefaultSettingLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PreOrderSettingId");

                    b.ToTable("WSPreOrderDefaultSetting_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderItemSpecification", b =>
                {
                    b.Property<int>("PreOrderItemSpcflId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PreOrderItemSpcflID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("PreOrderItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SpecificationI")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SpecificationIi")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("SpecificationII");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PreOrderItemSpcflId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PreOrderItemId");

                    b.HasIndex("UserId");

                    b.ToTable("WSPreOrderItemSpecification");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderItemSpecificationLang", b =>
                {
                    b.Property<int>("WspreOrderItemSpecificationLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSPreOrderItemSpecificationLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("PreOrderItemSpcflId")
                        .HasColumnType("int")
                        .HasColumnName("PreOrderItemSpcflID");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SpecificationI")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SpecificationIi")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("SpecificationII");

                    b.HasKey("WspreOrderItemSpecificationLangId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSPreOrderItemSpecification_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderItems", b =>
                {
                    b.Property<int>("PreOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PreOrderItemID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<bool?>("PordIcalculateTax")
                        .HasColumnType("bit")
                        .HasColumnName("pordICalculateTax");

                    b.Property<int?>("PordIcurrencyUnitId")
                        .HasColumnType("int")
                        .HasColumnName("pordICurrencyUnitId");

                    b.Property<string>("PordIdescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("pordIDescription");

                    b.Property<decimal?>("PordIdiscount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordIDiscount");

                    b.Property<decimal?>("PordIdiscountI")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordIDiscountI");

                    b.Property<decimal?>("PordIdiscountIpercent")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordIDiscountIPercent");

                    b.Property<decimal?>("PordIdiscountPercent")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordIDiscountPercent");

                    b.Property<double?>("PordIfcr")
                        .HasColumnType("float")
                        .HasColumnName("pordIFCR");

                    b.Property<double?>("PordIfcri")
                        .HasColumnType("float")
                        .HasColumnName("pordIFCRI");

                    b.Property<int?>("PordIlinkAccItemId")
                        .HasColumnType("int")
                        .HasColumnName("pordILinkAccItemId");

                    b.Property<bool?>("PordInotInSum")
                        .HasColumnType("bit")
                        .HasColumnName("pordINotInSum");

                    b.Property<bool?>("PordInotVisible")
                        .HasColumnType("bit")
                        .HasColumnName("pordINotVisible");

                    b.Property<int?>("PordIorderView")
                        .HasColumnType("int")
                        .HasColumnName("pordIOrderView");

                    b.Property<int>("PordIprdId")
                        .HasColumnType("int")
                        .HasColumnName("pordIPrdId");

                    b.Property<int?>("PordIprdPriceGroupId")
                        .HasColumnType("int")
                        .HasColumnName("pordIPrdPriceGroupID");

                    b.Property<int?>("PordIprdUnitId")
                        .HasColumnType("int")
                        .HasColumnName("pordIPrdUnitId");

                    b.Property<decimal?>("PordIprice")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordIPrice");

                    b.Property<double?>("PordIquantity")
                        .HasColumnType("float")
                        .HasColumnName("pordIQuantity");

                    b.Property<string>("PordIquantityDesc")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordIQuantityDesc");

                    b.Property<decimal?>("PordIround")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordIRound");

                    b.Property<decimal?>("PordIroundPlus")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordIRoundPlus");

                    b.Property<decimal?>("PordItax")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordITax");

                    b.Property<decimal?>("PordItaxIndex")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordITaxIndex");

                    b.Property<decimal?>("PordItotalPrice")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordITotalPrice");

                    b.Property<string>("PordItracing")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("pordITracing");

                    b.Property<int?>("PordIwhid")
                        .HasColumnType("int")
                        .HasColumnName("pordIWHId");

                    b.Property<int>("PreOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PreOrderItemId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PordIcurrencyUnitId");

                    b.HasIndex("PordIprdId")
                        .HasDatabaseName("IX_WSPreOrderItems_PrdId");

                    b.HasIndex("PordIprdUnitId");

                    b.HasIndex("PordIwhid");

                    b.HasIndex("PreOrderId")
                        .HasDatabaseName("IX_WSPreOrderItems_OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("WSPreOrderItems");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderItemsLang", b =>
                {
                    b.Property<int>("WspreOrderItemsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSPreOrderItemsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PordIdescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("pordIDescription");

                    b.Property<string>("PordIquantityDesc")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordIQuantityDesc");

                    b.Property<int>("PreOrderItemId")
                        .HasColumnType("int")
                        .HasColumnName("PreOrderItemID");

                    b.HasKey("WspreOrderItemsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PreOrderItemId");

                    b.ToTable("WSPreOrderItems_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderLang", b =>
                {
                    b.Property<int>("WspreOrderLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSPreOrderLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PordAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("pordAddress");

                    b.Property<string>("PordDescriptionI")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)")
                        .HasColumnName("pordDescriptionI");

                    b.Property<string>("PordDescriptionIi")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("pordDescriptionII");

                    b.Property<string>("PordDiscountTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("pordDiscountTitle");

                    b.Property<string>("PordSigningI")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("pordSigningI");

                    b.Property<string>("PordSigningIi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("pordSigningII");

                    b.Property<string>("PordSigningIii")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("pordSigningIII");

                    b.Property<string>("PordSpecialWord")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("pordSpecialWord");

                    b.Property<string>("PordSubject")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordSubject");

                    b.Property<string>("PordTitle")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordTitle");

                    b.Property<string>("PordTotalAmountStr")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pordTotalAmountStr");

                    b.Property<string>("PordcmpTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("pordcmpTitle");

                    b.Property<int>("PreOrderId")
                        .HasColumnType("int")
                        .HasColumnName("PreOrderID");

                    b.HasKey("WspreOrderLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PreOrderId");

                    b.ToTable("WSPreOrder_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderOpr", b =>
                {
                    b.Property<int>("PreOrderOprId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PreOrderOprID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<string>("PreOrderOpr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PreOrderOprId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSPreOrderOpr");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderOprLang", b =>
                {
                    b.Property<int>("WspreOrderOprLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSPreOrderOprLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PreOrderOpr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PreOrderOprId")
                        .HasColumnType("int")
                        .HasColumnName("PreOrderOprID");

                    b.HasKey("WspreOrderOprLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PreOrderOprId");

                    b.ToTable("WSPreOrderOpr_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPayments", b =>
                {
                    b.Property<int>("PreOrderPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ImportDate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("ImportDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<decimal>("PordpayAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordpayAmount");

                    b.Property<string>("PordpayDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("pordpayDescription");

                    b.Property<decimal?>("PordpayDocAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("pordpayDocAmount");

                    b.Property<string>("PordpayDocDate")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("pordpayDocDate");

                    b.Property<DateTime?>("PordpayDocDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("pordpayDocDateTime");

                    b.Property<int?>("PordpayDocId")
                        .HasColumnType("int")
                        .HasColumnName("pordpayDocId");

                    b.Property<string>("PordpayDocNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("pordpayDocNumber");

                    b.Property<int?>("PordpayDocTypeId")
                        .HasColumnType("int")
                        .HasColumnName("pordpayDocTypeId");

                    b.Property<DateTime?>("PordpayFirstRegisteDate")
                        .HasColumnType("datetime")
                        .HasColumnName("pordpayFirstRegisteDate");

                    b.Property<string>("PordpayFirstRegisteDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("pordpayFirstRegisteDatePersian");

                    b.Property<int?>("PordpayFirstRegisterUserId")
                        .HasColumnType("int")
                        .HasColumnName("pordpayFirstRegisterUserId");

                    b.Property<int?>("PordpayLinkAccDetailId")
                        .HasColumnType("int")
                        .HasColumnName("pordpayLinkAccDetailId");

                    b.Property<int?>("PordpayLinkAccHeaderId")
                        .HasColumnType("int")
                        .HasColumnName("pordpayLinkAccHeaderId");

                    b.Property<string>("PordpayLinkAccHeaderNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("pordpayLinkAccHeaderNumber");

                    b.Property<int?>("PordpayLinkAccVoucherId")
                        .HasColumnType("int")
                        .HasColumnName("pordpayLinkAccVoucherId");

                    b.Property<string>("PordpayLinkAccVoucherNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("pordpayLinkAccVoucherNumber");

                    b.Property<int>("PordpayPreOrderId")
                        .HasColumnType("int")
                        .HasColumnName("pordpayPreOrderId");

                    b.Property<int>("PordpayTypeId")
                        .HasColumnType("int")
                        .HasColumnName("pordpayTypeId");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PreOrderPaymentId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PordpayFirstRegisterUserId");

                    b.HasIndex("PordpayPreOrderId");

                    b.HasIndex("PordpayTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("WSPreOrderPayments");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPaymentsLang", b =>
                {
                    b.Property<int>("WspreOrderPaymentsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSPreOrderPaymentsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PordpayDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("pordpayDescription");

                    b.Property<int>("PreOrderPaymentId")
                        .HasColumnType("int");

                    b.HasKey("WspreOrderPaymentsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PreOrderPaymentId");

                    b.ToTable("WSPreOrderPayments_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPrdGroupMustExistReasonGroups", b =>
                {
                    b.Property<int>("PrdGroupMustExistReasonGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<bool?>("NeedReasonTxt")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<string>("PrdGroupMustExistReasonGroupTitle")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PrdGroupMustExistReasonGroupId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSPreOrderPrdGroupMustExistReasonGroups");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPrdGroupMustExistReasonGroupsLang", b =>
                {
                    b.Property<int>("WspreOrderPrdGroupMustExistReasonGroupsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSPreOrderPrdGroupMustExistReasonGroupsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("PrdGroupMustExistReasonGroupId")
                        .HasColumnType("int");

                    b.Property<string>("PrdGroupMustExistReasonGroupTitle")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("WspreOrderPrdGroupMustExistReasonGroupsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrdGroupMustExistReasonGroupId");

                    b.ToTable("WSPreOrderPrdGroupMustExistReasonGroups_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPrdGroupMustExistReasons", b =>
                {
                    b.Property<int>("PrdGroupMustExistReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CmpProjectId")
                        .HasColumnType("int")
                        .HasColumnName("cmpProjectId");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("PrdFirstGroupId")
                        .HasColumnType("int")
                        .HasColumnName("PrdFirstGroupID");

                    b.Property<int>("PrdGroupMustExistReasonGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("PreOrderId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PrdGroupMustExistReasonId");

                    b.HasIndex("CmpProjectId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrdFirstGroupId");

                    b.HasIndex("PrdGroupMustExistReasonGroupId");

                    b.HasIndex("PreOrderId");

                    b.HasIndex("UserId");

                    b.ToTable("WSPreOrderPrdGroupMustExistReasons");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPrdGroupMustExistReasonsLang", b =>
                {
                    b.Property<int>("WspreOrderPrdGroupMustExistReasonsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSPreOrderPrdGroupMustExistReasonsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("PrdGroupMustExistReasonId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("WspreOrderPrdGroupMustExistReasonsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrdGroupMustExistReasonId");

                    b.ToTable("WSPreOrderPrdGroupMustExistReasons_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderStatus", b =>
                {
                    b.Property<int>("PreOrderStatusId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<string>("PreOrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PreOrderStatusId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSPreOrderStatus");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderStatusLang", b =>
                {
                    b.Property<int>("WspreOrderStatusLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSPreOrderStatusLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PreOrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PreOrderStatusId")
                        .HasColumnType("int");

                    b.HasKey("WspreOrderStatusLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PreOrderStatusId");

                    b.ToTable("WSPreOrderStatus_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductColor", b =>
                {
                    b.Property<int>("ProductColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductColorID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ColorDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ColorEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProductColorId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSProductColor");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductColorLang", b =>
                {
                    b.Property<int>("WsproductColorLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSProductColorLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ColorDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ColorEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("ProductColorId")
                        .HasColumnType("int")
                        .HasColumnName("ProductColorID");

                    b.HasKey("WsproductColorLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductColorId");

                    b.ToTable("WSProductColor_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductCost", b =>
                {
                    b.Property<int>("ProductCostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductCostID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CurrencyCost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("CurrencyUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DocDate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("DocDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DocNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("OtherCost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("PrdId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCostGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<decimal?>("ReleasingCost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("SlagCost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("TransportCost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Whid")
                        .HasColumnType("int")
                        .HasColumnName("WHId");

                    b.HasKey("ProductCostId");

                    b.HasIndex("CurrencyUnitId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrdId");

                    b.HasIndex("ProductCostGroupId");

                    b.HasIndex("UserId");

                    b.HasIndex("Whid");

                    b.ToTable("WSProductCost");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductCostGroup", b =>
                {
                    b.Property<int>("ProductCostGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductCostGroupID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<string>("ProductCostGroupDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProductCostGroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ProductCostGroupId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSProductCostGroup");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductCostGroupLang", b =>
                {
                    b.Property<int>("WsproductCostGroupLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSProductCostGroupLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("ProductCostGroupDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductCostGroupId")
                        .HasColumnType("int")
                        .HasColumnName("ProductCostGroupID");

                    b.Property<string>("ProductCostGroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WsproductCostGroupLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductCostGroupId");

                    b.ToTable("WSProductCostGroup_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductCostLang", b =>
                {
                    b.Property<int>("WsproductCostLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSProductCostLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("ProductCostId")
                        .HasColumnType("int")
                        .HasColumnName("ProductCostID");

                    b.HasKey("WsproductCostLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductCostId");

                    b.ToTable("WSProductCost_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductFirstGroup", b =>
                {
                    b.Property<int>("PrdFirstGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrdFirstGroupID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Fgcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FGCode");

                    b.Property<string>("Fgdescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("FGDescription");

                    b.Property<bool?>("FginactiveInBuy")
                        .HasColumnType("bit")
                        .HasColumnName("FGInactiveInBuy");

                    b.Property<bool?>("FginactiveInSale")
                        .HasColumnType("bit")
                        .HasColumnName("FGInactiveInSale");

                    b.Property<string>("Fgname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FGName");

                    b.Property<string>("FgnameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FGNameEn");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("IsRemoved")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("ParsaPooladMenusId")
                        .HasColumnType("int");

                    b.Property<bool?>("PrdGroupMustExistInPreOrder")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PrdFirstGroupId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ParsaPooladMenusId");

                    b.HasIndex("UserId");

                    b.ToTable("WSProductFirstGroup");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductFirstGroupLang", b =>
                {
                    b.Property<int>("WsproductFirstGroupLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSProductFirstGroupLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Fgdescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("FGDescription");

                    b.Property<string>("Fgname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FGName");

                    b.Property<string>("FgnameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FGNameEn");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("PrdFirstGroupId")
                        .HasColumnType("int")
                        .HasColumnName("PrdFirstGroupID");

                    b.HasKey("WsproductFirstGroupLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrdFirstGroupId");

                    b.ToTable("WSProductFirstGroup_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductGallery", b =>
                {
                    b.Property<int>("ProductGalleryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FileName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("FolderName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<int>("PrdId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProductGalleryId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrdId");

                    b.HasIndex("UserId");

                    b.ToTable("WSProductGallery");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductImportFromExcel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CostCurrencyCost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("CostCurrencyUnitId")
                        .HasColumnType("int");

                    b.Property<string>("CostDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CostDocDate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CostDocNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("CostOtherCost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("CostProductCostGroupId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CostReleasingCost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CostSlagCost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CostTransportCost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("DuplicatedIds")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<int?>("FindedPrdId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<string>("InsertedCostIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InsertedPrdId")
                        .HasColumnType("int");

                    b.Property<string>("InsertedPriceIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDuplicate")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrdAutoCharBarCodeTypeId")
                        .HasColumnType("int")
                        .HasColumnName("prdAutoCharBarCodeTypeId");

                    b.Property<string>("PrdAutoCharBarcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PrdAutoNumBarCodeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PrdAutoNumBarcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrdBarCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PrdBarCodeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PrdCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PrdColorId")
                        .HasColumnType("int");

                    b.Property<string>("PrdDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("PrdDesign")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrdFirstBarcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrdFirstSerial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("PrdInactiveInBuy")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrdInactiveInSale")
                        .HasColumnType("bit");

                    b.Property<string>("PrdLatinName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("PrdMaxQty")
                        .HasColumnType("int");

                    b.Property<int?>("PrdMinQty")
                        .HasColumnType("int");

                    b.Property<string>("PrdModel")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PrdName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PrdSecondBarcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrdSecondSerial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrdSize")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PrdSleepDay")
                        .HasColumnType("int");

                    b.Property<string>("PrdThirdBarcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrdThirdSerial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrdType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PrdUnitId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("PriceCooperationPrice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("PriceCurrencyPrice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("PriceCurrencyUnitId")
                        .HasColumnType("int");

                    b.Property<string>("PriceDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("PriceDiscount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("PriceDiscountPrecent")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("PriceDocDate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PriceDocNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("PriceOtherPrice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("PricePercent")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("PriceProductPriceGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("RelationId")
                        .HasColumnType("int");

                    b.Property<bool?>("Selector")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedCostIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedPrdIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedPriceIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CostCurrencyUnitId");

                    b.HasIndex("CostProductCostGroupId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrdColorId");

                    b.HasIndex("PrdUnitId");

                    b.HasIndex("PriceCurrencyUnitId");

                    b.HasIndex("PriceProductPriceGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("WSProductImportFromExcel");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductImportFromExcelFields", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FieldCaption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("FieldSize")
                        .HasColumnType("int");

                    b.Property<string>("FieldType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupNum")
                        .HasColumnType("int");

                    b.Property<bool?>("HaveSearch")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int?>("OrderNum")
                        .HasColumnType("int");

                    b.Property<bool?>("Selector")
                        .HasColumnType("bit");

                    b.Property<string>("SpinsertParamName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SPInsertParamName");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSProductImportFromExcelFields");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductImportFromExcelFieldsLang", b =>
                {
                    b.Property<int>("WsproductImportFromExcelFieldsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSProductImportFromExcelFieldsLangID")
                        .UseIdentityColumn();

                    b.Property<string>("FieldCaption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("WsproductImportFromExcelFieldsLangId");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSProductImportFromExcelFields_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPicture", b =>
                {
                    b.Property<int>("PrdPictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrdPictureID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("PrdFifthPic")
                        .HasColumnType("image");

                    b.Property<string>("PrdFifthPicDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PrdFirstPic")
                        .HasColumnType("image");

                    b.Property<string>("PrdFirstPicDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PrdFourthPic")
                        .HasColumnType("image");

                    b.Property<string>("PrdFourthPicDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PrdId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PrdSecondPic")
                        .HasColumnType("image");

                    b.Property<string>("PrdSecondPicDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PrdThirdPic")
                        .HasColumnType("image");

                    b.Property<string>("PrdThirdPicDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Whid")
                        .HasColumnType("int")
                        .HasColumnName("WHId");

                    b.HasKey("PrdPictureId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrdId");

                    b.HasIndex("UserId");

                    b.HasIndex("Whid");

                    b.ToTable("WSProductPicture");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPictureLang", b =>
                {
                    b.Property<int>("WsproductPictureLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSProductPictureLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PrdFifthPicDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrdFirstPicDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrdFourthPicDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PrdPictureId")
                        .HasColumnType("int")
                        .HasColumnName("PrdPictureID");

                    b.Property<string>("PrdSecondPicDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrdThirdPicDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WsproductPictureLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrdPictureId");

                    b.ToTable("WSProductPicture_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPrice", b =>
                {
                    b.Property<int>("PrdPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrdPriceID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("CooperationPrice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CurrencyPrice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("CurrencyUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscountPrecent")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("DocDate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DocDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DocNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("OtherPrice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("PrdId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("PricePercent")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("ProductPriceGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Whid")
                        .HasColumnType("int")
                        .HasColumnName("WHId");

                    b.HasKey("PrdPriceId");

                    b.HasIndex("CurrencyUnitId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrdId");

                    b.HasIndex("ProductPriceGroupId");

                    b.HasIndex("UserId");

                    b.HasIndex("Whid");

                    b.ToTable("WSProductPrice");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPriceGroup", b =>
                {
                    b.Property<int>("ProductPriceGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductPriceGroupID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<string>("ProductPriceGroupDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProductPriceGroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool?>("ShpdefaultPriceGroup")
                        .HasColumnType("bit")
                        .HasColumnName("SHPDefaultPriceGroup");

                    b.Property<bool?>("ShppriceGroupVisible")
                        .HasColumnType("bit")
                        .HasColumnName("SHPPriceGroupVisible");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("ProductPriceGroupId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSProductPriceGroup");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPriceGroupLang", b =>
                {
                    b.Property<int>("WsproductPriceGroupLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSProductPriceGroupLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("ProductPriceGroupDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductPriceGroupId")
                        .HasColumnType("int")
                        .HasColumnName("ProductPriceGroupID");

                    b.Property<string>("ProductPriceGroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WsproductPriceGroupLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductPriceGroupId");

                    b.ToTable("WSProductPriceGroup_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPriceLang", b =>
                {
                    b.Property<int>("WsproductPriceLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSProductPriceLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("PrdPriceId")
                        .HasColumnType("int")
                        .HasColumnName("PrdPriceID");

                    b.HasKey("WsproductPriceLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrdPriceId");

                    b.ToTable("WSProductPrice_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductSecondGroup", b =>
                {
                    b.Property<int>("PrdSecondGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrdSecondGroupID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("FirstGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("IsRemoved")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Sgcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SGCode");

                    b.Property<string>("Sgdescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("SGDescription");

                    b.Property<bool?>("SginactiveInBuy")
                        .HasColumnType("bit")
                        .HasColumnName("SGInactiveInBuy");

                    b.Property<bool?>("SginactiveInSale")
                        .HasColumnType("bit")
                        .HasColumnName("SGInactiveInSale");

                    b.Property<string>("SglinkAccGroupCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SGLinkAccGroupCode");

                    b.Property<int?>("SglinkAccGroupId")
                        .HasColumnType("int")
                        .HasColumnName("SGLinkAccGroupId");

                    b.Property<string>("Sgname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SGName");

                    b.Property<string>("SgnameEn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SGNameEn");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PrdSecondGroupId");

                    b.HasIndex("FirstGroupId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSProductSecondGroup");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductSecondGroupLang", b =>
                {
                    b.Property<int>("WsproductSecondGroupLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSProductSecondGroupLangId")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("PrdSecondGroupId")
                        .HasColumnType("int")
                        .HasColumnName("PrdSecondGroupID");

                    b.Property<string>("Sgdescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("SGDescription");

                    b.Property<string>("Sgname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SGName");

                    b.Property<string>("SgnameEn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SGNameEn");

                    b.HasKey("WsproductSecondGroupLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrdSecondGroupId");

                    b.ToTable("WSProductSecondGroup_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductShpStockManageTypes", b =>
                {
                    b.Property<int>("ProductShpStockManageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("ProductShpStockManageType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProductShpStockManageTypeId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSProductShpStockManageTypes");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductShpStockManageTypesLang", b =>
                {
                    b.Property<int>("WsproductShpStockManageTypesLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSProductShpStockManageTypesLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("ProductShpStockManageType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductShpStockManageTypeId")
                        .HasColumnType("int");

                    b.HasKey("WsproductShpStockManageTypesLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductShpStockManageTypeId");

                    b.ToTable("WSProductShpStockManageTypes_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductSpecification", b =>
                {
                    b.Property<int>("ProductSpecificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductSpecificationID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("PrdId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SpecificationI")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SpecificationIi")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("SpecificationII");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProductSpecificationId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrdId");

                    b.HasIndex("UserId");

                    b.ToTable("WSProductSpecification");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductSpecificationLang", b =>
                {
                    b.Property<int>("WsproductSpecificationLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSProductSpecificationLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("ProductSpecificationId")
                        .HasColumnType("int")
                        .HasColumnName("ProductSpecificationID");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SpecificationI")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SpecificationIi")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("SpecificationII");

                    b.HasKey("WsproductSpecificationLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductSpecificationId");

                    b.ToTable("WSProductSpecification_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductUnits", b =>
                {
                    b.Property<int>("ProductUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductUnitID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<double?>("Fcr")
                        .HasColumnType("float")
                        .HasColumnName("FCR");

                    b.Property<double?>("Fcri")
                        .HasColumnType("float")
                        .HasColumnName("FCRI");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("QuantityInUnit")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Shpunit")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SHPUnit");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UnitEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UnitLinkAccUnitId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProductUnitId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSProductUnits");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductUnitsLang", b =>
                {
                    b.Property<int>("WsproductUnitsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSProductUnitsLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("ProductUnitId")
                        .HasColumnType("int")
                        .HasColumnName("ProductUnitID");

                    b.Property<string>("Shpunit")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SHPUnit");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UnitEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WsproductUnitsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductUnitId");

                    b.ToTable("WSProductUnits_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Wsproducts", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<int?>("PrdAutoCharBarCodeTypeId")
                        .HasColumnType("int")
                        .HasColumnName("prdAutoCharBarCodeTypeId");

                    b.Property<string>("PrdAutoCharBarcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PrdAutoNumBarCodeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PrdAutoNumBarcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrdBarCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PrdBarCodeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PrdCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PrdColorId")
                        .HasColumnType("int");

                    b.Property<bool?>("PrdCommissionDisable")
                        .HasColumnType("bit");

                    b.Property<double?>("PrdCommissionPercentRate")
                        .HasColumnType("float");

                    b.Property<string>("PrdDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("PrdDesign")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrdFirstBarcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrdFirstSerial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PrdGroupId")
                        .HasColumnType("int")
                        .HasColumnName("PrdGroupID");

                    b.Property<bool?>("PrdInactiveInBuy")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrdInactiveInSale")
                        .HasColumnType("bit");

                    b.Property<string>("PrdLatinName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PrdLinkAccPrdCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PrdLinkAccPrdId")
                        .HasColumnType("int");

                    b.Property<int?>("PrdMaxQty")
                        .HasColumnType("int");

                    b.Property<int?>("PrdMinQty")
                        .HasColumnType("int");

                    b.Property<string>("PrdModel")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PrdName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PrdSecondBarcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrdSecondSerial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrdShpcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PrdSHPCode");

                    b.Property<string>("PrdShpdescription")
                        .HasColumnType("ntext")
                        .HasColumnName("PrdSHPDescription");

                    b.Property<string>("PrdShpdescriptionIi")
                        .HasColumnType("ntext")
                        .HasColumnName("PrdSHPDescriptionII");

                    b.Property<bool?>("PrdShphiddenPriceInNoStock")
                        .HasColumnType("bit")
                        .HasColumnName("PrdSHPHiddenPriceInNoStock");

                    b.Property<bool?>("PrdShpisActive")
                        .HasColumnType("bit")
                        .HasColumnName("PrdSHPIsActive");

                    b.Property<string>("PrdShpmodel")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("PrdSHPModel");

                    b.Property<int?>("PrdShpotherSupplierId")
                        .HasColumnType("int")
                        .HasColumnName("PrdSHPOtherSupplierId");

                    b.Property<bool?>("PrdShpselfSupplier")
                        .HasColumnType("bit")
                        .HasColumnName("PrdSHPSelfSupplier");

                    b.Property<int?>("PrdShpstockManageTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PrdSHPStockManageTypeId");

                    b.Property<double?>("PrdShpstockManualyCount")
                        .HasColumnType("float")
                        .HasColumnName("PrdSHPStockManualyCount");

                    b.Property<string>("PrdShptitle")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("PrdSHPTitle");

                    b.Property<string>("PrdSize")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PrdSleepDay")
                        .HasColumnType("int");

                    b.Property<string>("PrdThirdBarcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrdThirdSerial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrdType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PrdUnitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrdColorId");

                    b.HasIndex("PrdGroupId");

                    b.HasIndex("PrdShpotherSupplierId");

                    b.HasIndex("PrdUnitId");

                    b.HasIndex("UserId");

                    b.ToTable("WSProducts");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductsLang", b =>
                {
                    b.Property<int>("WsproductsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSProductsLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("PrdDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("PrdDesign")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrdLatinName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PrdModel")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PrdName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PrdShpdescription")
                        .HasColumnType("ntext")
                        .HasColumnName("PrdSHPDescription");

                    b.Property<string>("PrdShpdescriptionIi")
                        .HasColumnType("ntext")
                        .HasColumnName("PrdSHPDescriptionII");

                    b.Property<string>("PrdShpmodel")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("PrdSHPModel");

                    b.Property<string>("PrdShptitle")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("PrdSHPTitle");

                    b.Property<string>("PrdSize")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrdType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasKey("WsproductsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductId");

                    b.ToTable("WSProducts_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductsRate", b =>
                {
                    b.Property<int>("ProductRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CrmCompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IPAddress");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("PrdId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("StarRate")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProductRateId");

                    b.HasIndex("CrmCompanyId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrdId");

                    b.HasIndex("UserId");

                    b.ToTable("WSProductsRate");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductsUserDiscount", b =>
                {
                    b.Property<int>("ProductsUserDiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("DiscountAllPrdInGroup")
                        .HasColumnType("bit");

                    b.Property<bool?>("DiscountAllUser")
                        .HasColumnType("bit");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("DiscountProductId")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ProductsUserDiscountDate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime>("ProductsUserDiscountDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProductsUserDiscountId");

                    b.HasIndex("DiscountProductId");

                    b.HasIndex("DiscountUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("WSProductsUserDiscount");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductsUserDiscountLang", b =>
                {
                    b.Property<int>("WsproductsUserDiscountLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSProductsUserDiscountLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("ProductsUserDiscountId")
                        .HasColumnType("int");

                    b.HasKey("WsproductsUserDiscountLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductsUserDiscountId");

                    b.ToTable("WSProductsUserDiscount_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsregisterBarCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("BarCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("BarcodeMode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("DocId")
                        .HasColumnType("int");

                    b.Property<int?>("DocItemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("Opr")
                        .HasColumnType("int")
                        .HasComment("1:Resid-2:Havale-3:Factor");

                    b.Property<int?>("PrdId")
                        .HasColumnType("int");

                    b.Property<string>("PrdName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Whid")
                        .HasColumnType("int")
                        .HasColumnName("WHId");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSRegisterBarCode");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WssettlementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<short?>("Code")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSSettlementType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WssettlementTypeLang", b =>
                {
                    b.Property<int>("WssettlementTypeLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSSettlementTypeLangID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WssettlementTypeLangId");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSSettlementType_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Wssignature", b =>
                {
                    b.Property<int>("SignatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SignatureID")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<byte[]>("Signature")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<string>("SignatureDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SignatureId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("Fpid");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSSignature");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WstmpEnterBarcodeOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BarcodeKind")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("InsertedOk")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("PrdId")
                        .HasColumnType("int");

                    b.Property<int?>("PrdSerialId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("RegisterTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Selector")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WhId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSTmpEnterBarcodeOperation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WstmpEnterDocPrdWithBarcode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("AutoSerial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DocOprId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<int>("Fpid")
                        .HasColumnType("int")
                        .HasColumnName("FPId");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("InsertedOk")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAutoBarcode")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("PrdId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("RegisterTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Selector")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WhId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WSTmpEnterDocPrdWithBarcode");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WstmpUserItemCopy", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("CalculateTax")
                        .HasColumnType("bit");

                    b.Property<string>("CopyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CurrencyUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscountI")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscountIpercent")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("DiscountIPercent");

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double?>("Fcr")
                        .HasColumnType("float")
                        .HasColumnName("FCR");

                    b.Property<double?>("Fcri")
                        .HasColumnType("float")
                        .HasColumnName("FCRI");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<bool?>("NotInSum")
                        .HasColumnType("bit");

                    b.Property<bool?>("NotVisible")
                        .HasColumnType("bit");

                    b.Property<int?>("ObjItemId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<int?>("PrdId")
                        .HasColumnType("int");

                    b.Property<int?>("PrdPriceGroupId")
                        .HasColumnType("int")
                        .HasColumnName("PrdPriceGroupID");

                    b.Property<double?>("PrdQuantity")
                        .HasColumnType("float");

                    b.Property<int?>("PrdUnitId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("QuantityDesc")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("TaxIndex")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Tmp1")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("tmp1");

                    b.Property<string>("Tmp2")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("tmp2");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Whid")
                        .HasColumnType("int")
                        .HasColumnName("WHId");

                    b.HasKey("ItemId");

                    b.HasIndex("CurrencyUnitId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PrdId");

                    b.HasIndex("PrdUnitId");

                    b.HasIndex("UserId");

                    b.HasIndex("Whid");

                    b.ToTable("WSTmpUserItemCopy");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsuserFavproductItems", b =>
                {
                    b.Property<int>("UserFavproductItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("FavprdIorderView")
                        .HasColumnType("int")
                        .HasColumnName("FavprdIOrderView");

                    b.Property<int>("FavprdIprdId")
                        .HasColumnType("int")
                        .HasColumnName("FavprdIPrdId");

                    b.Property<double?>("FavprdIquantity")
                        .HasColumnType("float")
                        .HasColumnName("FavprdIQuantity");

                    b.Property<string>("FavprdIquantityDesc")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("FavprdIQuantityDesc");

                    b.Property<int?>("FavprdIwhid")
                        .HasColumnType("int")
                        .HasColumnName("FavprdIWHId");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool?>("Selector")
                        .HasColumnType("bit");

                    b.Property<int>("UserFavproductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserFavproductItemId");

                    b.HasIndex("FavprdIprdId");

                    b.HasIndex("FavprdIwhid");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserFavproductId");

                    b.HasIndex("UserId");

                    b.ToTable("WSUserFavproductItems");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsuserFavproductItemsLang", b =>
                {
                    b.Property<int>("WsuserFavproductItemsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSUserFavproductItemsLangID")
                        .UseIdentityColumn();

                    b.Property<string>("FavprdIquantityDesc")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("FavprdIQuantityDesc");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("UserFavproductItemId")
                        .HasColumnType("int");

                    b.HasKey("WsuserFavproductItemsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserFavproductItemId");

                    b.ToTable("WSUserFavproductItems_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsuserFavproducts", b =>
                {
                    b.Property<int>("UserFavproductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FavprdDesc")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FavprdTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserFavproductId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSUserFavproducts");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsuserFavproductsLang", b =>
                {
                    b.Property<int>("WsuserFavproductsLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSUserFavproductsLangID")
                        .UseIdentityColumn();

                    b.Property<string>("FavprdDesc")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FavprdTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("UserFavproductId")
                        .HasColumnType("int");

                    b.HasKey("WsuserFavproductsLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserFavproductId");

                    b.ToTable("WSUserFavproducts_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationRequestDetails", b =>
                {
                    b.Property<int>("VerificationRequestDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectType")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VerificationRequestId")
                        .HasColumnType("int");

                    b.Property<int>("VerificationWorkFlowId")
                        .HasColumnType("int");

                    b.Property<int>("VerificationWorkFlowStepId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerifyDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("VerifyText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VerifyUserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("VerificationRequestDetailId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.HasIndex("VerificationRequestId");

                    b.HasIndex("VerificationWorkFlowId");

                    b.HasIndex("VerificationWorkFlowStepId");

                    b.HasIndex("VerifyUserId");

                    b.ToTable("WSVerificationRequestDetails");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationRequestDetailsLang", b =>
                {
                    b.Property<int>("WsverificationRequestDetailLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSVerificationRequestDetailLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("VerificationRequestDetailId")
                        .HasColumnType("int");

                    b.Property<string>("VerifyText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WsverificationRequestDetailLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("VerificationRequestDetailId");

                    b.ToTable("WSVerificationRequestDetails_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationRequests", b =>
                {
                    b.Property<int>("VerificationRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VerificationReqDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("VerificationReqExpired")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("VerificationReqExpiredDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("VerificationReqObjectId")
                        .HasColumnType("int");

                    b.Property<int>("VerificationReqObjectType")
                        .HasColumnType("int");

                    b.Property<string>("VerificationReqText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VerificationReqUserId")
                        .HasColumnType("int");

                    b.Property<int>("VerificationWorkFlowId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("VerificationRequestId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.HasIndex("VerificationReqUserId");

                    b.HasIndex("VerificationWorkFlowId");

                    b.ToTable("WSVerificationRequests");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationRequestsLang", b =>
                {
                    b.Property<int>("WsverificationRequestLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSVerificationRequestLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("VerificationReqText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VerificationRequestId")
                        .HasColumnType("int");

                    b.HasKey("WsverificationRequestLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("VerificationRequestId");

                    b.ToTable("WSVerificationRequests_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationWorkFlowSteps", b =>
                {
                    b.Property<int>("VerificationWorkFlowStepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AlternateVerifyUserId")
                        .HasColumnType("int");

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderView")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VerificationWorkFlowId")
                        .HasColumnType("int");

                    b.Property<string>("VerificationWorkFlowStepTitle")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("VerifyText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VerifyUserId")
                        .HasColumnType("int");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("VerificationWorkFlowStepId");

                    b.HasIndex("AlternateVerifyUserId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.HasIndex("VerificationWorkFlowId");

                    b.HasIndex("VerifyUserId");

                    b.ToTable("WSVerificationWorkFlowSteps");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationWorkFlowStepsLang", b =>
                {
                    b.Property<int>("WsverificationWorkFlowStepLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSVerificationWorkFlowStepLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("VerificationWorkFlowStepId")
                        .HasColumnType("int");

                    b.Property<string>("VerificationWorkFlowStepTitle")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("VerifyText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WsverificationWorkFlowStepLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("VerificationWorkFlowStepId");

                    b.ToTable("WSVerificationWorkFlowSteps_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationWorkFlows", b =>
                {
                    b.Property<int>("VerificationWorkFlowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FirstRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstRegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("FirstRegisterUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Month1")
                        .HasColumnType("smallint");

                    b.Property<int?>("ObjectType")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterDatePersian")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<bool>("SequenceObservation")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VerificationWorkFlowTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("VerifyRequestText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Year1")
                        .HasColumnType("smallint");

                    b.HasKey("VerificationWorkFlowId");

                    b.HasIndex("FirstRegisterUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("WSVerificationWorkFlows");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationWorkFlowsLang", b =>
                {
                    b.Property<int>("WsverificationWorkFlowLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WSVerificationWorkFlowLangID")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<int>("VerificationWorkFlowId")
                        .HasColumnType("int");

                    b.Property<string>("VerificationWorkFlowTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("VerifyRequestText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WsverificationWorkFlowLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("VerificationWorkFlowId");

                    b.ToTable("WSVerificationWorkFlows_Lang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.City", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstUser")
                        .WithMany("City")
                        .HasForeignKey("FirstUserId")
                        .HasConstraintName("FK_City_Users");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("City")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_City_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Province", "Province")
                        .WithMany("City")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_City_Province")
                        .IsRequired();

                    b.Navigation("FirstUser");

                    b.Navigation("Language");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CityLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.City", "CityNavigation")
                        .WithMany("CityLang")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_City_Lang_City")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CityLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_City_Lang_Languages")
                        .IsRequired();

                    b.Navigation("CityNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Country", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("Country")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Country_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("Country")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Country_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CountryLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Country", "CountryNavigation")
                        .WithMany("CountryLang")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Country_Lang_Country")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CountryLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Country_Lang_Languages")
                        .IsRequired();

                    b.Navigation("CountryNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmAddressing", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmAddressingFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmAddressing_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmAddressing")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmAddressing_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmAddressingType", "Type")
                        .WithMany("CrmAddressing")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_CrmAddressing_CrmAddressingType")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmAddressingUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmAddressing_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmAddressingType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmAddressingType")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmAddressingType_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmAddressingType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmAddressingType_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmBankingAccountType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmBankingAccountType")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmBankingAccountType_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmBankingAccountType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmBankingAccountType_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmBankingAccounts", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmBankingAccountType", "AccType")
                        .WithMany("CrmBankingAccounts")
                        .HasForeignKey("AccTypeId")
                        .HasConstraintName("FK_CrmBankingAccounts_CrmBankingAccountType")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmBankingBranches", "Branch")
                        .WithMany("CrmBankingAccounts")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_CrmBankingAccounts_CrmBankingBranches")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmBankingAccounts")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmBankingAccounts_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmBankingAccounts")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmBankingAccounts_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Master")
                        .WithMany("CrmBankingAccounts")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("FK_CrmBankingAccounts_CrmCompany")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "MasterNavigation")
                        .WithMany("CrmBankingAccounts")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("FK_CrmBankingAccounts_CrmCompanyPersons")
                        .IsRequired();

                    b.Navigation("AccType");

                    b.Navigation("Branch");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("Master");

                    b.Navigation("MasterNavigation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmBankingBanks", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmBankingBanks")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmBankingBanks_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmBankingBanks")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmBankingBanks_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmBankingBranches", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmBankingBanks", "Bank")
                        .WithMany("CrmBankingBranches")
                        .HasForeignKey("BankId")
                        .HasConstraintName("FK_CrmBankingBranches_CrmBankingBanks");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmBankingBranches")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmBankingBranches_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmBankingBranches")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmBankingBranches_Languages");

                    b.Navigation("Bank");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCallBlackList", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "Bluser")
                        .WithMany("CrmCallBlackListBluser")
                        .HasForeignKey("BluserId")
                        .HasConstraintName("FK_CrmCallBlackList_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCallBlackListFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCallBlackList_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCallBlackList")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCallBlackList_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCallBlackListUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCallBlackList_Users1");

                    b.Navigation("Bluser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCallHistory", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCallType", "CallType")
                        .WithMany("CrmCallHistory")
                        .HasForeignKey("CallTypeId")
                        .HasConstraintName("FK_CrmCallHistory_CrmCallType")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Company")
                        .WithMany("CrmCallHistory")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CrmCallHistory_CrmCompany")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "CompanyPerson")
                        .WithMany("CrmCallHistory")
                        .HasForeignKey("CompanyPersonId")
                        .HasConstraintName("FK_CrmCallHistory_CrmCompanyPersons")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCallHistoryFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCallHistory_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCallHistory")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCallHistory_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "NoteEditedUser")
                        .WithMany("CrmCallHistoryNoteEditedUser")
                        .HasForeignKey("NoteEditedUserId")
                        .HasConstraintName("FK_CrmCallHistory_Users3");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "NoteRegisterUser")
                        .WithMany("CrmCallHistoryNoteRegisterUser")
                        .HasForeignKey("NoteRegisterUserId")
                        .HasConstraintName("FK_CrmCallHistory_Users2");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "NumberEditedUser")
                        .WithMany("CrmCallHistoryNumberEditedUser")
                        .HasForeignKey("NumberEditedUserId")
                        .HasConstraintName("FK_CrmCallHistory_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCallHistoryUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCallHistory_Users")
                        .IsRequired();

                    b.Navigation("CallType");

                    b.Navigation("Company");

                    b.Navigation("CompanyPerson");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("NoteEditedUser");

                    b.Navigation("NoteRegisterUser");

                    b.Navigation("NumberEditedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCallType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCallType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCallType_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCallType")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCallType_Users");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCallTypeLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCallType", "CallTypeNavigation")
                        .WithMany("CrmCallTypeLang")
                        .HasForeignKey("CallTypeId")
                        .HasConstraintName("FK_CrmCallType_Lang_CrmCallType")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCallTypeLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCallType_Lang_Languages");

                    b.Navigation("CallTypeNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsComments", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "CrmCompany")
                        .WithMany("CrmCmsComments")
                        .HasForeignKey("CrmCompanyId")
                        .HasConstraintName("FK_CrmCmsComments_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCmsCommentsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCmsComments_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCmsComments")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCmsComments_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsObjectTypes", "ObjectType")
                        .WithMany("CrmCmsComments")
                        .HasForeignKey("ObjectTypeId")
                        .HasConstraintName("FK_CrmCmsComments_CrmCmsObjectTypes")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCmsCommentsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCmsComments_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "VerifiedUser")
                        .WithMany("CrmCmsCommentsVerifiedUser")
                        .HasForeignKey("VerifiedUserId")
                        .HasConstraintName("FK_CrmCmsComments_VerifiedUsers");

                    b.Navigation("CrmCompany");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("ObjectType");

                    b.Navigation("User");

                    b.Navigation("VerifiedUser");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsCommentsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsComments", "Comment")
                        .WithMany("CrmCmsCommentsLang")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_CrmCmsComments_Lang_CrmCmsComments")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCmsCommentsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCmsComments_Lang_Languages")
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsFiles", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCmsFilesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCmsFiles_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCmsFiles")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCmsFiles_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsObjectTypes", "ObjectType")
                        .WithMany("CrmCmsFiles")
                        .HasForeignKey("ObjectTypeId")
                        .HasConstraintName("FK_CrmCmsFiles_CrmCmsObjectTypes")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCmsFilesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCmsFiles_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("ObjectType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsFilesLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsFiles", "File")
                        .WithMany("CrmCmsFilesLang")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_CrmCmsFiles_Lang_CrmCmsFiles")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCmsFilesLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCmsFiles_Lang_Languages")
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsGallery", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCmsGalleryFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCmsGallery_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCmsGallery")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCmsGallery_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCmsGalleryUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCmsGallery_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsGalleryItems", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCmsGalleryItemsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCmsGalleryItems_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsGallery", "Gallery")
                        .WithMany("CrmCmsGalleryItems")
                        .HasForeignKey("GalleryId")
                        .HasConstraintName("FK_CrmCmsGalleryItems_CrmCmsGallery")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCmsGalleryItems")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCmsGalleryItems_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCmsGalleryItemsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCmsGalleryItems_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Gallery");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsGalleryItemsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsGalleryItems", "GalleryItem")
                        .WithMany("CrmCmsGalleryItemsLang")
                        .HasForeignKey("GalleryItemId")
                        .HasConstraintName("FK_CrmCmsGalleryItems_Lang_CrmCmsGalleryItems")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCmsGalleryItemsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCmsGalleryItems_Lang_Languages")
                        .IsRequired();

                    b.Navigation("GalleryItem");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsGalleryLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsGallery", "Gallery")
                        .WithMany("CrmCmsGalleryLang")
                        .HasForeignKey("GalleryId")
                        .HasConstraintName("FK_CrmCmsGallery_Lang_CrmCmsGallery")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCmsGalleryLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCmsGallery_Lang_Languages")
                        .IsRequired();

                    b.Navigation("Gallery");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsLikes", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "CrmCompany")
                        .WithMany("CrmCmsLikes")
                        .HasForeignKey("CrmCompanyId")
                        .HasConstraintName("FK_CrmCmsLikes_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCmsLikesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCmsLikes_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCmsLikes")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCmsLikes_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsObjectTypes", "ObjectType")
                        .WithMany("CrmCmsLikes")
                        .HasForeignKey("ObjectTypeId")
                        .HasConstraintName("FK_CrmCmsLikes_CrmCmsObjectTypes")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCmsLikesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCmsLikes_Users")
                        .IsRequired();

                    b.Navigation("CrmCompany");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("ObjectType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsMenus", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyForms", "DyForm")
                        .WithMany("CrmCmsMenus")
                        .HasForeignKey("DyFormId")
                        .HasConstraintName("FK_CrmCmsMenus_CrmDyForms");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCmsMenusFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCmsMenus_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCmsMenus")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCmsMenus_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsNews", "News")
                        .WithMany("CrmCmsMenus")
                        .HasForeignKey("NewsId")
                        .HasConstraintName("FK_CrmCmsMenus_CrmCmsNews");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsPages", "Page")
                        .WithMany("CrmCmsMenus")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_CrmCmsMenus_CrmCmsPages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductFirstGroup", "PrdFirstGroup")
                        .WithMany("CrmCmsMenus")
                        .HasForeignKey("PrdFirstGroupId")
                        .HasConstraintName("FK_CrmCmsMenus_WSProductFirstGroup");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductSecondGroup", "PrdSecondGroup")
                        .WithMany("CrmCmsMenus")
                        .HasForeignKey("PrdSecondGroupId")
                        .HasConstraintName("FK_CrmCmsMenus_WSProductSecondGroup");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCmsMenusUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCmsMenus_Users")
                        .IsRequired();

                    b.Navigation("DyForm");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("News");

                    b.Navigation("Page");

                    b.Navigation("PrdFirstGroup");

                    b.Navigation("PrdSecondGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsMenusLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCmsMenusLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCmsMenus_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsMenus", "Menu")
                        .WithMany("CrmCmsMenusLang")
                        .HasForeignKey("MenuId")
                        .HasConstraintName("FK_CrmCmsMenus_Lang_CrmCmsMenus")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsNews", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCmsNewsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCmsNews_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCmsNews")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCmsNews_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsNewsGroups", "NewsGroup")
                        .WithMany("CrmCmsNews")
                        .HasForeignKey("NewsGroupId")
                        .HasConstraintName("FK_CrmCmsNews_CrmCmsNewsGroups")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCmsNewsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCmsNews_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "VerifiedUser")
                        .WithMany("CrmCmsNewsVerifiedUser")
                        .HasForeignKey("VerifiedUserId")
                        .HasConstraintName("FK_CrmCmsNews_VerifiedUsers");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("NewsGroup");

                    b.Navigation("User");

                    b.Navigation("VerifiedUser");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsNewsGroups", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCmsNewsGroupsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCmsNewsGroups_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCmsNewsGroups")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCmsNewsGroups_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCmsNewsGroupsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCmsNewsGroups_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsNewsGroupsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCmsNewsGroupsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCmsNewsGroups_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsNewsGroups", "NewsGroup")
                        .WithMany("CrmCmsNewsGroupsLang")
                        .HasForeignKey("NewsGroupId")
                        .HasConstraintName("FK_CrmCmsNewsGroups_Lang_CrmCmsNewsGroups")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("NewsGroup");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsNewsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCmsNewsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCmsNews_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsNews", "News")
                        .WithMany("CrmCmsNewsLang")
                        .HasForeignKey("NewsId")
                        .HasConstraintName("FK_CrmCmsNews_Lang_CrmCmsNews")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("News");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsObjectTypes", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCmsObjectTypesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCmsObjectTypes_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCmsObjectTypes")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCmsObjectTypes_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCmsObjectTypesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCmsObjectTypes_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsPages", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyForms", "CrmDyForm")
                        .WithMany("CrmCmsPages")
                        .HasForeignKey("CrmDyFormId")
                        .HasConstraintName("FK_CrmCmsPages_CrmDyForms");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCmsPagesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCmsPages_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCmsPages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCmsPages_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCmsPagesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCmsPages_Users")
                        .IsRequired();

                    b.Navigation("CrmDyForm");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsPagesLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCmsPagesLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCmsPages_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsPages", "Page")
                        .WithMany("CrmCmsPagesLang")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_CrmCmsPages_Lang_CrmCmsPages")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.City", "CmpCity")
                        .WithMany("CrmCompany")
                        .HasForeignKey("CmpCityId")
                        .HasConstraintName("FK_CrmCompany_City");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Country", "CmpCountry")
                        .WithMany("CrmCompany")
                        .HasForeignKey("CmpCountryId")
                        .HasConstraintName("FK_CrmCompany_Country");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroups", "CmpGroup")
                        .WithMany("CrmCompany")
                        .HasForeignKey("CmpGroupId")
                        .HasConstraintName("FK_CrmCompany_CrmCompanyGroups");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIi", "CmpGroupIdIiNavigation")
                        .WithMany("CrmCompany")
                        .HasForeignKey("CmpGroupIdIi")
                        .HasConstraintName("FK_CrmCompany_CrmCompanyGroupsII");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIii", "CmpGroupIdIiiNavigation")
                        .WithMany("CrmCompany")
                        .HasForeignKey("CmpGroupIdIii")
                        .HasConstraintName("FK_CrmCompany_CrmCompanyGroupsIII");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIv", "CmpGroupIdIvNavigation")
                        .WithMany("CrmCompany")
                        .HasForeignKey("CmpGroupIdIv")
                        .HasConstraintName("FK_CrmCompany_CrmCompanyGroupsIV");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "CmpMainPerson")
                        .WithMany("CrmCompany")
                        .HasForeignKey("CmpMainPersonId")
                        .HasConstraintName("FK_CrmCompany_CrmCompanyPersons");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPresentation", "CmpPresentation")
                        .WithMany("CrmCompany")
                        .HasForeignKey("CmpPresentationId")
                        .HasConstraintName("FK_CrmCompany_CrmCompanyPresentation");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Province", "CmpProvince")
                        .WithMany("CrmCompany")
                        .HasForeignKey("CmpProvinceId")
                        .HasConstraintName("FK_CrmCompany_Province");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanySubGroups", "CmpSubGroup")
                        .WithMany("CrmCompany")
                        .HasForeignKey("CmpSubGroupId")
                        .HasConstraintName("FK_CrmCompany_CrmCompanySubGroups");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyTitle", "CmpTitle")
                        .WithMany("CrmCompany")
                        .HasForeignKey("CmpTitleId")
                        .HasConstraintName("FK_CrmCompany_CrmCompanyTitle");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyType", "CmpType")
                        .WithMany("CrmCompany")
                        .HasForeignKey("CmpTypeId")
                        .HasConstraintName("FK_CrmCompany_CrmCompanyType");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompany")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompany_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompany")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompany_Users")
                        .IsRequired();

                    b.Navigation("CmpCity");

                    b.Navigation("CmpCountry");

                    b.Navigation("CmpGroup");

                    b.Navigation("CmpGroupIdIiiNavigation");

                    b.Navigation("CmpGroupIdIiNavigation");

                    b.Navigation("CmpGroupIdIvNavigation");

                    b.Navigation("CmpMainPerson");

                    b.Navigation("CmpPresentation");

                    b.Navigation("CmpProvince");

                    b.Navigation("CmpSubGroup");

                    b.Navigation("CmpTitle");

                    b.Navigation("CmpType");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyForbiddenCity", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmCompanyForbiddenCityCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenCity_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyForbiddenCityFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenCity_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.City", "ForbiddenCity")
                        .WithMany("CrmCompanyForbiddenCity")
                        .HasForeignKey("ForbiddenCityId")
                        .HasConstraintName("FK_CrmCompanyForbiddenCity_City")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyForbiddenCity")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyForbiddenCity_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyForbiddenCityUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenCity_Users1")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("ForbiddenCity");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyForbiddenCompany", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmCompanyForbiddenCompanyCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenCompany_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyForbiddenCompanyFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenCompany_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "ForbiddenCompany")
                        .WithMany("CrmCompanyForbiddenCompany")
                        .HasForeignKey("ForbiddenCompanyId")
                        .HasConstraintName("FK_CrmCompanyForbiddenCompany_CrmCompany")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyForbiddenCompany")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyForbiddenCompany_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyForbiddenCompanyUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenCompany_Users1")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("ForbiddenCompany");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyForbiddenDepartment", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmCompanyForbiddenDepartmentCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenDepartment_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyForbiddenDepartmentFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenDepartment_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyForbiddenDepartment")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyForbiddenDepartment_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyForbiddenDepartmentUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenDepartment_Users1")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyForbiddenGroup", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmCompanyForbiddenGroupCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenGroup_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyForbiddenGroupFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenGroup_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroups", "ForbiddenGroup")
                        .WithMany("CrmCompanyForbiddenGroup")
                        .HasForeignKey("ForbiddenGroupId")
                        .HasConstraintName("FK_CrmCompanyForbiddenGroup_CrmCompanyGroups")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyForbiddenGroup")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyForbiddenGroup_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyForbiddenGroupUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenGroup_Users1")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("ForbiddenGroup");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyForbiddenGroupIv", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmCompanyForbiddenGroupIvCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenGroupIV_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyForbiddenGroupIvFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenGroupIV_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIv", "ForbiddenGroupIv")
                        .WithMany("CrmCompanyForbiddenGroupIv")
                        .HasForeignKey("ForbiddenGroupIvid")
                        .HasConstraintName("FK_CrmCompanyForbiddenGroupIV_CrmCompanyGroupsIV")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyForbiddenGroupIv")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyForbiddenGroupIV_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyForbiddenGroupIvUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenGroupIV_Users1")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("ForbiddenGroupIv");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyForbiddenProvince", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmCompanyForbiddenProvinceCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenProvince_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyForbiddenProvinceFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenProvince_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Province", "ForbiddenProvince")
                        .WithMany("CrmCompanyForbiddenProvince")
                        .HasForeignKey("ForbiddenProvinceId")
                        .HasConstraintName("FK_CrmCompanyForbiddenProvince_Province")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyForbiddenProvince")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyForbiddenProvince_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyForbiddenProvinceUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenProvince_Users1")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("ForbiddenProvince");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyForbiddenSubGroup", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmCompanyForbiddenSubGroupCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenSubGroup_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyForbiddenSubGroupFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenSubGroup_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanySubGroups", "ForbiddenSubGroup")
                        .WithMany("CrmCompanyForbiddenSubGroup")
                        .HasForeignKey("ForbiddenSubGroupId")
                        .HasConstraintName("FK_CrmCompanyForbiddenSubGroup_CrmCompanySubGroups")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyForbiddenSubGroup")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyForbiddenSubGroup_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyForbiddenSubGroupUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyForbiddenSubGroup_Users1")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("ForbiddenSubGroup");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroups", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyGroups")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyGroups_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyGroups")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyGroups_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIi", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyGroupsIi")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyGroupsII_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyGroupsIi")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyGroupsII_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIiLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIi", "CompanyGroupIi")
                        .WithMany("CrmCompanyGroupsIiLang")
                        .HasForeignKey("CompanyGroupIiid")
                        .HasConstraintName("FK_CrmCompanyGroupsII_Lang_CrmCompanyGroupsII")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyGroupsIiLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyGroupsII_Lang_Languages")
                        .IsRequired();

                    b.Navigation("CompanyGroupIi");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIii", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyGroupsIii")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyGroupsIII_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyGroupsIii")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyGroupsIII_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIiiLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIii", "CompanyGroupIii")
                        .WithMany("CrmCompanyGroupsIiiLang")
                        .HasForeignKey("CompanyGroupIiiid")
                        .HasConstraintName("FK_CrmCompanyGroupsIII_Lang_CrmCompanyGroupsIII")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyGroupsIiiLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyGroupsIII_Lang_Languages")
                        .IsRequired();

                    b.Navigation("CompanyGroupIii");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIv", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyGroupsIv")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyGroupsIV_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyGroupsIv")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyGroupsIV_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIvLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIv", "CompanyGroupIv")
                        .WithMany("CrmCompanyGroupsIvLang")
                        .HasForeignKey("CompanyGroupIvid")
                        .HasConstraintName("FK_CrmCompanyGroupsIV_Lang_CrmCompanyGroupsIV")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyGroupsIvLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyGroupsIV_Lang_Languages")
                        .IsRequired();

                    b.Navigation("CompanyGroupIv");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroups", "CompanyGroup")
                        .WithMany("CrmCompanyGroupsLang")
                        .HasForeignKey("CompanyGroupId")
                        .HasConstraintName("FK_CrmCompanyGroups_Lang_CrmCompanyGroups")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyGroupsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyGroups_Lang_Languages")
                        .IsRequired();

                    b.Navigation("CompanyGroup");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsMulti", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyGroupsMulti")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyGroupsMulti_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyGroupsMulti")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyGroupsMulti_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsMultiLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsMulti", "CompanyGroupsMulti")
                        .WithMany("CrmCompanyGroupsMultiLang")
                        .HasForeignKey("CompanyGroupsMultiId")
                        .HasConstraintName("FK_CrmCompanyGroupsMulti_Lang_CrmCompanyGroupsMulti")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyGroupsMultiLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyGroupsMulti_Lang_Languages")
                        .IsRequired();

                    b.Navigation("CompanyGroupsMulti");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyJustAccessCity", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmCompanyJustAccessCityCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessCity_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyJustAccessCityFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessCity_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.City", "JustAccessCity")
                        .WithMany("CrmCompanyJustAccessCity")
                        .HasForeignKey("JustAccessCityId")
                        .HasConstraintName("FK_CrmCompanyJustAccessCity_City")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyJustAccessCity")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyJustAccessCity_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyJustAccessCityUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessCity_Users1")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("JustAccessCity");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyJustAccessCompany", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmCompanyJustAccessCompanyCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessCompany_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyJustAccessCompanyFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessCompany_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "JustAccessCompany")
                        .WithMany("CrmCompanyJustAccessCompany")
                        .HasForeignKey("JustAccessCompanyId")
                        .HasConstraintName("FK_CrmCompanyJustAccessCompany_CrmCompany")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyJustAccessCompany")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyJustAccessCompany_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyJustAccessCompanyUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessCompany_Users1")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("JustAccessCompany");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyJustAccessDepartment", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmCompanyJustAccessDepartmentCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessDepartment_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyJustAccessDepartmentFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessDepartment_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyJustAccessDepartment")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyJustAccessDepartment_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyJustAccessDepartmentUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessDepartment_Users1")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyJustAccessGroup", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmCompanyJustAccessGroupCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessGroup_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyJustAccessGroupFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessGroup_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroups", "JustAccessGroup")
                        .WithMany("CrmCompanyJustAccessGroup")
                        .HasForeignKey("JustAccessGroupId")
                        .HasConstraintName("FK_CrmCompanyJustAccessGroup_CrmCompanyGroups")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyJustAccessGroup")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyJustAccessGroup_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyJustAccessGroupUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessGroup_Users1")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("JustAccessGroup");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyJustAccessGroupIv", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmCompanyJustAccessGroupIvCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessGroupIV_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyJustAccessGroupIvFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessGroupIV_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIv", "JustAccessGroupIv")
                        .WithMany("CrmCompanyJustAccessGroupIv")
                        .HasForeignKey("JustAccessGroupIvid")
                        .HasConstraintName("FK_CrmCompanyJustAccessGroupIV_CrmCompanyGroupsIV")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyJustAccessGroupIv")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyJustAccessGroupIV_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyJustAccessGroupIvUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessGroupIV_Users1")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("JustAccessGroupIv");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyJustAccessProvince", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmCompanyJustAccessProvinceCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessProvince_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyJustAccessProvinceFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessProvince_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Province", "JustAccessProvince")
                        .WithMany("CrmCompanyJustAccessProvince")
                        .HasForeignKey("JustAccessProvinceId")
                        .HasConstraintName("FK_CrmCompanyJustAccessProvince_Province")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyJustAccessProvince")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyJustAccessProvince_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyJustAccessProvinceUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessProvince_Users1")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("JustAccessProvince");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyJustAccessSubGroup", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmCompanyJustAccessSubGroupCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessSubGroup_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyJustAccessSubGroupFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessSubGroup_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanySubGroups", "JustAccessSubGroup")
                        .WithMany("CrmCompanyJustAccessSubGroup")
                        .HasForeignKey("JustAccessSubGroupId")
                        .HasConstraintName("FK_CrmCompanyJustAccessSubGroup_CrmCompanySubGroups")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyJustAccessSubGroup")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyJustAccessSubGroup_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyJustAccessSubGroupUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyJustAccessSubGroup_Users1")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("JustAccessSubGroup");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Company")
                        .WithMany("CrmCompanyLang")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CrmCompany_Lang_CrmCompany")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompany_Lang_Languages")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyLoGo", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Company")
                        .WithMany("CrmCompanyLoGo")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CrmCompanyLoGo_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyLoGoFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyLoGo_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyLoGo")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyLoGo_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyLoGoUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyLoGo_Users")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyMultiGroups", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsMulti", "CompanyGroupsMulti")
                        .WithMany("CrmCompanyMultiGroups")
                        .HasForeignKey("CompanyGroupsMultiId")
                        .HasConstraintName("FK_CrmCompanyMultiGroups_CrmCompanyGroupsMulti")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Company")
                        .WithMany("CrmCompanyMultiGroups")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CrmCompanyMultiGroups_CrmCompany")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyMultiGroupsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyMultiGroups_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyMultiGroups")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyMultiGroups_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyMultiGroupsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyMultiGroups_Users")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyGroupsMulti");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersonsTemplate", "CompanyPersonTemplate")
                        .WithMany("CrmCompanyPersons")
                        .HasForeignKey("CompanyPersonTemplateId")
                        .HasConstraintName("FK_CrmCompanyPersons_CrmCompanyPersonsTemplate");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyPersons")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyPersons_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.City", "PrsCity")
                        .WithMany("CrmCompanyPersons")
                        .HasForeignKey("PrsCityId")
                        .HasConstraintName("FK_CrmCompanyPersons_City");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "PrsCompany")
                        .WithMany("CrmCompanyPersons")
                        .HasForeignKey("PrsCompanyId")
                        .HasConstraintName("FK_CrmCompanyPersons_CrmCompany")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Country", "PrsCountry")
                        .WithMany("CrmCompanyPersons")
                        .HasForeignKey("PrsCountryId")
                        .HasConstraintName("FK_CrmCompanyPersons_Country");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonDepartments", "PrsDepartment")
                        .WithMany("CrmCompanyPersons")
                        .HasForeignKey("PrsDepartmentId")
                        .HasConstraintName("FK_CrmCompanyPersons_CrmPersonDepartments");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Education", "PrsEducation")
                        .WithMany("CrmCompanyPersons")
                        .HasForeignKey("PrsEducationId")
                        .HasConstraintName("FK_CrmCompanyPersons_Education");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonGroups", "PrsGroup")
                        .WithMany("CrmCompanyPersons")
                        .HasForeignKey("PrsGroupId")
                        .HasConstraintName("FK_CrmCompanyPersons_CrmPersonGroups");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonJobs", "PrsJob")
                        .WithMany("CrmCompanyPersons")
                        .HasForeignKey("PrsJobId")
                        .HasConstraintName("FK_CrmCompanyPersons_CrmPersonJobs");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Province", "PrsProvince")
                        .WithMany("CrmCompanyPersons")
                        .HasForeignKey("PrsProvinceId")
                        .HasConstraintName("FK_CrmCompanyPersons_Province");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Sex", "PrsSex")
                        .WithMany("CrmCompanyPersons")
                        .HasForeignKey("PrsSexId")
                        .HasConstraintName("FK_CrmCompanyPersons_Sex");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonTitle", "PrsTitle")
                        .WithMany("CrmCompanyPersons")
                        .HasForeignKey("PrsTitleId")
                        .HasConstraintName("FK_CrmCompanyPersons_CrmPersonTitle");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonType", "PrsType")
                        .WithMany("CrmCompanyPersons")
                        .HasForeignKey("PrsTypeId")
                        .HasConstraintName("FK_CrmCompanyPersons_CrmPersonType");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyPersons")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyPersons_Users")
                        .IsRequired();

                    b.Navigation("CompanyPersonTemplate");

                    b.Navigation("Language");

                    b.Navigation("PrsCity");

                    b.Navigation("PrsCompany");

                    b.Navigation("PrsCountry");

                    b.Navigation("PrsDepartment");

                    b.Navigation("PrsEducation");

                    b.Navigation("PrsGroup");

                    b.Navigation("PrsJob");

                    b.Navigation("PrsProvince");

                    b.Navigation("PrsSex");

                    b.Navigation("PrsTitle");

                    b.Navigation("PrsType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersonsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "CompanyPerson")
                        .WithMany("CrmCompanyPersonsLang")
                        .HasForeignKey("CompanyPersonId")
                        .HasConstraintName("FK_CrmCompanyPersons_Lang_CrmCompanyPersons")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyPersonsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyPersons_Lang_Languages")
                        .IsRequired();

                    b.Navigation("CompanyPerson");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersonsTemplate", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyPersonsTemplate")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyPersonsTemplate_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.City", "PrsCity")
                        .WithMany("CrmCompanyPersonsTemplate")
                        .HasForeignKey("PrsCityId")
                        .HasConstraintName("FK_CrmCompanyPersonsTemplate_City");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Country", "PrsCountry")
                        .WithMany("CrmCompanyPersonsTemplate")
                        .HasForeignKey("PrsCountryId")
                        .HasConstraintName("FK_CrmCompanyPersonsTemplate_Country");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonDepartments", "PrsDepartment")
                        .WithMany("CrmCompanyPersonsTemplate")
                        .HasForeignKey("PrsDepartmentId")
                        .HasConstraintName("FK_CrmCompanyPersonsTemplate_CrmPersonDepartments");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Education", "PrsEducation")
                        .WithMany("CrmCompanyPersonsTemplate")
                        .HasForeignKey("PrsEducationId")
                        .HasConstraintName("FK_CrmCompanyPersonsTemplate_Education");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonGroups", "PrsGroup")
                        .WithMany("CrmCompanyPersonsTemplate")
                        .HasForeignKey("PrsGroupId")
                        .HasConstraintName("FK_CrmCompanyPersonsTemplate_CrmPersonGroups");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonJobs", "PrsJob")
                        .WithMany("CrmCompanyPersonsTemplate")
                        .HasForeignKey("PrsJobId")
                        .HasConstraintName("FK_CrmCompanyPersonsTemplate_CrmPersonJobs");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Province", "PrsProvince")
                        .WithMany("CrmCompanyPersonsTemplate")
                        .HasForeignKey("PrsProvinceId")
                        .HasConstraintName("FK_CrmCompanyPersonsTemplate_Province");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Sex", "PrsSex")
                        .WithMany("CrmCompanyPersonsTemplate")
                        .HasForeignKey("PrsSexId")
                        .HasConstraintName("FK_CrmCompanyPersonsTemplate_Sex");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonTitle", "PrsTitle")
                        .WithMany("CrmCompanyPersonsTemplate")
                        .HasForeignKey("PrsTitleId")
                        .HasConstraintName("FK_CrmCompanyPersonsTemplate_CrmPersonTitle");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonType", "PrsType")
                        .WithMany("CrmCompanyPersonsTemplate")
                        .HasForeignKey("PrsTypeId")
                        .HasConstraintName("FK_CrmCompanyPersonsTemplate_CrmPersonType");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyPersonsTemplate")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyPersonsTemplate_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PrsCity");

                    b.Navigation("PrsCountry");

                    b.Navigation("PrsDepartment");

                    b.Navigation("PrsEducation");

                    b.Navigation("PrsGroup");

                    b.Navigation("PrsJob");

                    b.Navigation("PrsProvince");

                    b.Navigation("PrsSex");

                    b.Navigation("PrsTitle");

                    b.Navigation("PrsType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersonsTemplateLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersonsTemplate", "CompanyPersonTemplate")
                        .WithMany("CrmCompanyPersonsTemplateLang")
                        .HasForeignKey("CompanyPersonTemplateId")
                        .HasConstraintName("FK_CrmCompanyPersonsTemplate_Lang_CrmCompanyPersonsTemplate")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyPersonsTemplateLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyPersonsTemplate_Lang_Languages")
                        .IsRequired();

                    b.Navigation("CompanyPersonTemplate");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersonsTmp", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersonsTemplate", "CompanyPersonTemplate")
                        .WithMany("CrmCompanyPersonsTmp")
                        .HasForeignKey("CompanyPersonTemplateId")
                        .HasConstraintName("FK_CrmCompanyPersonsTmp_CrmCompanyPersonsTemplate");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyPersonsTmpFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyPersonsTmp_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyPersonsTmp")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyPersonsTmp_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.City", "PrsCity")
                        .WithMany("CrmCompanyPersonsTmp")
                        .HasForeignKey("PrsCityId")
                        .HasConstraintName("FK_CrmCompanyPersonsTmp_City");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyTmp", "PrsCompany")
                        .WithMany("CrmCompanyPersonsTmp")
                        .HasForeignKey("PrsCompanyId")
                        .HasConstraintName("FK_CrmCompanyPersonsTmp_CrmCompanyTmp")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Country", "PrsCountry")
                        .WithMany("CrmCompanyPersonsTmp")
                        .HasForeignKey("PrsCountryId")
                        .HasConstraintName("FK_CrmCompanyPersonsTmp_Country");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonDepartments", "PrsDepartment")
                        .WithMany("CrmCompanyPersonsTmp")
                        .HasForeignKey("PrsDepartmentId")
                        .HasConstraintName("FK_CrmCompanyPersonsTmp_CrmPersonDepartments");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Education", "PrsEducation")
                        .WithMany("CrmCompanyPersonsTmp")
                        .HasForeignKey("PrsEducationId")
                        .HasConstraintName("FK_CrmCompanyPersonsTmp_Education");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "PrsFirstRegisterUser")
                        .WithMany("CrmCompanyPersonsTmpPrsFirstRegisterUser")
                        .HasForeignKey("PrsFirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyPersonsTmp_Users3");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonGroups", "PrsGroup")
                        .WithMany("CrmCompanyPersonsTmp")
                        .HasForeignKey("PrsGroupId")
                        .HasConstraintName("FK_CrmCompanyPersonsTmp_CrmPersonGroups");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonJobs", "PrsJob")
                        .WithMany("CrmCompanyPersonsTmp")
                        .HasForeignKey("PrsJobId")
                        .HasConstraintName("FK_CrmCompanyPersonsTmp_CrmPersonJobs");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Province", "PrsProvince")
                        .WithMany("CrmCompanyPersonsTmp")
                        .HasForeignKey("PrsProvinceId")
                        .HasConstraintName("FK_CrmCompanyPersonsTmp_Province");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Sex", "PrsSex")
                        .WithMany("CrmCompanyPersonsTmp")
                        .HasForeignKey("PrsSexId")
                        .HasConstraintName("FK_CrmCompanyPersonsTmp_Sex");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonTitle", "PrsTitle")
                        .WithMany("CrmCompanyPersonsTmp")
                        .HasForeignKey("PrsTitleId")
                        .HasConstraintName("FK_CrmCompanyPersonsTmp_CrmPersonTitle");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonType", "PrsType")
                        .WithMany("CrmCompanyPersonsTmp")
                        .HasForeignKey("PrsTypeId")
                        .HasConstraintName("FK_CrmCompanyPersonsTmp_CrmPersonType");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyPersonsTmpUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyPersonsTmp_Users")
                        .IsRequired();

                    b.Navigation("CompanyPersonTemplate");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("PrsCity");

                    b.Navigation("PrsCompany");

                    b.Navigation("PrsCountry");

                    b.Navigation("PrsDepartment");

                    b.Navigation("PrsEducation");

                    b.Navigation("PrsFirstRegisterUser");

                    b.Navigation("PrsGroup");

                    b.Navigation("PrsJob");

                    b.Navigation("PrsProvince");

                    b.Navigation("PrsSex");

                    b.Navigation("PrsTitle");

                    b.Navigation("PrsType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersonsTmpLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersonsTmp", "CompanyPerson")
                        .WithMany("CrmCompanyPersonsTmpLang")
                        .HasForeignKey("CompanyPersonId")
                        .HasConstraintName("FK_CrmCompanyPersonsTmp_Lang_CrmCompanyPersonsTmp")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyPersonsTmpLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyPersonsTmp_Lang_Languages")
                        .IsRequired();

                    b.Navigation("CompanyPerson");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPictureAlbums", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Company")
                        .WithMany("CrmCompanyPictureAlbums")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CrmCompanyPictureAlbums_CrmCompany")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyPictureAlbumsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyPictureAlbums_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyPictureAlbums")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyPictureAlbums_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyPictureAlbumsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyPictureAlbums_Users")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPictures", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPictureAlbums", "Album")
                        .WithMany("CrmCompanyPictures")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("FK_CrmCompanyPictures_CrmCompanyPictureAlbums")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyPicturesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyPictures_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyPictures")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyPictures_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyPicturesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyPictures_Users")
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPresentation", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyPresentation")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyPresentation_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyPresentation")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyPresentation_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPresentationLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPresentation", "CompanyPresentation")
                        .WithMany("CrmCompanyPresentationLang")
                        .HasForeignKey("CompanyPresentationId")
                        .HasConstraintName("FK_CrmCompanyPresentation_Lang_CrmCompanyPresentation")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyPresentationLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyPresentation_Lang_Languages")
                        .IsRequired();

                    b.Navigation("CompanyPresentation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanySubGroups", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroups", "Group")
                        .WithMany("CrmCompanySubGroups")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_CrmCompanySubGroups_CrmCompanyGroups")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanySubGroups")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanySubGroups_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanySubGroups")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanySubGroups_Users")
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanySubGroupsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanySubGroups", "CompanySubGroup")
                        .WithMany("CrmCompanySubGroupsLang")
                        .HasForeignKey("CompanySubGroupId")
                        .HasConstraintName("FK_CrmCompanySubGroups_Lang_CrmCompanySubGroups")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanySubGroupsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanySubGroups_Lang_Languages")
                        .IsRequired();

                    b.Navigation("CompanySubGroup");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyTitle", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyTitle")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyTitle_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyTitle")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyTitle_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyTitleLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyTitle", "CompanyTitleNavigation")
                        .WithMany("CrmCompanyTitleLang")
                        .HasForeignKey("CompanyTitleId")
                        .HasConstraintName("FK_CrmCompanyTitle_Lang_CrmCompanyTitle")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyTitleLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyTitle_Lang_Languages")
                        .IsRequired();

                    b.Navigation("CompanyTitleNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyTmp", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.City", "CmpCity")
                        .WithMany("CrmCompanyTmp")
                        .HasForeignKey("CmpCityId")
                        .HasConstraintName("FK_CrmCompanyTmp_City");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CmpCoordinateLastUser")
                        .WithMany("CrmCompanyTmpCmpCoordinateLastUser")
                        .HasForeignKey("CmpCoordinateLastUserId")
                        .HasConstraintName("FK_CrmCompanyTmp_Users40");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Country", "CmpCountry")
                        .WithMany("CrmCompanyTmp")
                        .HasForeignKey("CmpCountryId")
                        .HasConstraintName("FK_CrmCompanyTmp_Country");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CmpFirstRegisterUser")
                        .WithMany("CrmCompanyTmpCmpFirstRegisterUser")
                        .HasForeignKey("CmpFirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyTmp_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroups", "CmpGroup")
                        .WithMany("CrmCompanyTmp")
                        .HasForeignKey("CmpGroupId")
                        .HasConstraintName("FK_CrmCompanyTmp_CrmCompanyGroups");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIi", "CmpGroupIdIiNavigation")
                        .WithMany("CrmCompanyTmp")
                        .HasForeignKey("CmpGroupIdIi")
                        .HasConstraintName("FK_CrmCompanyTmp_CrmCompanyGroupsII");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIii", "CmpGroupIdIiiNavigation")
                        .WithMany("CrmCompanyTmp")
                        .HasForeignKey("CmpGroupIdIii")
                        .HasConstraintName("FK_CrmCompanyTmp_CrmCompanyGroupsIII");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIv", "CmpGroupIdIvNavigation")
                        .WithMany("CrmCompanyTmp")
                        .HasForeignKey("CmpGroupIdIv")
                        .HasConstraintName("FK_CrmCompanyTmp_CrmCompanyGroupsIV");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPresentation", "CmpPresentation")
                        .WithMany("CrmCompanyTmp")
                        .HasForeignKey("CmpPresentationId")
                        .HasConstraintName("FK_CrmCompanyTmp_CrmCompanyPresentation");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Province", "CmpProvince")
                        .WithMany("CrmCompanyTmp")
                        .HasForeignKey("CmpProvinceId")
                        .HasConstraintName("FK_CrmCompanyTmp_Province");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CmpReferUser")
                        .WithMany("CrmCompanyTmpCmpReferUser")
                        .HasForeignKey("CmpReferUserId")
                        .HasConstraintName("FK_CrmCompanyTmp_Users4");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanySubGroups", "CmpSubGroup")
                        .WithMany("CrmCompanyTmp")
                        .HasForeignKey("CmpSubGroupId")
                        .HasConstraintName("FK_CrmCompanyTmp_CrmCompanySubGroups");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyTitle", "CmpTitle")
                        .WithMany("CrmCompanyTmp")
                        .HasForeignKey("CmpTitleId")
                        .HasConstraintName("FK_CrmCompanyTmp_CrmCompanyTitle");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyType", "CmpType")
                        .WithMany("CrmCompanyTmp")
                        .HasForeignKey("CmpTypeId")
                        .HasConstraintName("FK_CrmCompanyTmp_CrmCompanyType");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyTmpFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyTmp_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyTmp")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyTmp_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyTmpUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyTmp_Users")
                        .IsRequired();

                    b.Navigation("CmpCity");

                    b.Navigation("CmpCoordinateLastUser");

                    b.Navigation("CmpCountry");

                    b.Navigation("CmpFirstRegisterUser");

                    b.Navigation("CmpGroup");

                    b.Navigation("CmpGroupIdIiiNavigation");

                    b.Navigation("CmpGroupIdIiNavigation");

                    b.Navigation("CmpGroupIdIvNavigation");

                    b.Navigation("CmpPresentation");

                    b.Navigation("CmpProvince");

                    b.Navigation("CmpReferUser");

                    b.Navigation("CmpSubGroup");

                    b.Navigation("CmpTitle");

                    b.Navigation("CmpType");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyTmpLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyTmp", "Company")
                        .WithMany("CrmCompanyTmpLang")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CrmCompanyTmp_Lang_CrmCompanyTmp")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyTmpLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyTmp_Lang_Languages")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyType_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyType")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyType_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyTypeLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyType", "CompanyType")
                        .WithMany("CrmCompanyTypeLang")
                        .HasForeignKey("CompanyTypeId")
                        .HasConstraintName("FK_CrmCompanyType_Lang_CrmCompanyType")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyTypeLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyType_Lang_Languages")
                        .IsRequired();

                    b.Navigation("CompanyType");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyUserForbidden", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmCompanyUserForbiddenCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmCompanyUserForbidden_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmCompanyUserForbiddenFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmCompanyUserForbidden_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "ForbiddenCompany")
                        .WithMany("CrmCompanyUserForbidden")
                        .HasForeignKey("ForbiddenCompanyId")
                        .HasConstraintName("FK_CrmCompanyUserForbidden_CrmCompany")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmCompanyUserForbidden")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmCompanyUserForbidden_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmCompanyUserForbiddenUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmCompanyUserForbidden_Users1")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("ForbiddenCompany");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversation", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "CnvsCompany")
                        .WithMany("CrmConversation")
                        .HasForeignKey("CnvsCompanyId")
                        .HasConstraintName("FK_CrmConversation_CrmCompany")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CnvsFirstRegisterUser")
                        .WithMany("CrmConversationCnvsFirstRegisterUser")
                        .HasForeignKey("CnvsFirstRegisterUserId")
                        .HasConstraintName("FK_CrmConversation_Users2");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "CnvsPerson")
                        .WithMany("CrmConversation")
                        .HasForeignKey("CnvsPersonId")
                        .HasConstraintName("FK_CrmConversation_CrmCompanyPersons");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationPriority", "CnvsPriority")
                        .WithMany("CrmConversation")
                        .HasForeignKey("CnvsPriorityId")
                        .HasConstraintName("FK_CrmConversation_CrmConversationPriority");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", "CnvsProject")
                        .WithMany("CrmConversation")
                        .HasForeignKey("CnvsProjectId")
                        .HasConstraintName("FK_CrmConversation_CrmProjects");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CnvsReferUser")
                        .WithMany("CrmConversationCnvsReferUser")
                        .HasForeignKey("CnvsReferUserId")
                        .HasConstraintName("FK_CrmConversation_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatus", "CnvsStatus")
                        .WithMany("CrmConversation")
                        .HasForeignKey("CnvsStatusId")
                        .HasConstraintName("FK_CrmConversation_CrmConversationStatus");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationTopics", "CnvsTopic")
                        .WithMany("CrmConversation")
                        .HasForeignKey("CnvsTopicId")
                        .HasConstraintName("FK_CrmConversation_CrmConversationTopics");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CnvsUser")
                        .WithMany("CrmConversationCnvsUser")
                        .HasForeignKey("CnvsUserId")
                        .HasConstraintName("FK_CrmConversation_Users");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmConversationFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmConversation_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmConversation")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmConversation_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmConversationUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmConversation_Users3")
                        .IsRequired();

                    b.Navigation("CnvsCompany");

                    b.Navigation("CnvsFirstRegisterUser");

                    b.Navigation("CnvsPerson");

                    b.Navigation("CnvsPriority");

                    b.Navigation("CnvsProject");

                    b.Navigation("CnvsReferUser");

                    b.Navigation("CnvsStatus");

                    b.Navigation("CnvsTopic");

                    b.Navigation("CnvsUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationDefaultContext", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmConversationDefaultContext")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmConversationDefaultContext_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmConversationDefaultContext")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmConversationDefaultContext_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationDefaultContextLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationDefaultContext", "IdNavigation")
                        .WithMany("CrmConversationDefaultContextLang")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_CrmConversationDefaultContext_Lang_CrmConversationDefaultContext")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmConversationDefaultContextLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmConversationDefaultContext_Lang_Languages")
                        .IsRequired();

                    b.Navigation("IdNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversation", "Conversation")
                        .WithMany("CrmConversationLang")
                        .HasForeignKey("ConversationId")
                        .HasConstraintName("FK_CrmConversation_Lang_CrmConversation")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmConversationLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmConversation_Lang_Languages")
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationPriority", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmConversationPriority")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmConversationPriority_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmConversationPriority")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmConversationPriority_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationPriorityLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationPriority", "ConversationPriority")
                        .WithMany("CrmConversationPriorityLang")
                        .HasForeignKey("ConversationPriorityId")
                        .HasConstraintName("FK_CrmConversationPriority_Lang_CrmConversationPriority")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmConversationPriorityLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmConversationPriority_Lang_Languages")
                        .IsRequired();

                    b.Navigation("ConversationPriority");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationReferUsers", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversation", "Conversation")
                        .WithMany("CrmConversationReferUsers")
                        .HasForeignKey("ConversationId")
                        .HasConstraintName("FK_CrmConversationSharedUsers_CrmConversation")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmConversationReferUsersFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmConversationReferUsers_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmConversationReferUsers")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmConversationReferUsers_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationPriority", "Priority")
                        .WithMany("CrmConversationReferUsers")
                        .HasForeignKey("PriorityId")
                        .HasConstraintName("FK_CrmConversationReferUsers_CrmConversationPriority");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "ReferUser")
                        .WithMany("CrmConversationReferUsersReferUser")
                        .HasForeignKey("ReferUserId")
                        .HasConstraintName("FK_CrmConversationReferUsers_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmConversationReferUsersUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmConversationReferUsers_Users1")
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("Priority");

                    b.Navigation("ReferUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatus", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatusGroups", "Group")
                        .WithMany("CrmConversationStatus")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_CrmConversationStatus_CrmConversationStatusGroups");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmConversationStatus")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmConversationStatus_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmConversationStatus")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmConversationStatus_Users")
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatusGroups", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FocnvsReferUser")
                        .WithMany("CrmConversationStatusGroupsFocnvsReferUser")
                        .HasForeignKey("FocnvsReferUserId")
                        .HasConstraintName("FK_CrmConversationStatusGroups_FOCnvsReferUser");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmConversationStatusGroups")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmConversationStatusGroups_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmConversationStatusGroupsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmConversationStatusGroups_Users")
                        .IsRequired();

                    b.Navigation("FocnvsReferUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatusGroupsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatusGroups", "ConversationStatusGroupNavigation")
                        .WithMany("CrmConversationStatusGroupsLang")
                        .HasForeignKey("ConversationStatusGroupId")
                        .HasConstraintName("FK_CrmConversationStatusGroups_Lang_CrmConversationStatusGroups")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmConversationStatusGroupsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmConversationStatusGroups_Lang_Languages")
                        .IsRequired();

                    b.Navigation("ConversationStatusGroupNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatusLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatus", "ConversationStatus")
                        .WithMany("CrmConversationStatusLang")
                        .HasForeignKey("ConversationStatusId")
                        .HasConstraintName("FK_CrmConversationStatus_Lang_CrmConversationStatus")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmConversationStatusLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmConversationStatus_Lang_Languages")
                        .IsRequired();

                    b.Navigation("ConversationStatus");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationTmp", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyTmp", "CnvsCompany")
                        .WithMany("CrmConversationTmp")
                        .HasForeignKey("CnvsCompanyId")
                        .HasConstraintName("FK_CrmConversationTmp_CrmCompanyTmp")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CnvsFirstRegisterUser")
                        .WithMany("CrmConversationTmpCnvsFirstRegisterUser")
                        .HasForeignKey("CnvsFirstRegisterUserId")
                        .HasConstraintName("FK_CrmConversationTmp_Users2");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersonsTmp", "CnvsPerson")
                        .WithMany("CrmConversationTmp")
                        .HasForeignKey("CnvsPersonId")
                        .HasConstraintName("FK_CrmConversationTmp_CrmCompanyPersonsTmp");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationPriority", "CnvsPriority")
                        .WithMany("CrmConversationTmp")
                        .HasForeignKey("CnvsPriorityId")
                        .HasConstraintName("FK_CrmConversationTmp_CrmConversationPriority");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectsTmp", "CnvsProject")
                        .WithMany("CrmConversationTmp")
                        .HasForeignKey("CnvsProjectId")
                        .HasConstraintName("FK_CrmConversationTmp_CrmProjectsTmp");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CnvsReferUser")
                        .WithMany("CrmConversationTmpCnvsReferUser")
                        .HasForeignKey("CnvsReferUserId")
                        .HasConstraintName("FK_CrmConversationTmp_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatus", "CnvsStatus")
                        .WithMany("CrmConversationTmp")
                        .HasForeignKey("CnvsStatusId")
                        .HasConstraintName("FK_CrmConversationTmp_CrmConversationStatus");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationTopics", "CnvsTopic")
                        .WithMany("CrmConversationTmp")
                        .HasForeignKey("CnvsTopicId")
                        .HasConstraintName("FK_CrmConversationTmp_CrmConversationTopics");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CnvsUser")
                        .WithMany("CrmConversationTmpCnvsUser")
                        .HasForeignKey("CnvsUserId")
                        .HasConstraintName("FK_CrmConversationTmp_Users");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmConversationTmpFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmConversationTmp_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmConversationTmp")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmConversationTmp_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmConversationTmpUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmConversationTmp_Users3")
                        .IsRequired();

                    b.Navigation("CnvsCompany");

                    b.Navigation("CnvsFirstRegisterUser");

                    b.Navigation("CnvsPerson");

                    b.Navigation("CnvsPriority");

                    b.Navigation("CnvsProject");

                    b.Navigation("CnvsReferUser");

                    b.Navigation("CnvsStatus");

                    b.Navigation("CnvsTopic");

                    b.Navigation("CnvsUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationTmpLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationTmp", "Conversation")
                        .WithMany("CrmConversationTmpLang")
                        .HasForeignKey("ConversationId")
                        .HasConstraintName("FK_CrmConversationTmp_Lang_CrmConversationTmp")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmConversationTmpLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmConversationTmp_Lang_Languages")
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationTopics", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmConversationTopics")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmConversationTopics_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmConversationTopics")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmConversationTopics_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationTopicsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationTopics", "ConversationTopics")
                        .WithMany("CrmConversationTopicsLang")
                        .HasForeignKey("ConversationTopicsId")
                        .HasConstraintName("FK_CrmConversationTopics_Lang_CrmConversationTopics")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmConversationTopicsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmConversationTopics_Lang_Languages")
                        .IsRequired();

                    b.Navigation("ConversationTopics");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldMasterValueDetails", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CheckerUser")
                        .WithMany("CrmDyFormFieldMasterValueDetailsCheckerUser")
                        .HasForeignKey("CheckerUserId")
                        .HasConstraintName("FK_CrmDyFormFieldMasterValueDetails_CheckerUsers");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmDyFormFieldMasterValueDetailsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmDyFormFieldMasterValueDetails_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyForms", "Form")
                        .WithMany("CrmDyFormFieldMasterValueDetails")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_CrmDyFormFieldMasterValueDetails_CrmDyForms")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmDyFormFieldMasterValueDetails")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmDyFormFieldMasterValueDetails_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldMasterValues", "MasterValue")
                        .WithMany("CrmDyFormFieldMasterValueDetails")
                        .HasForeignKey("MasterValueId")
                        .HasConstraintName("FK_CrmDyFormFieldMasterValueDetails_CrmDyFormFieldMasterValues")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmDyFormFieldMasterValueDetailsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmDyFormFieldMasterValueDetails_Users")
                        .IsRequired();

                    b.Navigation("CheckerUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Form");

                    b.Navigation("Language");

                    b.Navigation("MasterValue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldMasterValues", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CheckerUser")
                        .WithMany("CrmDyFormFieldMasterValuesCheckerUser")
                        .HasForeignKey("CheckerUserId")
                        .HasConstraintName("FK_CrmDyFormFieldMasterValues_CheckerUsers");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Company")
                        .WithMany("CrmDyFormFieldMasterValues")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CrmDyFormFieldMasterValues_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "CompanyPerson")
                        .WithMany("CrmDyFormFieldMasterValues")
                        .HasForeignKey("CompanyPersonId")
                        .HasConstraintName("FK_CrmDyFormFieldMasterValues_CrmCompanyPersons");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversation", "Conversation")
                        .WithMany("CrmDyFormFieldMasterValues")
                        .HasForeignKey("ConversationId")
                        .HasConstraintName("FK_CrmDyFormFieldMasterValues_CrmConversation");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmDyFormFieldMasterValuesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmDyFormFieldMasterValues_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyForms", "Form")
                        .WithMany("CrmDyFormFieldMasterValues")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_CrmDyFormFieldMasterValues_CrmDyForms")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmDyFormFieldMasterValues")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmDyFormFieldMasterValues_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", "Project")
                        .WithMany("CrmDyFormFieldMasterValues")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_CrmDyFormFieldMasterValues_CrmProjects");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmDyFormFieldMasterValuesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmDyFormFieldMasterValues_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormWorkflows", "Workflow")
                        .WithMany("CrmDyFormFieldMasterValues")
                        .HasForeignKey("WorkflowId")
                        .HasConstraintName("FK_CrmDyFormFieldMasterValues_CrmDyFormWorkflows");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormWorkflowSteps", "WorkflowStep")
                        .WithMany("CrmDyFormFieldMasterValues")
                        .HasForeignKey("WorkflowStepId")
                        .HasConstraintName("FK_CrmDyFormFieldMasterValues_CrmDyFormWorkflowSteps");

                    b.Navigation("CheckerUser");

                    b.Navigation("Company");

                    b.Navigation("CompanyPerson");

                    b.Navigation("Conversation");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Form");

                    b.Navigation("Language");

                    b.Navigation("Project");

                    b.Navigation("User");

                    b.Navigation("Workflow");

                    b.Navigation("WorkflowStep");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldTypes", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmDyFormFieldTypesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmDyFormFieldTypes_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmDyFormFieldTypes")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmDyFormFieldTypes_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmDyFormFieldTypesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmDyFormFieldTypes_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldTypesLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldTypes", "FieldType")
                        .WithMany("CrmDyFormFieldTypesLang")
                        .HasForeignKey("FieldTypeId")
                        .HasConstraintName("FK_CrmDyFormFieldTypes_Lang_CrmDyFormFieldTypes")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmDyFormFieldTypesLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmDyFormFieldTypes_Lang_Languages")
                        .IsRequired();

                    b.Navigation("FieldType");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldValues", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Company")
                        .WithMany("CrmDyFormFieldValues")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CrmDyFormFieldValues_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "CompanyPerson")
                        .WithMany("CrmDyFormFieldValues")
                        .HasForeignKey("CompanyPersonId")
                        .HasConstraintName("FK_CrmDyFormFieldValues_CrmCompanyPersons");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversation", "Conversation")
                        .WithMany("CrmDyFormFieldValues")
                        .HasForeignKey("ConversationId")
                        .HasConstraintName("FK_CrmDyFormFieldValues_CrmConversation");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFields", "Field")
                        .WithMany("CrmDyFormFieldValues")
                        .HasForeignKey("FieldId")
                        .HasConstraintName("FK_CrmDyFormFieldValues_CrmDyFormFields")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmDyFormFieldValuesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmDyFormFieldValues_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyForms", "Form")
                        .WithMany("CrmDyFormFieldValues")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_CrmDyFormFieldValues_CrmDyForms")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmDyFormFieldValues")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmDyFormFieldValues_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldMasterValues", "MasterValue")
                        .WithMany("CrmDyFormFieldValues")
                        .HasForeignKey("MasterValueId")
                        .HasConstraintName("FK_CrmDyFormFieldValues_CrmDyFormFieldMasterValues")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", "Project")
                        .WithMany("CrmDyFormFieldValues")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_CrmDyFormFieldValues_CrmProjects");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmDyFormFieldValuesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmDyFormFieldValues_Users")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyPerson");

                    b.Navigation("Conversation");

                    b.Navigation("Field");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Form");

                    b.Navigation("Language");

                    b.Navigation("MasterValue");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldValuesLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldValues", "FieldValue")
                        .WithMany("CrmDyFormFieldValuesLang")
                        .HasForeignKey("FieldValueId")
                        .HasConstraintName("FK_CrmDyFormFieldValues_Lang_CrmDyFormFieldValues")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmDyFormFieldValuesLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmDyFormFieldValues_Lang_Languages")
                        .IsRequired();

                    b.Navigation("FieldValue");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFields", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldTypes", "FieldType")
                        .WithMany("CrmDyFormFields")
                        .HasForeignKey("FieldTypeId")
                        .HasConstraintName("FK_CrmDyFormFields_CrmDyFormFieldTypes");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmDyFormFieldsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmDyFormFields_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyForms", "Form")
                        .WithMany("CrmDyFormFields")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_CrmDyFormFields_CrmDyForms")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmDyFormFields")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmDyFormFields_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormRegularExpressions", "RegularExpression")
                        .WithMany("CrmDyFormFields")
                        .HasForeignKey("RegularExpressionId")
                        .HasConstraintName("FK_CrmDyFormFields_CrmDyFormRegularExpressions");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmDyFormFieldsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmDyFormFields_Users")
                        .IsRequired();

                    b.Navigation("FieldType");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Form");

                    b.Navigation("Language");

                    b.Navigation("RegularExpression");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFields", "Field")
                        .WithMany("CrmDyFormFieldsLang")
                        .HasForeignKey("FieldId")
                        .HasConstraintName("FK_CrmDyFormFields_Lang_CrmDyFormFields")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmDyFormFieldsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmDyFormFields_Lang_Languages")
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormRegularExpressions", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldTypes", "FieldType")
                        .WithMany("CrmDyFormRegularExpressions")
                        .HasForeignKey("FieldTypeId")
                        .HasConstraintName("FK_CrmDyFormRegularExpressions_CrmDyFormFieldTypes")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmDyFormRegularExpressionsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmDyFormRegularExpressions_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmDyFormRegularExpressions")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmDyFormRegularExpressions_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmDyFormRegularExpressionsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmDyFormRegularExpressions_Users")
                        .IsRequired();

                    b.Navigation("FieldType");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormRegularExpressionsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmDyFormRegularExpressionsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmDyFormRegularExpressions_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormRegularExpressions", "RegularExpression")
                        .WithMany("CrmDyFormRegularExpressionsLang")
                        .HasForeignKey("RegularExpressionId")
                        .HasConstraintName("FK_CrmDyFormRegularExpressions_Lang_CrmDyFormRegularExpressions")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("RegularExpression");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormUserAccess", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmDyFormUserAccessCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmDyFormUserAccess_CrmUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmDyFormUserAccessFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmDyFormUserAccess_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyForms", "Form")
                        .WithMany("CrmDyFormUserAccess")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_CrmDyFormUserAccess_CrmDyForms")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmDyFormUserAccess")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmDyFormUserAccess_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmDyFormUserAccessUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmDyFormUserAccess_Users")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Form");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormWorkflowSteps", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmDyFormWorkflowStepsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmDyFormWorkflowSteps_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmDyFormWorkflowSteps")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmDyFormWorkflowSteps_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysRolls", "ReferRoll")
                        .WithMany("CrmDyFormWorkflowSteps")
                        .HasForeignKey("ReferRollId")
                        .HasConstraintName("FK_CrmDyFormWorkflowSteps_CrmsysRolls");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyForms", "SubForm")
                        .WithMany("CrmDyFormWorkflowSteps")
                        .HasForeignKey("SubFormId")
                        .HasConstraintName("FK_CrmDyFormWorkflowSteps_CrmDyForms")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmDyFormWorkflowStepsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmDyFormWorkflowSteps_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormWorkflows", "Workflow")
                        .WithMany("CrmDyFormWorkflowSteps")
                        .HasForeignKey("WorkflowId")
                        .HasConstraintName("FK_CrmDyFormWorkflowSteps_CrmDyFormWorkflows")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("ReferRoll");

                    b.Navigation("SubForm");

                    b.Navigation("User");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormWorkflowStepsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormWorkflowSteps", "FormWorkflowStep")
                        .WithMany("CrmDyFormWorkflowStepsLang")
                        .HasForeignKey("FormWorkflowStepId")
                        .HasConstraintName("FK_CrmDyFormWorkflowSteps_Lang_CrmDyFormWorkflowSteps")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmDyFormWorkflowStepsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmDyFormWorkflowSteps_Lang_Languages")
                        .IsRequired();

                    b.Navigation("FormWorkflowStep");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormWorkflows", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyForms", "DyForm")
                        .WithMany("CrmDyFormWorkflows")
                        .HasForeignKey("DyFormId")
                        .HasConstraintName("FK_CrmDyFormWorkflows_CrmDyForms")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmDyFormWorkflowsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmDyFormWorkflows_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmDyFormWorkflows")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmDyFormWorkflows_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmDyFormWorkflowsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmDyFormWorkflows_Users")
                        .IsRequired();

                    b.Navigation("DyForm");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormWorkflowsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormWorkflows", "FormWorkflow")
                        .WithMany("CrmDyFormWorkflowsLang")
                        .HasForeignKey("FormWorkflowId")
                        .HasConstraintName("FK_CrmDyFormWorkflows_Lang_CrmDyFormWorkflows")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmDyFormWorkflowsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmDyFormWorkflows_Lang_Languages")
                        .IsRequired();

                    b.Navigation("FormWorkflow");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyForms", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmSystemParts", "CrmSysPart")
                        .WithMany("CrmDyFormsCrmSysPart")
                        .HasForeignKey("CrmSysPartId")
                        .HasConstraintName("FK_CrmDyForms_CrmSystemParts");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysRolls", "EnableForRoll")
                        .WithMany("CrmDyForms")
                        .HasForeignKey("EnableForRollId")
                        .HasConstraintName("FK_CrmDyForms_CrmsysRolls");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmDyFormsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmDyForms_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmSystemParts", "FosysPart")
                        .WithMany("CrmDyFormsFosysPart")
                        .HasForeignKey("FosysPartId")
                        .HasConstraintName("FK_CrmDyForms_FOSystemParts");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmDyForms")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmDyForms_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormat", "PrintFormat")
                        .WithMany("CrmDyForms")
                        .HasForeignKey("PrintFormatId")
                        .HasConstraintName("FK_CrmDyForms_PrintFormat");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmDyFormsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmDyForms_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormWorkflows", "Workflow")
                        .WithMany("CrmDyForms")
                        .HasForeignKey("WorkflowId")
                        .HasConstraintName("FK_CrmDyForms_CrmDyFormWorkflows");

                    b.Navigation("CrmSysPart");

                    b.Navigation("EnableForRoll");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("FosysPart");

                    b.Navigation("Language");

                    b.Navigation("PrintFormat");

                    b.Navigation("User");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyForms", "Form")
                        .WithMany("CrmDyFormsLang")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_CrmDyForms_Lang_CrmDyForms")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmDyFormsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmDyForms_Lang_Languages")
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFileDirectoryType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmFileDirectoryTypeOpr", "FileDirectoryTypeOpr")
                        .WithMany("CrmFileDirectoryType")
                        .HasForeignKey("FileDirectoryTypeOprId")
                        .HasConstraintName("FK_CrmFileDirectoryType_CrmFileDirectoryTypeOpr");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmFileDirectoryType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmFileDirectoryType_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmFileDirectoryType")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmFileDirectoryType_Users");

                    b.Navigation("FileDirectoryTypeOpr");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFileDirectoryTypeLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmFileDirectoryType", "FileDirectoryTypeNavigation")
                        .WithMany("CrmFileDirectoryTypeLang")
                        .HasForeignKey("FileDirectoryTypeId")
                        .HasConstraintName("FK_CrmFileDirectoryType_Lang_CrmFileDirectoryType")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmFileDirectoryTypeLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmFileDirectoryType_Lang_Languages")
                        .IsRequired();

                    b.Navigation("FileDirectoryTypeNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFileDirectoryTypeOpr", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmFileDirectoryTypeOpr")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmFileDirectoryTypeOpr_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmFileDirectoryTypeOpr")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmFileDirectoryTypeOpr_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFileDirectoryTypeOprLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmFileDirectoryTypeOpr", "FileDirectoryTypeOprNavigation")
                        .WithMany("CrmFileDirectoryTypeOprLang")
                        .HasForeignKey("FileDirectoryTypeOprId")
                        .HasConstraintName("FK_CrmFileDirectoryTypeOpr_Lang_CrmFileDirectoryTypeOpr")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmFileDirectoryTypeOprLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmFileDirectoryTypeOpr_Lang_Languages")
                        .IsRequired();

                    b.Navigation("FileDirectoryTypeOprNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFilesDirectory", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmFileDirectoryType", "FileDirectoryType")
                        .WithMany("CrmFilesDirectory")
                        .HasForeignKey("FileDirectoryTypeId")
                        .HasConstraintName("FK_CrmFilesDirectory_CrmFileDirectoryType");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmFilesDirectory")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmFilesDirectory_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Master")
                        .WithMany("CrmFilesDirectory")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("FK_CrmFilesDirectory_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", "SubDetail")
                        .WithMany("CrmFilesDirectory")
                        .HasForeignKey("SubDetailId")
                        .HasConstraintName("FK_CrmFilesDirectory_CrmProjects");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmFilesDirectory")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmFilesDirectory_Users")
                        .IsRequired();

                    b.Navigation("FileDirectoryType");

                    b.Navigation("Language");

                    b.Navigation("Master");

                    b.Navigation("SubDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFilesDirectoryLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmFilesDirectory", "FileDirectory")
                        .WithMany("CrmFilesDirectoryLang")
                        .HasForeignKey("FileDirectoryId")
                        .HasConstraintName("FK_CrmFilesDirectory_Lang_CrmFilesDirectory")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmFilesDirectoryLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmFilesDirectory_Lang_Languages")
                        .IsRequired();

                    b.Navigation("FileDirectory");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFilesDirectoryTemplate", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmFileDirectoryType", "FileDirectoryType")
                        .WithMany("CrmFilesDirectoryTemplate")
                        .HasForeignKey("FileDirectoryTypeId")
                        .HasConstraintName("FK_CrmFilesDirectoryTemplate_CrmFileDirectoryType");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmFilesDirectoryTemplate")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmFilesDirectoryTemplate_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmFilesDirectoryTemplateType", "Type")
                        .WithMany("CrmFilesDirectoryTemplate")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_CrmFilesDirectoryTemplate_CrmFilesDirectoryTemplateType")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmFilesDirectoryTemplate")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmFilesDirectoryTemplate_Users")
                        .IsRequired();

                    b.Navigation("FileDirectoryType");

                    b.Navigation("Language");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFilesDirectoryTemplateType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmFilesDirectoryTemplateType")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmFilesDirectoryTemplateType_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmFilesDirectoryTemplateType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmFilesDirectoryTemplateType_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFoSetting", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroups", "CmpDefaultGroup")
                        .WithMany("CrmFoSetting")
                        .HasForeignKey("CmpDefaultGroupId")
                        .HasConstraintName("FK_CrmFoSetting_CrmCompanyGroups");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIi", "CmpDefaultGroupIdIiNavigation")
                        .WithMany("CrmFoSetting")
                        .HasForeignKey("CmpDefaultGroupIdIi")
                        .HasConstraintName("FK_CrmFoSetting_CrmCompanyGroupsII");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIii", "CmpDefaultGroupIdIiiNavigation")
                        .WithMany("CrmFoSetting")
                        .HasForeignKey("CmpDefaultGroupIdIii")
                        .HasConstraintName("FK_CrmFoSetting_CrmCompanyGroupsIII");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIv", "CmpDefaultGroupIdIvNavigation")
                        .WithMany("CrmFoSetting")
                        .HasForeignKey("CmpDefaultGroupIdIv")
                        .HasConstraintName("FK_CrmFoSetting_CrmCompanyGroupsIV");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPresentation", "CmpDefaultPresentation")
                        .WithMany("CrmFoSetting")
                        .HasForeignKey("CmpDefaultPresentationId")
                        .HasConstraintName("FK_CrmFoSetting_CrmCompanyPresentation");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CmpDefaultReferUser")
                        .WithMany("CrmFoSettingCmpDefaultReferUser")
                        .HasForeignKey("CmpDefaultReferUserId")
                        .HasConstraintName("FK_CrmFoSetting_CmpReferUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanySubGroups", "CmpDefaultSubGroup")
                        .WithMany("CrmFoSetting")
                        .HasForeignKey("CmpDefaultSubGroupId")
                        .HasConstraintName("FK_CrmFoSetting_CrmCompanySubGroups");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyType", "CmpDefaultType")
                        .WithMany("CrmFoSetting")
                        .HasForeignKey("CmpDefaultTypeId")
                        .HasConstraintName("FK_CrmFoSetting_CrmCompanyType");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationPriority", "CnvsDefaultPriority")
                        .WithMany("CrmFoSetting")
                        .HasForeignKey("CnvsDefaultPriorityId")
                        .HasConstraintName("FK_CrmFoSetting_CrmConversationPriority");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CnvsDefaultReferUser")
                        .WithMany("CrmFoSettingCnvsDefaultReferUser")
                        .HasForeignKey("CnvsDefaultReferUserId")
                        .HasConstraintName("FK_CrmFoSetting_CnvsReferUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatus", "CnvsDefaultStatus")
                        .WithMany("CrmFoSetting")
                        .HasForeignKey("CnvsDefaultStatusId")
                        .HasConstraintName("FK_CrmFoSetting_CrmConversationStatus")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationTopics", "CnvsDefaultTopic")
                        .WithMany("CrmFoSetting")
                        .HasForeignKey("CnvsDefaultTopicId")
                        .HasConstraintName("FK_CrmFoSetting_CrmConversationTopics")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CnvsDefaultUser")
                        .WithMany("CrmFoSettingCnvsDefaultUser")
                        .HasForeignKey("CnvsDefaultUserId")
                        .HasConstraintName("FK_CrmFoSetting_CnvsUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.EmailSetting", "EmailSetting")
                        .WithMany("CrmFoSetting")
                        .HasForeignKey("EmailSettingId")
                        .HasConstraintName("FK_CrmFoSetting_EmailSetting");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.EmailUsersInfo", "EmailUserInfo")
                        .WithMany("CrmFoSetting")
                        .HasForeignKey("EmailUserInfoId")
                        .HasConstraintName("FK_CrmFoSetting_EmailUsersInfo");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmFoSettingFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmFoSetting_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmFoSetting")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmFoSetting_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatusGroups", "PrjDefaultCnvsStatusGroup")
                        .WithMany("CrmFoSetting")
                        .HasForeignKey("PrjDefaultCnvsStatusGroupId")
                        .HasConstraintName("FK_CrmFoSetting_CrmConversationStatusGroups")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGrade", "PrjDefaultGrade")
                        .WithMany("CrmFoSetting")
                        .HasForeignKey("PrjDefaultGradeId")
                        .HasConstraintName("FK_CrmFoSetting_CrmProjectGrade");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroups", "PrjDefaultGroup")
                        .WithMany("CrmFoSetting")
                        .HasForeignKey("PrjDefaultGroupId")
                        .HasConstraintName("FK_CrmFoSetting_CrmProjectGroups");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectPriority", "PrjDefaultPriority")
                        .WithMany("CrmFoSetting")
                        .HasForeignKey("PrjDefaultPriorityId")
                        .HasConstraintName("FK_CrmFoSetting_CrmProjectPriority");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "PrjDefaultStarterUser")
                        .WithMany("CrmFoSettingPrjDefaultStarterUser")
                        .HasForeignKey("PrjDefaultStarterUserId")
                        .HasConstraintName("FK_CrmFoSetting_PrjStarterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyForms", "RegDyForm")
                        .WithMany("CrmFoSetting")
                        .HasForeignKey("RegDyFormId")
                        .HasConstraintName("FK_CrmFoSetting_CrmDyForms");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsGallery", "ShpHomeGalleryI")
                        .WithMany("CrmFoSettingShpHomeGalleryI")
                        .HasForeignKey("ShpHomeGalleryIid")
                        .HasConstraintName("FK_CrmFoSetting_CrmCmsGallery");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsGallery", "ShpHomeGalleryIi")
                        .WithMany("CrmFoSettingShpHomeGalleryIi")
                        .HasForeignKey("ShpHomeGalleryIiid")
                        .HasConstraintName("FK_CrmFoSetting_CrmCmsGalleryII");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsGallery", "ShpHomeGalleryIii")
                        .WithMany("CrmFoSettingShpHomeGalleryIii")
                        .HasForeignKey("ShpHomeGalleryIiiid")
                        .HasConstraintName("FK_CrmFoSetting_CrmCmsGalleryIII");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmFoSettingUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmFoSetting_Users")
                        .IsRequired();

                    b.Navigation("CmpDefaultGroup");

                    b.Navigation("CmpDefaultGroupIdIiiNavigation");

                    b.Navigation("CmpDefaultGroupIdIiNavigation");

                    b.Navigation("CmpDefaultGroupIdIvNavigation");

                    b.Navigation("CmpDefaultPresentation");

                    b.Navigation("CmpDefaultReferUser");

                    b.Navigation("CmpDefaultSubGroup");

                    b.Navigation("CmpDefaultType");

                    b.Navigation("CnvsDefaultPriority");

                    b.Navigation("CnvsDefaultReferUser");

                    b.Navigation("CnvsDefaultStatus");

                    b.Navigation("CnvsDefaultTopic");

                    b.Navigation("CnvsDefaultUser");

                    b.Navigation("EmailSetting");

                    b.Navigation("EmailUserInfo");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("PrjDefaultCnvsStatusGroup");

                    b.Navigation("PrjDefaultGrade");

                    b.Navigation("PrjDefaultGroup");

                    b.Navigation("PrjDefaultPriority");

                    b.Navigation("PrjDefaultStarterUser");

                    b.Navigation("RegDyForm");

                    b.Navigation("ShpHomeGalleryI");

                    b.Navigation("ShpHomeGalleryIi");

                    b.Navigation("ShpHomeGalleryIii");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFoSettingLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmFoSetting", "FoSetting")
                        .WithMany("CrmFoSettingLang")
                        .HasForeignKey("FoSettingId")
                        .HasConstraintName("FK_CrmFoSetting_Lang_CrmFoSetting");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmFoSettingLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmFoSetting_Lang_Languages")
                        .IsRequired();

                    b.Navigation("FoSetting");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFund", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmFundCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmFund_CrmUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmFundFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmFund_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmFundGroups", "FundGroup")
                        .WithMany("CrmFund")
                        .HasForeignKey("FundGroupId")
                        .HasConstraintName("FK_CrmFund_CrmFundGroups")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmFund")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmFund_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmFundUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmFund_Users")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("FundGroup");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFundGroups", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmFundGroupsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmFundGroups_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmFundGroups")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmFundGroups_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmFundGroupsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmFundGroups_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFundGroupsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmFundGroups", "FundGroup")
                        .WithMany("CrmFundGroupsLang")
                        .HasForeignKey("FundGroupId")
                        .HasConstraintName("FK_CrmFundGroups_Lang_CrmFundGroups")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmFundGroupsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmFundGroups_Lang_Languages")
                        .IsRequired();

                    b.Navigation("FundGroup");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFundLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmFund", "Fund")
                        .WithMany("CrmFundLang")
                        .HasForeignKey("FundId")
                        .HasConstraintName("FK_CrmFund_Lang_CrmFund")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmFundLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmFund_Lang_Languages")
                        .IsRequired();

                    b.Navigation("Fund");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessage", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmInternalMessage")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmInternalMessage_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "MsgFromUser")
                        .WithMany("CrmInternalMessage")
                        .HasForeignKey("MsgFromUserId")
                        .HasConstraintName("FK_CrmInternalMessage_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageType", "MsgType")
                        .WithMany("CrmInternalMessage")
                        .HasForeignKey("MsgTypeId")
                        .HasConstraintName("FK_CrmInternalMessage_CrmInternalMessageType");

                    b.Navigation("Language");

                    b.Navigation("MsgFromUser");

                    b.Navigation("MsgType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageDefaultContext", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmInternalMessageDefaultContext")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmInternalMessageDefaultContext_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmInternalMessageDefaultContext")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmInternalMessageDefaultContext_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageDefaultContextLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageDefaultContext", "InternalMessageDefaultContext")
                        .WithMany("CrmInternalMessageDefaultContextLang")
                        .HasForeignKey("InternalMessageDefaultContextId")
                        .HasConstraintName("FK_CrmInternalMessageDefaultContext_Lang_CrmInternalMessageDefaultContext")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmInternalMessageDefaultContextLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmInternalMessageDefaultContext_Lang_Languages")
                        .IsRequired();

                    b.Navigation("InternalMessageDefaultContext");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageDetails", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmInternalMessageDetailsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmInternalMessageDetails_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmInternalMessageDetails")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmInternalMessageDetails_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "MsgdFromUser")
                        .WithMany("CrmInternalMessageDetailsMsgdFromUser")
                        .HasForeignKey("MsgdFromUserId")
                        .HasConstraintName("FK_CrmInternalMessageDetails_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageGroup", "MsgdGroup")
                        .WithMany("CrmInternalMessageDetails")
                        .HasForeignKey("MsgdGroupId")
                        .HasConstraintName("FK_CrmInternalMessageDetails_CrmInternalMessageGroup");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessage", "MsgdInternalMessage")
                        .WithMany("CrmInternalMessageDetails")
                        .HasForeignKey("MsgdInternalMessageId")
                        .HasConstraintName("FK_CrmInternalMessageDetails_CrmInternalMessage");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "MsgdToUser")
                        .WithMany("CrmInternalMessageDetailsMsgdToUser")
                        .HasForeignKey("MsgdToUserId")
                        .HasConstraintName("FK_CrmInternalMessageDetails_Users1")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageType", "MsgdType")
                        .WithMany("CrmInternalMessageDetails")
                        .HasForeignKey("MsgdTypeId")
                        .HasConstraintName("FK_CrmInternalMessageDetails_CrmInternalMessageType")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmInternalMessageDetailsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmInternalMessageDetails_Users2")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("MsgdFromUser");

                    b.Navigation("MsgdGroup");

                    b.Navigation("MsgdInternalMessage");

                    b.Navigation("MsgdToUser");

                    b.Navigation("MsgdType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageGroup", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmInternalMessageGroup")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmInternalMessageGroup_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmInternalMessageGroup")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmInternalMessageGroup_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageGroupLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageGroup", "InternalMessageGroupNavigation")
                        .WithMany("CrmInternalMessageGroupLang")
                        .HasForeignKey("InternalMessageGroupId")
                        .HasConstraintName("FK_CrmInternalMessageGroup_Lang_CrmInternalMessageGroup")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmInternalMessageGroupLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmInternalMessageGroup_Lang_Languages")
                        .IsRequired();

                    b.Navigation("InternalMessageGroupNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessage", "InternalMessage")
                        .WithMany("CrmInternalMessageLang")
                        .HasForeignKey("InternalMessageId")
                        .HasConstraintName("FK_CrmInternalMessage_Lang_CrmInternalMessage")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmInternalMessageLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmInternalMessage_Lang_Languages")
                        .IsRequired();

                    b.Navigation("InternalMessage");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessagePriority", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmInternalMessagePriority")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmInternalMessagePriority_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmInternalMessagePriority")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmInternalMessagePriority_Users");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessagePriorityLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessagePriority", "InternalMessagePriorityNavigation")
                        .WithMany("CrmInternalMessagePriorityLang")
                        .HasForeignKey("InternalMessagePriorityId")
                        .HasConstraintName("FK_CrmInternalMessagePriority_Lang_CrmInternalMessagePriority")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmInternalMessagePriorityLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmInternalMessagePriority_Lang_Languages")
                        .IsRequired();

                    b.Navigation("InternalMessagePriorityNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageSelectReceiver", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmInternalMessageSelectReceiver")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmInternalMessageSelectReceiver_Users");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmInternalMessageSelectReceiver")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmInternalMessageSelectReceiver_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageTreeType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmInternalMessageTreeTypeFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmInternalMessageTreeType_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmInternalMessageTreeType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmInternalMessageTreeType_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmInternalMessageTreeTypeUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmInternalMessageTreeType_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageTreeTypeLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageTreeType", "InternalMessageTreeType")
                        .WithMany("CrmInternalMessageTreeTypeLang")
                        .HasForeignKey("InternalMessageTreeTypeId")
                        .HasConstraintName("FK_CrmInternalMessageTreeType_Lang_CrmInternalMessageTreeType")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmInternalMessageTreeTypeLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmInternalMessageTreeType_Lang_Languages")
                        .IsRequired();

                    b.Navigation("InternalMessageTreeType");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmInternalMessageType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmInternalMessageType_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmInternalMessageType")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmInternalMessageType_Users");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageTypeLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageType", "InternalMessageType")
                        .WithMany("CrmInternalMessageTypeLang")
                        .HasForeignKey("InternalMessageTypeId")
                        .HasConstraintName("FK_CrmInternalMessageType_Lang_CrmInternalMessageType")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmInternalMessageTypeLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmInternalMessageType_Lang_Languages")
                        .IsRequired();

                    b.Navigation("InternalMessageType");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTank", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmKnowledgeTank")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmKnowledgeTank_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTankGroup", "KnlgGroup")
                        .WithMany("CrmKnowledgeTank")
                        .HasForeignKey("KnlgGroupId")
                        .HasConstraintName("FK_CrmKnowledgeTank_CrmKnowledgeTankGroup")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTankPriority", "KnlgPriority")
                        .WithMany("CrmKnowledgeTank")
                        .HasForeignKey("KnlgPriorityId")
                        .HasConstraintName("FK_CrmKnowledgeTank_CrmKnowledgeTankPriority");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmKnowledgeTank")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmKnowledgeTank_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("KnlgGroup");

                    b.Navigation("KnlgPriority");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTankGroup", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmKnowledgeTankGroup")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmKnowledgeTankGroup_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmKnowledgeTankGroup")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmKnowledgeTankGroup_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTankGroupLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTankGroup", "KnowledgeTankGroup")
                        .WithMany("CrmKnowledgeTankGroupLang")
                        .HasForeignKey("KnowledgeTankGroupId")
                        .HasConstraintName("FK_CrmKnowledgeTankGroup_Lang_CrmKnowledgeTankGroup")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmKnowledgeTankGroupLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmKnowledgeTankGroup_Lang_Languages")
                        .IsRequired();

                    b.Navigation("KnowledgeTankGroup");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTankGroupPermission", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmKnowledgeTankGroupPermissionFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmKnowledgeTankGroupPermission_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTankGroup", "KnowledgeTankGroup")
                        .WithMany("CrmKnowledgeTankGroupPermission")
                        .HasForeignKey("KnowledgeTankGroupId")
                        .HasConstraintName("FK_CrmKnowledgeTankGroupPermission_CrmKnowledgeTankGroup")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmKnowledgeTankGroupPermission")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmKnowledgeTankGroupPermission_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmKnowledgeTankGroupPermissionUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmKnowledgeTankGroupPermission_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysRolls", "UserRoll")
                        .WithMany("CrmKnowledgeTankGroupPermission")
                        .HasForeignKey("UserRollId")
                        .HasConstraintName("FK_CrmKnowledgeTankGroupPermission_CrmsysRolls")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("KnowledgeTankGroup");

                    b.Navigation("Language");

                    b.Navigation("User");

                    b.Navigation("UserRoll");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTankLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTank", "KnowledgeTank")
                        .WithMany("CrmKnowledgeTankLang")
                        .HasForeignKey("KnowledgeTankId")
                        .HasConstraintName("FK_CrmKnowledgeTank_Lang_CrmKnowledgeTank")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmKnowledgeTankLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmKnowledgeTank_Lang_Languages")
                        .IsRequired();

                    b.Navigation("KnowledgeTank");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTankPriority", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmKnowledgeTankPriority")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmKnowledgeTankPriority_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmKnowledgeTankPriority")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmKnowledgeTankPriority_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTankPriorityLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTankPriority", "KnowledgeTankPriority")
                        .WithMany("CrmKnowledgeTankPriorityLang")
                        .HasForeignKey("KnowledgeTankPriorityId")
                        .HasConstraintName("FK_CrmKnowledgeTankPriority_Lang_CrmKnowledgeTankPriority")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmKnowledgeTankPriorityLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmKnowledgeTankPriority_Lang_Languages")
                        .IsRequired();

                    b.Navigation("KnowledgeTankPriority");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLeave", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmLeave")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmLeave_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLeave")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLeave_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLeaveKinds", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmLeaveKinds")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmLeaveKinds_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLeaveKinds")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLeaveKinds_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLeaveStatus", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmLeaveStatus")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmLeaveStatus_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLeaveStatus")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLeaveStatus_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLeaveStayType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmLeaveStayType")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmLeaveStayType_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLeaveStayType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLeaveStayType_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLeaveType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmLeaveType")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmLeaveType_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLeaveType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLeaveType_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLeaveVehicleType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmLeaveVehicleType")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmLeaveVehicleType_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLeaveVehicleType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLeaveVehicleType_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccNoAvSetting", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmLinkAccNoAvSettingFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmLinkAccNoAvSetting_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLinkAccNoAvSetting")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLinkAccNoAvSetting_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmLinkAccNoAvSettingUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmLinkAccNoAvSetting_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccNoAvSettingDetails", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmLinkAccNoAvSettingDetailsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmLinkAccNoAvSettingDetails_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLinkAccNoAvSettingDetails")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLinkAccNoAvSettingDetails_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccNoAvSetting", "LinkAccNoAvSetting")
                        .WithMany("CrmLinkAccNoAvSettingDetails")
                        .HasForeignKey("LinkAccNoAvSettingId")
                        .HasConstraintName("FK_CrmLinkAccNoAvSettingDetails_CrmLinkAccNoAvSetting")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmLinkAccNoAvSettingDetailsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmLinkAccNoAvSettingDetails_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("LinkAccNoAvSetting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccNoAvSettingDetailsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLinkAccNoAvSettingDetailsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLinkAccNoAvSettingDetails_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccNoAvSettingDetails", "LinkAccNoAvSettingDetail")
                        .WithMany("CrmLinkAccNoAvSettingDetailsLang")
                        .HasForeignKey("LinkAccNoAvSettingDetailId")
                        .HasConstraintName("FK_CrmLinkAccNoAvSettingDetails_Lang_CrmLinkAccNoAvSettingDetails")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("LinkAccNoAvSettingDetail");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccNoAvSettingLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLinkAccNoAvSettingLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLinkAccNoAvSetting_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccNoAvSetting", "LinkAccNoAvSetting")
                        .WithMany("CrmLinkAccNoAvSettingLang")
                        .HasForeignKey("LinkAccNoAvSettingId")
                        .HasConstraintName("FK_CrmLinkAccNoAvSetting_Lang_CrmLinkAccNoAvSetting")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("LinkAccNoAvSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccSetting", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmLinkAccSettingFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmLinkAccSetting_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLinkAccSetting")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLinkAccSetting_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmLinkAccSettingUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmLinkAccSetting_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccSettingDetails", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmLinkAccSettingDetailsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmLinkAccSettingDetails_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLinkAccSettingDetails")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLinkAccSettingDetails_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccSetting", "LinkAccSetting")
                        .WithMany("CrmLinkAccSettingDetails")
                        .HasForeignKey("LinkAccSettingId")
                        .HasConstraintName("FK_CrmLinkAccSettingDetails_CrmLinkAccSetting")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmLinkAccSettingDetailsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmLinkAccSettingDetails_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("LinkAccSetting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccSettingDetailsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLinkAccSettingDetailsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLinkAccSettingDetails_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccSettingDetails", "LinkAccSettingDetail")
                        .WithMany("CrmLinkAccSettingDetailsLang")
                        .HasForeignKey("LinkAccSettingDetailId")
                        .HasConstraintName("FK_CrmLinkAccSettingDetails_Lang_CrmLinkAccSettingDetails")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("LinkAccSettingDetail");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccSettingLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLinkAccSettingLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLinkAccSetting_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccSetting", "LinkAccSetting")
                        .WithMany("CrmLinkAccSettingLang")
                        .HasForeignKey("LinkAccSettingId")
                        .HasConstraintName("FK_CrmLinkAccSetting_Lang_CrmLinkAccSetting")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("LinkAccSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccSystems", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmLinkAccSystemsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmLinkAccSystems_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLinkAccSystems")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLinkAccSystems_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmLinkAccSystemsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmLinkAccSystems_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccTarazSetting", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmLinkAccTarazSettingFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmLinkAccTarazSetting_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLinkAccTarazSetting")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLinkAccTarazSetting_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmLinkAccTarazSettingUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmLinkAccTarazSetting_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccTarazSettingDetails", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmLinkAccTarazSettingDetailsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmLinkAccTarazSettingDetails_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLinkAccTarazSettingDetails")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLinkAccTarazSettingDetails_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccTarazSetting", "LinkAccTarazSetting")
                        .WithMany("CrmLinkAccTarazSettingDetails")
                        .HasForeignKey("LinkAccTarazSettingId")
                        .HasConstraintName("FK_CrmLinkAccTarazSettingDetails_CrmLinkAccTarazSetting")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmLinkAccTarazSettingDetailsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmLinkAccTarazSettingDetails_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("LinkAccTarazSetting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccTarazSettingDetailsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLinkAccTarazSettingDetailsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLinkAccTarazSettingDetails_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccTarazSettingDetails", "LinkAccTarazSettingDetail")
                        .WithMany("CrmLinkAccTarazSettingDetailsLang")
                        .HasForeignKey("LinkAccTarazSettingDetailId")
                        .HasConstraintName("FK_CrmLinkAccTarazSettingDetails_Lang_CrmLinkAccTarazSettingDetails")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("LinkAccTarazSettingDetail");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccTarazSettingLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLinkAccTarazSettingLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLinkAccTarazSetting_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccTarazSetting", "LinkAccTarazSetting")
                        .WithMany("CrmLinkAccTarazSettingLang")
                        .HasForeignKey("LinkAccTarazSettingId")
                        .HasConstraintName("FK_CrmLinkAccTarazSetting_Lang_CrmLinkAccTarazSetting")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("LinkAccTarazSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkedCompany", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Company")
                        .WithMany("CrmLinkedCompanyCompany")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CrmLinkedCompany_CrmCompany")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmLinkedCompanyFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmLinkedCompany_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "LinkedCompany")
                        .WithMany("CrmLinkedCompanyLinkedCompany")
                        .HasForeignKey("LinkedCompanyId")
                        .HasConstraintName("FK_CrmLinkedCompany_CrmCompany1")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmLinkedCompanyUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmLinkedCompany_Users1")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("LinkedCompany");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkedType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmLinkedType")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmLinkedType_Users");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLinkedType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLinkedType_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkedTypeLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLinkedTypeLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLinkedType_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkedType", "LinkedType")
                        .WithMany("CrmLinkedTypeLang")
                        .HasForeignKey("LinkedTypeId")
                        .HasConstraintName("FK_CrmLinkedType_Lang_CrmLinkedType")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("LinkedType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkedUsers", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmLinkedUsersCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmLinkedUsers_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmLinkedUsersFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmLinkedUsers_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmLinkedUsers")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmLinkedUsers_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkedType", "LinkedType")
                        .WithMany("CrmLinkedUsers")
                        .HasForeignKey("LinkedTypeId")
                        .HasConstraintName("FK_CrmLinkedUsers_CrmLinkedType")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "LinkedUser")
                        .WithMany("CrmLinkedUsersLinkedUser")
                        .HasForeignKey("LinkedUserId")
                        .HasConstraintName("FK_CrmLinkedUsers_Users1")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmLinkedUsersUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmLinkedUsers_Users2")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("LinkedType");

                    b.Navigation("LinkedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmOperationsType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmOperationsTypeFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmOperationsType_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmOperationsType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmOperationsType_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmOperationsTypeUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmOperationsType_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmOperationsTypeLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmOperationsTypeLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmOperationsType_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmOperationsType", "OperationsType")
                        .WithMany("CrmOperationsTypeLang")
                        .HasForeignKey("OperationsTypeId")
                        .HasConstraintName("FK_CrmOperationsType_Lang_CrmOperationsType")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("OperationsType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonDepartments", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmPersonDepartments")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmPersonDepartments_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmPersonDepartments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmPersonDepartments_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonDepartmentsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmPersonDepartmentsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmPersonDepartments_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonDepartments", "PersonDepartmentNavigation")
                        .WithMany("CrmPersonDepartmentsLang")
                        .HasForeignKey("PersonDepartmentId")
                        .HasConstraintName("FK_CrmPersonDepartments_Lang_CrmPersonDepartments")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PersonDepartmentNavigation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonGroups", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmPersonGroups")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmPersonGroups_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmPersonGroups")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmPersonGroups_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonGroupsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmPersonGroupsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmPersonGroups_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonGroups", "PersonGroupNavigation")
                        .WithMany("CrmPersonGroupsLang")
                        .HasForeignKey("PersonGroupId")
                        .HasConstraintName("FK_CrmPersonGroups_Lang_CrmPersonGroups")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PersonGroupNavigation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonJobs", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmPersonJobs")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmPersonJobs_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmPersonJobs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmPersonJobs_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonJobsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmPersonJobsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmPersonJobs_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonJobs", "PersonJob")
                        .WithMany("CrmPersonJobsLang")
                        .HasForeignKey("PersonJobId")
                        .HasConstraintName("FK_CrmPersonJobs_Lang_CrmPersonJobs")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PersonJob");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonPicture", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "CompanyPerson")
                        .WithMany("CrmPersonPicture")
                        .HasForeignKey("CompanyPersonId")
                        .HasConstraintName("FK_CrmPersonPicture_CrmCompanyPersons");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmPersonPictureFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmPersonPicture_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmPersonPicture")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmPersonPicture_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmPersonPictureUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmPersonPicture_Users")
                        .IsRequired();

                    b.Navigation("CompanyPerson");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonTitle", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmPersonTitle")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmPersonTitle_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmPersonTitle")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmPersonTitle_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonTitleLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmPersonTitleLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmPersonTitle_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonTitle", "PersonTitleNavigation")
                        .WithMany("CrmPersonTitleLang")
                        .HasForeignKey("PersonTitleId")
                        .HasConstraintName("FK_CrmPersonTitle_Lang_CrmPersonTitle")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PersonTitleNavigation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmPersonType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmPersonType_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmPersonType")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmPersonType_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonTypeLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmPersonTypeLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmPersonType_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonType", "PersonTypeNavigation")
                        .WithMany("CrmPersonTypeLang")
                        .HasForeignKey("PersonTypeId")
                        .HasConstraintName("FK_CrmPersonType_Lang_CrmPersonType")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PersonTypeNavigation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectDefualtValue", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectFieldTitle", "FieldTitle")
                        .WithMany("CrmProjectDefualtValue")
                        .HasForeignKey("FieldTitleId")
                        .HasConstraintName("FK_CrmProjectDefualtValue_CrmProjectFieldTitle")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectDefualtValue")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectDefualtValue_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmProjectDefualtValue")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmProjectDefualtValue_Users")
                        .IsRequired();

                    b.Navigation("FieldTitle");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectDefualtValueLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectDefualtValueLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectDefualtValue_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectDefualtValue", "ProjectDefualtValue")
                        .WithMany("CrmProjectDefualtValueLang")
                        .HasForeignKey("ProjectDefualtValueId")
                        .HasConstraintName("FK_CrmProjectDefualtValue_Lang_CrmProjectDefualtValue")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProjectDefualtValue");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectFieldTitle", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectFieldTitle")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectFieldTitle_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", "Project")
                        .WithMany("CrmProjectFieldTitle")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_CrmProjectFieldTitle_CrmProjects");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmProjectFieldTitle")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmProjectFieldTitle_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectFieldTitleLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectFieldTitleLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectFieldTitle_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectFieldTitle", "ProjectFieldTitle")
                        .WithMany("CrmProjectFieldTitleLang")
                        .HasForeignKey("ProjectFieldTitleId")
                        .HasConstraintName("FK_CrmProjectFieldTitle_Lang_CrmProjectFieldTitle")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProjectFieldTitle");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectFieldValueType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmProjectFieldValueType")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmProjectFieldValueType_Users25");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectFieldValueType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectFieldValueType_Languages")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGrade", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectGrade")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectGrade_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmProjectGrade")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmProjectGrade_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGradeLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectGradeLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectGrade_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGrade", "ProjectGradeNavigation")
                        .WithMany("CrmProjectGradeLang")
                        .HasForeignKey("ProjectGradeId")
                        .HasConstraintName("FK_CrmProjectGrade_Lang_CrmProjectGrade")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProjectGradeNavigation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroups", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmProjectGroups")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmProjectGroups_Users");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectGroups")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectGroups_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroupsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectGroupsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectGroups_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroups", "ProjectGroupNavigation")
                        .WithMany("CrmProjectGroupsLang")
                        .HasForeignKey("ProjectGroupId")
                        .HasConstraintName("FK_CrmProjectGroups_Lang_CrmProjectGroups")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProjectGroupNavigation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroupsMulti", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectGroupsMulti")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectGroupsMulti_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmProjectGroupsMulti")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmProjectGroupsMulti_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroupsMultiI", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectGroupsMultiI")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectGroupsMultiI_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmProjectGroupsMultiI")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmProjectGroupsMultiI_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroupsMultiILang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectGroupsMultiILang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectGroupsMultiI_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroupsMultiI", "ProjectGroupsMultiI")
                        .WithMany("CrmProjectGroupsMultiILang")
                        .HasForeignKey("ProjectGroupsMultiIid")
                        .HasConstraintName("FK_CrmProjectGroupsMultiI_Lang_CrmProjectGroupsMultiI")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProjectGroupsMultiI");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroupsMultiLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectGroupsMultiLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectGroupsMulti_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroupsMulti", "ProjectGroupsMulti")
                        .WithMany("CrmProjectGroupsMultiLang")
                        .HasForeignKey("ProjectGroupsMultiId")
                        .HasConstraintName("FK_CrmProjectGroupsMulti_Lang_CrmProjectGroupsMulti")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProjectGroupsMulti");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectInformations", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectFieldTitle", "FieldTitle")
                        .WithMany("CrmProjectInformations")
                        .HasForeignKey("FieldTitleId")
                        .HasConstraintName("FK_CrmProjectInformations_CrmProjectFieldTitle")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmProjectInformationsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmProjectInformations_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectInformations")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectInformations_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", "Project")
                        .WithMany("CrmProjectInformations")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_CrmProjectInformations_CrmProjects")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmProjectInformationsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmProjectInformations_Users")
                        .IsRequired();

                    b.Navigation("FieldTitle");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectInformationsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectInformationsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectInformations_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectInformations", "ProjectInformation")
                        .WithMany("CrmProjectInformationsLang")
                        .HasForeignKey("ProjectInformationId")
                        .HasConstraintName("FK_CrmProjectInformations_Lang_CrmProjectInformations")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProjectInformation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectMultiGroups", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmProjectMultiGroupsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmProjectMultiGroups_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectMultiGroups")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectMultiGroups_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroupsMulti", "ProjectGroupsMulti")
                        .WithMany("CrmProjectMultiGroups")
                        .HasForeignKey("ProjectGroupsMultiId")
                        .HasConstraintName("FK_CrmProjectMultiGroups_CrmProjectGroupsMulti")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmProjectMultiGroupsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmProjectMultiGroups_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("ProjectGroupsMulti");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectMultiIgroups", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmProjectMultiIgroupsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmProjectMultiIGroups_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectMultiIgroups")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectMultiIGroups_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroupsMultiI", "ProjectGroupsMultiI")
                        .WithMany("CrmProjectMultiIgroups")
                        .HasForeignKey("ProjectGroupsMultiIid")
                        .HasConstraintName("FK_CrmProjectMultiIGroups_CrmProjectGroupsMultiI")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmProjectMultiIgroupsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmProjectMultiIGroups_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("ProjectGroupsMultiI");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectPriority", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmProjectPriorityFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmProjectPriority_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectPriority")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectPriority_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmProjectPriorityUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmProjectPriority_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectPriorityLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectPriorityLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectPriority_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectPriority", "ProjectPriority")
                        .WithMany("CrmProjectPriorityLang")
                        .HasForeignKey("ProjectPriorityId")
                        .HasConstraintName("FK_CrmProjectPriority_Lang_CrmProjectPriority")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProjectPriority");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectTitles", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmProjectTitlesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmProjectTitles_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectTitles")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectTitles_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGrade", "ProjectTitleGrade")
                        .WithMany("CrmProjectTitles")
                        .HasForeignKey("ProjectTitleGradeId")
                        .HasConstraintName("FK_CrmProjectTitles_CrmProjectGrade");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroups", "ProjectTitleGroup")
                        .WithMany("CrmProjectTitles")
                        .HasForeignKey("ProjectTitleGroupId")
                        .HasConstraintName("FK_CrmProjectTitles_CrmProjectGroups");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectPriority", "ProjectTitlePriority")
                        .WithMany("CrmProjectTitles")
                        .HasForeignKey("ProjectTitlePriorityId")
                        .HasConstraintName("FK_CrmProjectTitles_CrmProjectPriority");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatusGroups", "ProjectTitleStatusGroup")
                        .WithMany("CrmProjectTitles")
                        .HasForeignKey("ProjectTitleStatusGroupId")
                        .HasConstraintName("FK_CrmProjectTitles_CrmConversationStatusGroups");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmProjectTitlesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmProjectTitles_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("ProjectTitleGrade");

                    b.Navigation("ProjectTitleGroup");

                    b.Navigation("ProjectTitlePriority");

                    b.Navigation("ProjectTitleStatusGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectTitlesLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectTitlesLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectTitles_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectTitles", "ProjectTitleNavigation")
                        .WithMany("CrmProjectTitlesLang")
                        .HasForeignKey("ProjectTitleId")
                        .HasConstraintName("FK_CrmProjectTitles_Lang_CrmProjectTitles")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProjectTitleNavigation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmProjectsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmProjects_Users4");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjects")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjects_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "PrjCompany")
                        .WithMany("CrmProjects")
                        .HasForeignKey("PrjCompanyId")
                        .HasConstraintName("FK_CrmProjects_CrmCompany")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatus", "PrjFinishedStatus")
                        .WithMany("CrmProjects")
                        .HasForeignKey("PrjFinishedStatusId")
                        .HasConstraintName("FK_CrmProjects_CrmConversationStatus");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "PrjFinishedUser")
                        .WithMany("CrmProjectsPrjFinishedUser")
                        .HasForeignKey("PrjFinishedUserId")
                        .HasConstraintName("FK_CrmProjects_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "PrjFirstRegisterUser")
                        .WithMany("CrmProjectsPrjFirstRegisterUser")
                        .HasForeignKey("PrjFirstRegisterUserId")
                        .HasConstraintName("FK_CrmProjects_Users2")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGrade", "PrjGrade")
                        .WithMany("CrmProjects")
                        .HasForeignKey("PrjGradeId")
                        .HasConstraintName("FK_CrmProjects_CrmProjectGrade");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroups", "PrjGroup")
                        .WithMany("CrmProjects")
                        .HasForeignKey("PrjGroupId")
                        .HasConstraintName("FK_CrmProjects_CrmProjectGroups");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectPriority", "PrjPriority")
                        .WithMany("CrmProjects")
                        .HasForeignKey("PrjPriorityId")
                        .HasConstraintName("FK_CrmProjects_CrmProjectPriority");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "PrjStarterUser")
                        .WithMany("CrmProjectsPrjStarterUser")
                        .HasForeignKey("PrjStarterUserId")
                        .HasConstraintName("FK_CrmProjects_Users");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.UserDepartments", "PrjUserDepartment")
                        .WithMany("CrmProjects")
                        .HasForeignKey("PrjUserDepartmentId")
                        .HasConstraintName("FK_CrmProjects_UserDepartments");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatusGroups", "PrjcnvsStatusGroup")
                        .WithMany("CrmProjects")
                        .HasForeignKey("PrjcnvsStatusGroupId")
                        .HasConstraintName("FK_CrmProjects_CrmConversationStatusGroups");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmProjectsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmProjects_Users3")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("PrjcnvsStatusGroup");

                    b.Navigation("PrjCompany");

                    b.Navigation("PrjFinishedStatus");

                    b.Navigation("PrjFinishedUser");

                    b.Navigation("PrjFirstRegisterUser");

                    b.Navigation("PrjGrade");

                    b.Navigation("PrjGroup");

                    b.Navigation("PrjPriority");

                    b.Navigation("PrjStarterUser");

                    b.Navigation("PrjUserDepartment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectsForbiddenForUser", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmProjectsForbiddenForUserCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmProjectsForbiddenForUser_Users");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmProjectsForbiddenForUserFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmProjectsForbiddenForUser_Users1")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectsForbiddenForUser")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectsForbiddenForUser_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmProjectsForbiddenForUserUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmProjectsForbiddenForUser_Users2")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectsForbiddenForUserLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectsForbiddenForUserLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectsForbiddenForUser_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectsForbiddenForUser", "ProjectsForbiddenForUser")
                        .WithMany("CrmProjectsForbiddenForUserLang")
                        .HasForeignKey("ProjectsForbiddenForUserId")
                        .HasConstraintName("FK_CrmProjectsForbiddenForUser_Lang_CrmProjectsForbiddenForUser")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProjectsForbiddenForUser");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjects_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", "Project")
                        .WithMany("CrmProjectsLang")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_CrmProjects_Lang_CrmProjects")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectsTmp", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmProjectsTmpFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmProjectsTmp_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectsTmp")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectsTmp_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyTmp", "PrjCompany")
                        .WithMany("CrmProjectsTmp")
                        .HasForeignKey("PrjCompanyId")
                        .HasConstraintName("FK_CrmProjectsTmp_CrmCompanyTmp")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatus", "PrjFinishedStatus")
                        .WithMany("CrmProjectsTmp")
                        .HasForeignKey("PrjFinishedStatusId")
                        .HasConstraintName("FK_CrmProjectsTmp_CrmConversationStatus");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "PrjFinishedUser")
                        .WithMany("CrmProjectsTmpPrjFinishedUser")
                        .HasForeignKey("PrjFinishedUserId")
                        .HasConstraintName("FK_CrmProjectsTmp_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "PrjFirstRegisterUser")
                        .WithMany("CrmProjectsTmpPrjFirstRegisterUser")
                        .HasForeignKey("PrjFirstRegisterUserId")
                        .HasConstraintName("FK_CrmProjectsTmp_Users2")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGrade", "PrjGrade")
                        .WithMany("CrmProjectsTmp")
                        .HasForeignKey("PrjGradeId")
                        .HasConstraintName("FK_CrmProjectsTmp_CrmProjectGrade");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroups", "PrjGroup")
                        .WithMany("CrmProjectsTmp")
                        .HasForeignKey("PrjGroupId")
                        .HasConstraintName("FK_CrmProjectsTmp_CrmProjectGroups");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectPriority", "PrjPriority")
                        .WithMany("CrmProjectsTmp")
                        .HasForeignKey("PrjPriorityId")
                        .HasConstraintName("FK_CrmProjectsTmp_CrmProjectPriority");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "PrjStarterUser")
                        .WithMany("CrmProjectsTmpPrjStarterUser")
                        .HasForeignKey("PrjStarterUserId")
                        .HasConstraintName("FK_CrmProjectsTmp_Users");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.UserDepartments", "PrjUserDepartment")
                        .WithMany("CrmProjectsTmp")
                        .HasForeignKey("PrjUserDepartmentId")
                        .HasConstraintName("FK_CrmProjectsTmp_UserDepartments");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatusGroups", "PrjcnvsStatusGroup")
                        .WithMany("CrmProjectsTmp")
                        .HasForeignKey("PrjcnvsStatusGroupId")
                        .HasConstraintName("FK_CrmProjectsTmp_CrmConversationStatusGroups");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmProjectsTmpUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmProjectsTmp_Users3")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("PrjcnvsStatusGroup");

                    b.Navigation("PrjCompany");

                    b.Navigation("PrjFinishedStatus");

                    b.Navigation("PrjFinishedUser");

                    b.Navigation("PrjFirstRegisterUser");

                    b.Navigation("PrjGrade");

                    b.Navigation("PrjGroup");

                    b.Navigation("PrjPriority");

                    b.Navigation("PrjStarterUser");

                    b.Navigation("PrjUserDepartment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectsTmpLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmProjectsTmpLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmProjectsTmp_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectsTmp", "Project")
                        .WithMany("CrmProjectsTmpLang")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_CrmProjectsTmp_Lang_CrmProjectsTmp")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmShowTableFieldInFo", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmShowTableFieldInFoFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmShowTableFieldInFO_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmShowTableFieldInFo")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmShowTableFieldInFO_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmShowTableFieldInFoUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmShowTableFieldInFO_Users1")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmSystemParts", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmSystemPartsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmSystemParts_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmSystemParts")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmSystemParts_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmSystemPartsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmSystemParts_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmSystemPartsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmSystemPartsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmSystemParts_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmSystemParts", "SystemPart")
                        .WithMany("CrmSystemPartsLang")
                        .HasForeignKey("SystemPartId")
                        .HasConstraintName("FK_CrmSystemParts_Lang_CrmSystemParts")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("SystemPart");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegBotChatMessage", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmTelegBotChatMessage")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmTelegBotChatMessage_Users");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmTelegBotChatMessage")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmTelegBotChatMessage_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegBotMessageType", "MessageType")
                        .WithMany("CrmTelegBotChatMessage")
                        .HasForeignKey("MessageTypeId")
                        .HasConstraintName("FK_CrmTelegBotChatMessage_CrmTelegBotMessageType");

                    b.Navigation("CrmUser");

                    b.Navigation("Language");

                    b.Navigation("MessageType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegBotContacts", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Company")
                        .WithMany("CrmTelegBotContacts")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CrmTelegBotContacts_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "CompanyPerson")
                        .WithMany("CrmTelegBotContacts")
                        .HasForeignKey("CompanyPersonId")
                        .HasConstraintName("FK_CrmTelegBotContacts_CrmCompanyPersons");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmTelegBotContactsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmTelegBotContacts_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmTelegBotContacts")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmTelegBotContacts_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmTelegBotContactsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmTelegBotContacts_Users");

                    b.Navigation("Company");

                    b.Navigation("CompanyPerson");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegBotMessageType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmTelegBotMessageType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmTelegBotMessageType_Languages");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegBotSetting", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmTelegBotSettingFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmTelegBotSetting_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmTelegBotSetting")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmTelegBotSetting_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmTelegBotSettingUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmTelegBotSetting_Users");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegChatMessage", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("CrmTelegChatMessage")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_CrmTelegChatMessage_Users");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmTelegChatMessage")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmTelegChatMessage_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegMessageType", "MessageType")
                        .WithMany("CrmTelegChatMessage")
                        .HasForeignKey("MessageTypeId")
                        .HasConstraintName("FK_CrmTelegChatMessage_CrmTelegMessageType");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegSetting", "Setting")
                        .WithMany("CrmTelegChatMessage")
                        .HasForeignKey("SettingId")
                        .HasConstraintName("FK_CrmTelegChatMessage_CrmTelegSetting");

                    b.Navigation("CrmUser");

                    b.Navigation("Language");

                    b.Navigation("MessageType");

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegContacts", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Company")
                        .WithMany("CrmTelegContacts")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CrmTelegContacts_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "CompanyPerson")
                        .WithMany("CrmTelegContacts")
                        .HasForeignKey("CompanyPersonId")
                        .HasConstraintName("FK_CrmTelegContacts_CrmCompanyPersons");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmTelegContactsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmTelegContacts_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmTelegContacts")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmTelegContacts_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegSetting", "Setting")
                        .WithMany("CrmTelegContacts")
                        .HasForeignKey("SettingId")
                        .HasConstraintName("FK_CrmTelegContacts_CrmTelegSetting");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmTelegContactsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmTelegContacts_Users");

                    b.Navigation("Company");

                    b.Navigation("CompanyPerson");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("Setting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegMessageType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmTelegMessageType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmTelegMessageType_Languages");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegSetting", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmTelegSettingFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmTelegSetting_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmTelegSetting")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmTelegSetting_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmTelegSettingUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmTelegSetting_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTempEmails", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmTempEmailsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmTempEmails_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmTempEmails")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmTempEmails_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "PrsRegisterUser")
                        .WithMany("CrmTempEmailsPrsRegisterUser")
                        .HasForeignKey("PrsRegisterUserId")
                        .HasConstraintName("FK_CrmTempEmails_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmTempEmailsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmTempEmails_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("PrsRegisterUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTimeAttendance", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmTimeAttendanceFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmTimeAttendance_Users2")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmTimeAttendance")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmTimeAttendance_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "TmUser")
                        .WithMany("CrmTimeAttendanceTmUser")
                        .HasForeignKey("TmUserId")
                        .HasConstraintName("FK_CrmTimeAttendance_Users1")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmTimeAttendanceUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmTimeAttendance_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("TmUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTimeAttendanceBase", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmTimeAttendanceBaseFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmTimeAttendanceBase_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmTimeAttendanceBase")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmTimeAttendanceBase_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmTimeAttendanceBaseUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmTimeAttendanceBase_Users1")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTimeAttendanceLog", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmTimeAttendanceLogFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmTimeAttendanceLog_Users1")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmTimeAttendanceLog")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmTimeAttendanceLog_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "TmlUser")
                        .WithMany("CrmTimeAttendanceLogTmlUser")
                        .HasForeignKey("TmlUserId")
                        .HasConstraintName("FK_CrmTimeAttendanceLog_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmTimeAttendanceLogUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmTimeAttendanceLog_Users2")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("TmlUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserNotes", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmUserNotesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmUserNotes_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmUserNotes")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmUserNotes_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmUserNotesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmUserNotes_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTaskGroups", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmUserTaskGroupsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmUserTaskGroups_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmUserTaskGroups")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmUserTaskGroups_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmUserTaskGroupsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmUserTaskGroups_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTaskGroupsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmUserTaskGroupsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmUserTaskGroups_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTaskGroups", "UserTaskGroupNavigation")
                        .WithMany("CrmUserTaskGroupsLang")
                        .HasForeignKey("UserTaskGroupId")
                        .HasConstraintName("FK_CrmUserTaskGroups_Lang_CrmUserTaskGroups")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("UserTaskGroupNavigation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTaskPriorities", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmUserTaskPrioritiesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmUserTaskPriorities_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmUserTaskPriorities")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmUserTaskPriorities_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmUserTaskPrioritiesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmUserTaskPriorities_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTaskPrioritiesLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmUserTaskPrioritiesLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmUserTaskPriorities_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTaskPriorities", "UserTaskPriority")
                        .WithMany("CrmUserTaskPrioritiesLang")
                        .HasForeignKey("UserTaskPriorityId")
                        .HasConstraintName("FK_CrmUserTaskPriorities_Lang_CrmUserTaskPriorities")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("UserTaskPriority");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTasks", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmUserTasksFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmUserTasks_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmUserTasks")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmUserTasks_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmUserTasksUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmUserTasks_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTaskGroups", "UserTaskGroup")
                        .WithMany("CrmUserTasks")
                        .HasForeignKey("UserTaskGroupId")
                        .HasConstraintName("FK_CrmUserTasks_CrmUserTaskGroups");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTaskPriorities", "UserTaskPriority")
                        .WithMany("CrmUserTasks")
                        .HasForeignKey("UserTaskPriorityId")
                        .HasConstraintName("FK_CrmUserTasks_CrmUserTaskPriorities");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");

                    b.Navigation("UserTaskGroup");

                    b.Navigation("UserTaskPriority");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTasksLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmUserTasksLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmUserTasks_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTasks", "UserTask")
                        .WithMany("CrmUserTasksLang")
                        .HasForeignKey("UserTaskId")
                        .HasConstraintName("FK_CrmUserTasks_Lang_CrmUserTasks")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("UserTask");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmVersionUpgrade", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmVersionUpgrade")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmVersionUpgrade_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmVersionUpgrade")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmVersionUpgrade_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmVersionUpgradeDetails", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmVersionUpgradeDetails")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmVersionUpgradeDetails_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmVersionUpgradeDetails")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmVersionUpgradeDetails_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmVersions", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmVersions")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmVersions_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmVersions")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmVersions_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmWebSetting", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmWebSettingFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmWebSetting_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmWebSetting")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmWebSetting_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmWebSettingUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmWebSetting_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysCideviceType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmsysCideviceType")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmsysCIDeviceType_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmsysCideviceType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmsysCIDeviceType_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysCipopUpSetting", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmsysCipopUpSettingFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmsysCIPopUpSetting_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmsysCipopUpSetting")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmsysCIPopUpSetting_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmsysCipopUpSettingUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmsysCIPopUpSetting_Users1")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysCisetting", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysCideviceType", "DeviceType")
                        .WithMany("CrmsysCisetting")
                        .HasForeignKey("DeviceTypeId")
                        .HasConstraintName("FK_CrmsysCISetting_CrmsysCIDeviceType");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmsysCisetting")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmsysCISetting_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmsysCisetting")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmsysCISetting_Languages");

                    b.Navigation("DeviceType");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysDbobjects", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmsysDbobjects")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmsysDBObjects_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmsysDbobjects")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmsysDBObjects_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysDbobjectsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysDbobjects", "Dbobject")
                        .WithMany("CrmsysDbobjectsLang")
                        .HasForeignKey("DbobjectId")
                        .HasConstraintName("FK_CrmsysDBObjects_Lang_CrmsysDBObjects")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmsysDbobjectsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmsysDBObjects_Lang_Languages")
                        .IsRequired();

                    b.Navigation("Dbobject");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysDbtempInfo", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmsysDbtempInfoFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmsysDBTempInfo_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmsysDbtempInfo")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmsysDBTempInfo_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysDbtempInfoType", "Type")
                        .WithMany("CrmsysDbtempInfo")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_CrmsysDBTempInfo_CrmsysDBTempInfoType");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmsysDbtempInfoUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmsysDBTempInfo_Users");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysDbtempInfoType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmsysDbtempInfoType")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmsysDBTempInfoType_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmsysDbtempInfoType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmsysDBTempInfoType_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysFormActions", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmsysFormActions")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmsysFormActions_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysForms", "Form")
                        .WithMany("CrmsysFormActions")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_CrmsysFormActions_CrmsysForms")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmsysFormActions")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmsysFormActions_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Form");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysFormActionsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysFormActions", "IdNavigation")
                        .WithMany("CrmsysFormActionsLang")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_CrmsysFormActions_Lang_CrmsysFormActions")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmsysFormActionsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmsysFormActions_Lang_Languages")
                        .IsRequired();

                    b.Navigation("IdNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysFormObjectProperties", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmsysFormObjectPropertiesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmsysFormObjectProperties_Users2");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysForms", "Form")
                        .WithMany("CrmsysFormObjectProperties")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_CrmsysFormObjectProperties_CrmsysForms");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmsysFormObjectProperties")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmsysFormObjectProperties_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmsysFormObjectPropertiesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmsysFormObjectProperties_Users");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Form");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysFormObjectPropertiesLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysFormObjectProperties", "IdNavigation")
                        .WithMany("CrmsysFormObjectPropertiesLang")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_CrmsysFormObjectProperties_Lang_CrmsysFormObjectProperties")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmsysFormObjectPropertiesLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmsysFormObjectProperties_Lang_Languages")
                        .IsRequired();

                    b.Navigation("IdNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysForms", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmsysForms")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmsysForms_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmsysForms")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmsysForms_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysFormsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysForms", "IdNavigation")
                        .WithMany("CrmsysFormsLang")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_CrmsysForms_Lang_CrmsysForms")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmsysFormsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmsysForms_Lang_Languages")
                        .IsRequired();

                    b.Navigation("IdNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysRollPermission", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmsysRollPermission")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmsysRollPermission_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysFormActions", "FormAction")
                        .WithMany("CrmsysRollPermission")
                        .HasForeignKey("FormActionId")
                        .HasConstraintName("FK_CrmsysRollPermission_CrmsysFormActions");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysForms", "Form")
                        .WithMany("CrmsysRollPermission")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_CrmsysRollPermission_CrmsysForms")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmsysRollPermission")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmsysRollPermission_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysRolls", "Roll")
                        .WithMany("CrmsysRollPermission")
                        .HasForeignKey("RollId")
                        .HasConstraintName("FK_CrmsysRollPermission_CrmsysRolls")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Form");

                    b.Navigation("FormAction");

                    b.Navigation("Language");

                    b.Navigation("Roll");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysRolls", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmsysRolls")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmsysRolls_Users");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmsysRolls")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmsysRolls_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysRollsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysRolls", "IdNavigation")
                        .WithMany("CrmsysRollsLang")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_CrmsysRolls_Lang_CrmsysRolls")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmsysRollsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmsysRolls_Lang_Languages")
                        .IsRequired();

                    b.Navigation("IdNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysSetting", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmsysSettingFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CrmsysSetting_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmsysSetting")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmsysSetting_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccSystems", "LinkAccSystem")
                        .WithMany("CrmsysSetting")
                        .HasForeignKey("LinkAccSystemId")
                        .HasConstraintName("FK_CrmsysSetting_CrmLinkAccSystems");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmsysSettingUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmsysSetting_Users");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("LinkAccSystem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysSettingLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysSetting", "IdNavigation")
                        .WithMany("CrmsysSettingLang")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_CrmsysSetting_Lang_CrmsysSetting")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmsysSettingLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CrmsysSetting_Lang_Languages")
                        .IsRequired();

                    b.Navigation("IdNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmtmpManageTellNumber", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("CrmtmpManageTellNumberFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_CRMtmpManageTellNumber_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("CrmtmpManageTellNumber")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_CRMtmpManageTellNumber_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("CrmtmpManageTellNumberUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CRMtmpManageTellNumber_Users");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Education", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("EducationFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_Education_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("Education")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Education_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("EducationUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Education_Users");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EducationLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Education", "EducationNavigation")
                        .WithMany("EducationLang")
                        .HasForeignKey("EducationId")
                        .HasConstraintName("FK_Education_Lang_Education")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("EducationLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Education_Lang_Languages")
                        .IsRequired();

                    b.Navigation("EducationNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailDefaultBodyText", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("EmailDefaultBodyTextFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_EmailDefaultBodyText_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("EmailDefaultBodyText")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_EmailDefaultBodyText_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("EmailDefaultBodyTextUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EmailDefaultBodyText_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailDefaultBodyTextLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.EmailDefaultBodyText", "EmailDefaultBodyText")
                        .WithMany("EmailDefaultBodyTextLang")
                        .HasForeignKey("EmailDefaultBodyTextId")
                        .HasConstraintName("FK_EmailDefaultBodyText_Lang_EmailDefaultBodyText")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("EmailDefaultBodyTextLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_EmailDefaultBodyText_Lang_Languages")
                        .IsRequired();

                    b.Navigation("EmailDefaultBodyText");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailReceive", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Company")
                        .WithMany("EmailReceive")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_EmailReceive_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "CompanyPerson")
                        .WithMany("EmailReceive")
                        .HasForeignKey("CompanyPersonId")
                        .HasConstraintName("FK_EmailReceive_CrmCompanyPersons");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.EmailReceiveFolders", "EmailReceiveFolder")
                        .WithMany("EmailReceive")
                        .HasForeignKey("EmailReceiveFolderId")
                        .HasConstraintName("FK_EmailReceive_EmailReceiveFolders")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("EmailReceiveFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_EmailReceive_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("EmailReceive")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_EmailReceive_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", "Project")
                        .WithMany("EmailReceive")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_EmailReceive_CrmProjects");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.EmailUsersInfo", "ToUserEmailUserInfo")
                        .WithMany("EmailReceive")
                        .HasForeignKey("ToUserEmailUserInfoId")
                        .HasConstraintName("FK_EmailReceive_EmailUsersInfo")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("EmailReceiveUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EmailReceive_Users")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyPerson");

                    b.Navigation("EmailReceiveFolder");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("Project");

                    b.Navigation("ToUserEmailUserInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailReceiveAttachments", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Company")
                        .WithMany("EmailReceiveAttachments")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_EmailReceiveAttachments_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "CompanyPerson")
                        .WithMany("EmailReceiveAttachments")
                        .HasForeignKey("CompanyPersonId")
                        .HasConstraintName("FK_EmailReceiveAttachments_CrmCompanyPersons");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.EmailReceive", "EmailReceive")
                        .WithMany("EmailReceiveAttachments")
                        .HasForeignKey("EmailReceiveId")
                        .HasConstraintName("FK_EmailReceiveAttachments_EmailReceive")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("EmailReceiveAttachmentsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_EmailReceiveAttachments_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("EmailReceiveAttachments")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_EmailReceiveAttachments_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", "Project")
                        .WithMany("EmailReceiveAttachments")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_EmailReceiveAttachments_CrmProjects");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("EmailReceiveAttachmentsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EmailReceiveAttachments_Users")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyPerson");

                    b.Navigation("EmailReceive");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailReceiveFolders", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.EmailUsersInfo", "EmailUsersInfo")
                        .WithMany("EmailReceiveFolders")
                        .HasForeignKey("EmailUsersInfoId")
                        .HasConstraintName("FK_EmailReceiveFolders_EmailUsersInfo")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("EmailReceiveFoldersFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_EmailReceiveFolders_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("EmailReceiveFolders")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_EmailReceiveFolders_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("EmailReceiveFoldersUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EmailReceiveFolders_Users")
                        .IsRequired();

                    b.Navigation("EmailUsersInfo");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailSendAttachment", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.EmailSendHeader", "EmailSendHeader")
                        .WithMany("EmailSendAttachment")
                        .HasForeignKey("EmailSendHeaderId")
                        .HasConstraintName("FK_EmailSendAttachment_EmailSendHeader")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("EmailSendAttachment")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_EmailSendAttachment_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("EmailSendAttachment")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_EmailSendAttachment_Languages");

                    b.Navigation("EmailSendHeader");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailSendDetail", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "EmailCmp")
                        .WithMany("EmailSendDetail")
                        .HasForeignKey("EmailCmpId")
                        .HasConstraintName("FK_EmailSendDetail_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", "EmailCmpPrj")
                        .WithMany("EmailSendDetail")
                        .HasForeignKey("EmailCmpPrjId")
                        .HasConstraintName("FK_EmailSendDetail_CrmProjects");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "EmailCmpPrs")
                        .WithMany("EmailSendDetail")
                        .HasForeignKey("EmailCmpPrsId")
                        .HasConstraintName("FK_EmailSendDetail_CrmCompanyPersons");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.EmailSendHeader", "EmailSendHeader")
                        .WithMany("EmailSendDetail")
                        .HasForeignKey("EmailSendHeaderId")
                        .HasConstraintName("FK_EmailSendDetail_EmailSendHeader")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("EmailSendDetail")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_EmailSendDetail_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("EmailSendDetail")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_EmailSendDetail_Languages");

                    b.Navigation("EmailCmp");

                    b.Navigation("EmailCmpPrj");

                    b.Navigation("EmailCmpPrs");

                    b.Navigation("EmailSendHeader");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailSendHeader", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.EmailSetting", "EmailSetting")
                        .WithMany("EmailSendHeader")
                        .HasForeignKey("EmailSettingId")
                        .HasConstraintName("FK_EmailSendHeader_EmailSetting")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.EmailUsersInfo", "EmailUsersInfo")
                        .WithMany("EmailSendHeader")
                        .HasForeignKey("EmailUsersInfoId")
                        .HasConstraintName("FK_EmailSendHeader_EmailUsersInfo")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("EmailSendHeaderFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_EmailSendHeader_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("EmailSendHeader")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_EmailSendHeader_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("EmailSendHeaderUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EmailSendHeader_Users")
                        .IsRequired();

                    b.Navigation("EmailSetting");

                    b.Navigation("EmailUsersInfo");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailSetting", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("EmailSettingFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_EmailSetting_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("EmailSetting")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_EmailSetting_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("EmailSettingUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EmailSetting_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailUserDefaultSetting", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("EmailUserDefaultSettingFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_EmailUserDefaultSetting_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("EmailUserDefaultSetting")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_EmailUserDefaultSetting_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("EmailUserDefaultSettingUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EmailUserDefaultSetting_Users1")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailUserTempTank", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "EmailCmp")
                        .WithMany("EmailUserTempTank")
                        .HasForeignKey("EmailCmpId")
                        .HasConstraintName("FK_EmailUserTempTank_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", "EmailCmpPrj")
                        .WithMany("EmailUserTempTank")
                        .HasForeignKey("EmailCmpPrjId")
                        .HasConstraintName("FK_EmailUserTempTank_CrmProjects");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "EmailCmpPrs")
                        .WithMany("EmailUserTempTank")
                        .HasForeignKey("EmailCmpPrsId")
                        .HasConstraintName("FK_EmailUserTempTank_CrmCompanyPersons");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("EmailUserTempTankFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_EmailUserTempTank_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("EmailUserTempTank")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_EmailUserTempTank_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("EmailUserTempTankUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EmailUserTempTank_Users")
                        .IsRequired();

                    b.Navigation("EmailCmp");

                    b.Navigation("EmailCmpPrj");

                    b.Navigation("EmailCmpPrs");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailUsersInfo", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "EuUser")
                        .WithMany("EmailUsersInfoEuUser")
                        .HasForeignKey("EuUserId")
                        .HasConstraintName("FK_EmailUsersInfo_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("EmailUsersInfoFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_EmailUsersInfo_Users2")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("EmailUsersInfo")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_EmailUsersInfo_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("EmailUsersInfoUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EmailUsersInfo_Users1")
                        .IsRequired();

                    b.Navigation("EuUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Languages", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("LanguagesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_Languages_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("LanguagesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Languages_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.MobApiAndTableDetail", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("MobApiAndTableDetailFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_MobApiAndTableDetail_FirstRegisterUsers");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("MobApiAndTableDetail")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_MobApiAndTableDetail_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("MobApiAndTableDetailUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_MobApiAndTableDetail_Users");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.MobCompanyAppInfo", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Company")
                        .WithMany("MobCompanyAppInfo")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_MobCompanyAppInfo_CrmCompany")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "CompanyPerson")
                        .WithMany("MobCompanyAppInfo")
                        .HasForeignKey("CompanyPersonId")
                        .HasConstraintName("FK_MobCompanyAppInfo_CrmCompanyPersons")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("MobCompanyAppInfoFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_MobCompanyAppInfo_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("MobCompanyAppInfo")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_MobCompanyAppInfo_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("MobCompanyAppInfoUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_MobCompanyAppInfo_Users1")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyPerson");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.MyWebsites", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("MyWebsites")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_MyWebsites_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("MyWebsites")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_MyWebsites_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.ParsaPooladMenus", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.ParsaPooladMenus", "ParsaPooladMenu")
                        .WithMany()
                        .HasForeignKey("ParsaPooladMenusId1");

                    b.Navigation("ParsaPooladMenu");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollItemTypes", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("PayRollItemTypesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_PayRollItemTypes_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("PayRollItemTypes")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PayRollItemTypes_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("PayRollItemTypesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PayRollItemTypes_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollItemTypesLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("PayRollItemTypesLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PayRollItemTypes_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PayRollItemTypes", "PayRollItemType")
                        .WithMany("PayRollItemTypesLang")
                        .HasForeignKey("PayRollItemTypeId")
                        .HasConstraintName("FK_PayRollItemTypes_Lang_PayRollItemTypes")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PayRollItemType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollItems", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("PayRollItemsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_PayRollItems_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PayRollItemTypes", "ItemType")
                        .WithMany("PayRollItems")
                        .HasForeignKey("ItemTypeId")
                        .HasConstraintName("FK_PayRollItems_PayRollItemTypes")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("PayRollItems")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PayRollItems_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("PayRollItemsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PayRollItems_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("ItemType");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollItemsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("PayRollItemsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PayRollItems_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PayRollItems", "PayRollItem")
                        .WithMany("PayRollItemsLang")
                        .HasForeignKey("PayRollItemId")
                        .HasConstraintName("FK_PayRollItems_Lang_PayRollItems")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PayRollItem");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserCycle", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("PayRollUserCycleCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_PayRollUserCycle_CrmUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormat", "CyclePrintFormat")
                        .WithMany("PayRollUserCycle")
                        .HasForeignKey("CyclePrintFormatId")
                        .HasConstraintName("FK_PayRollUserCycle_PrintFormat");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CycleVerifierUser")
                        .WithMany("PayRollUserCycleCycleVerifierUser")
                        .HasForeignKey("CycleVerifierUserId")
                        .HasConstraintName("FK_PayRollUserCycle_CycleVerifierUsers");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("PayRollUserCycleFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_PayRollUserCycle_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("PayRollUserCycle")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PayRollUserCycle_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("PayRollUserCycleUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PayRollUserCycle_Users")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("CyclePrintFormat");

                    b.Navigation("CycleVerifierUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserCycleItemValues", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("PayRollUserCycleItemValuesCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_PayRollUserCycleItemValues_CrmUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserCycle", "Cycle")
                        .WithMany("PayRollUserCycleItemValues")
                        .HasForeignKey("CycleId")
                        .HasConstraintName("FK_PayRollUserCycleItemValues_PayRollUserCycle")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("PayRollUserCycleItemValuesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_PayRollUserCycleItemValues_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PayRollItems", "Item")
                        .WithMany("PayRollUserCycleItemValues")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_PayRollUserCycleItemValues_PayRollItems")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("PayRollUserCycleItemValues")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PayRollUserCycleItemValues_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("PayRollUserCycleItemValuesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PayRollUserCycleItemValues_Users")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("Cycle");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Item");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserCycleLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("PayRollUserCycleLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PayRollUserCycle_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserCycle", "PayRollUserCycle")
                        .WithMany("PayRollUserCycleLang")
                        .HasForeignKey("PayRollUserCycleId")
                        .HasConstraintName("FK_PayRollUserCycle_Lang_PayRollUserCycle")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PayRollUserCycle");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserDefaultItems", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("PayRollUserDefaultItemsCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_PayRollUserDefaultItems_CrmUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("PayRollUserDefaultItemsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_PayRollUserDefaultItems_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("PayRollUserDefaultItems")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PayRollUserDefaultItems_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("PayRollUserDefaultItemsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PayRollUserDefaultItems_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PayRollItems", "UserItem")
                        .WithMany("PayRollUserDefaultItems")
                        .HasForeignKey("UserItemId")
                        .HasConstraintName("FK_PayRollUserDefaultItems_PayRollItems")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");

                    b.Navigation("UserItem");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserPaymentTypes", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("PayRollUserPaymentTypesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_PayRollUserPaymentTypes_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("PayRollUserPaymentTypes")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PayRollUserPaymentTypes_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("PayRollUserPaymentTypesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PayRollUserPaymentTypes_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserPaymentTypesLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("PayRollUserPaymentTypesLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PayRollUserPaymentTypes_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserPaymentTypes", "PayRollUserPaymentType")
                        .WithMany("PayRollUserPaymentTypesLang")
                        .HasForeignKey("PayRollUserPaymentTypeId")
                        .HasConstraintName("FK_PayRollUserPaymentTypes_Lang_PayRollUserPaymentTypes")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PayRollUserPaymentType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserPayments", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserCycle", "Cycle")
                        .WithMany("PayRollUserPayments")
                        .HasForeignKey("CycleId")
                        .HasConstraintName("FK_PayRollUserPayments_PayRollUserCycle")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("PayRollUserPaymentsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_PayRollUserPayments_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("PayRollUserPayments")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PayRollUserPayments_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserPaymentTypes", "PayType")
                        .WithMany("PayRollUserPayments")
                        .HasForeignKey("PayTypeId")
                        .HasConstraintName("FK_PayRollUserPayments_PayRollUserPaymentTypes")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("PayRollUserPaymentsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PayRollUserPayments_Users")
                        .IsRequired();

                    b.Navigation("Cycle");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("PayType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserPaymentsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("PayRollUserPaymentsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PayRollUserPayments_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserPayments", "PayRollUserPayment")
                        .WithMany("PayRollUserPaymentsLang")
                        .HasForeignKey("PayRollUserPaymentId")
                        .HasConstraintName("FK_PayRollUserPayments_Lang_PayRollUserPayments")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PayRollUserPayment");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormat", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("PrintFormatFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_PrintFormat_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("PrintFormat")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PrintFormat_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormatType", "PrintFormatType")
                        .WithMany("PrintFormat")
                        .HasForeignKey("PrintFormatTypeId")
                        .HasConstraintName("FK_PrintFormat_PrintFormatType")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("PrintFormatUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PrintFormat_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("PrintFormatType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormatLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("PrintFormatLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PrintFormat_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormat", "PrintFormat")
                        .WithMany("PrintFormatLang")
                        .HasForeignKey("PrintFormatId")
                        .HasConstraintName("FK_PrintFormat_Lang_PrintFormat")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PrintFormat");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormatType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("PrintFormatTypeFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_PrintFormatType_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("PrintFormatType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PrintFormatType_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("PrintFormatTypeUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PrintFormatType_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormatTypeLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("PrintFormatTypeLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PrintFormatType_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormatType", "PrintFormatTypeNavigation")
                        .WithMany("PrintFormatTypeLang")
                        .HasForeignKey("PrintFormatTypeId")
                        .HasConstraintName("FK_PrintFormatType_Lang_PrintFormatType")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PrintFormatTypeNavigation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Projects", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("Projects")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_Projects_Users");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("Projects")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Projects_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.ProjectsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Projects", "IdNavigation")
                        .WithMany("ProjectsLang")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_Projects_Lang_Projects")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("ProjectsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Projects_Lang_Languages")
                        .IsRequired();

                    b.Navigation("IdNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Province", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Country", "Country")
                        .WithMany("Province")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Province_Country")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("ProvinceFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_Province_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("Province")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Province_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("ProvinceUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Province_Users")
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.ProvinceLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("ProvinceLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Province_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Province", "ProvinceNavigation")
                        .WithMany("ProvinceLang")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_Province_Lang_Province")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProvinceNavigation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SecLetterDefaultSettings", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SecLetterDefaultSettingsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_SecLetterDefaultSettings_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SecLetterDefaultSettings")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SecLetterDefaultSettings_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormat", "LdprintFormat")
                        .WithMany("SecLetterDefaultSettings")
                        .HasForeignKey("LdprintFormatId")
                        .HasConstraintName("FK_SecLetterDefaultSettings_PrintFormat");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "LdreferUser")
                        .WithMany("SecLetterDefaultSettingsLdreferUser")
                        .HasForeignKey("LdreferUserId")
                        .HasConstraintName("FK_SecLetterDefaultSettings_Users2");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "LdverifierRequest")
                        .WithMany("SecLetterDefaultSettingsLdverifierRequest")
                        .HasForeignKey("LdverifierRequestId")
                        .HasConstraintName("FK_SecLetterDefaultSettings_Users3");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("SecLetterDefaultSettingsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SecLetterDefaultSettings_Users1")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("LdprintFormat");

                    b.Navigation("LdreferUser");

                    b.Navigation("LdverifierRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SecLetterDefaultSettingsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SecLetterDefaultSettingsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SecLetterDefaultSettings_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.SecLetterDefaultSettings", "LetterDefaultSetting")
                        .WithMany("SecLetterDefaultSettingsLang")
                        .HasForeignKey("LetterDefaultSettingId")
                        .HasConstraintName("FK_SecLetterDefaultSettings_Lang_SecLetterDefaultSettings")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("LetterDefaultSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SecLetterType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SecLetterTypeFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_SecLetterType_Users1")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SecLetterType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SecLetterType_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("SecLetterTypeUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SecLetterType_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SecLetterTypeLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SecLetterTypeLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SecLetterType_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.SecLetterType", "LetterType")
                        .WithMany("SecLetterTypeLang")
                        .HasForeignKey("LetterTypeId")
                        .HasConstraintName("FK_SecLetterType_Lang_SecLetterType")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("LetterType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SecLetters", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SecLettersFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_SecLetters_Users1")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SecLetters")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SecLetters_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "LetterCompany")
                        .WithMany("SecLetters")
                        .HasForeignKey("LetterCompanyId")
                        .HasConstraintName("FK_SecLetters_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormat", "LetterPrintFormat")
                        .WithMany("SecLetters")
                        .HasForeignKey("LetterPrintFormatId")
                        .HasConstraintName("FK_SecLetters_PrintFormat");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.SecLetterType", "LetterType")
                        .WithMany("SecLetters")
                        .HasForeignKey("LetterTypeId")
                        .HasConstraintName("FK_SecLetters_SecLetterType")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "LetterVerifier")
                        .WithMany("SecLettersLetterVerifier")
                        .HasForeignKey("LetterVerifierId")
                        .HasConstraintName("FK_SecLetters_Users2");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "LetterVerifierRequest")
                        .WithMany("SecLettersLetterVerifierRequest")
                        .HasForeignKey("LetterVerifierRequestId")
                        .HasConstraintName("FK_SecLetters_Users3");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "LettercmpPerson")
                        .WithMany("SecLetters")
                        .HasForeignKey("LettercmpPersonId")
                        .HasConstraintName("FK_SecLetters_CrmCompanyPersons");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", "LettercmpProject")
                        .WithMany("SecLetters")
                        .HasForeignKey("LettercmpProjectId")
                        .HasConstraintName("FK_SecLetters_CrmProjects");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("SecLettersUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SecLetters_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("LettercmpPerson");

                    b.Navigation("LettercmpProject");

                    b.Navigation("LetterCompany");

                    b.Navigation("LetterPrintFormat");

                    b.Navigation("LetterType");

                    b.Navigation("LetterVerifier");

                    b.Navigation("LetterVerifierRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SecLettersLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SecLettersLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SecLetters_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.SecLetters", "Letter")
                        .WithMany("SecLettersLang")
                        .HasForeignKey("LetterId")
                        .HasConstraintName("FK_SecLetters_Lang_SecLetters")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Letter");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Sex", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SexFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_Sex_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("Sex")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Sex_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("SexUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Sex_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SexLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SexLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Sex_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Sex", "Sex")
                        .WithMany("SexLang")
                        .HasForeignKey("SexId")
                        .HasConstraintName("FK_Sex_Lang_Sex")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Sex");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsDefaultBodyText", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SmsDefaultBodyTextFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_SmsDefaultBodyText_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.SmsDefaultBodyTextGroups", "Group")
                        .WithMany("SmsDefaultBodyText")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_SmsDefaultBodyText_SmsDefaultBodyTextGroups");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsDefaultBodyText")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsDefaultBodyText_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("SmsDefaultBodyTextUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SmsDefaultBodyText_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Group");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsDefaultBodyTextGroups", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SmsDefaultBodyTextGroupsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_SmsDefaultBodyTextGroups_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsDefaultBodyTextGroups")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsDefaultBodyTextGroups_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("SmsDefaultBodyTextGroupsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SmsDefaultBodyTextGroups_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsDefaultBodyTextGroupsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.SmsDefaultBodyTextGroups", "IdNavigation")
                        .WithMany("SmsDefaultBodyTextGroupsLang")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_SmsDefaultBodyTextGroups_Lang_SmsDefaultBodyTextGroups")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsDefaultBodyTextGroupsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsDefaultBodyTextGroups_Lang_Languages")
                        .IsRequired();

                    b.Navigation("IdNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsDefaultBodyTextLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.SmsDefaultBodyText", "IdNavigation")
                        .WithMany("SmsDefaultBodyTextLang")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_SmsDefaultBodyText_Lang_SmsDefaultBodyText")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsDefaultBodyTextLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsDefaultBodyText_Lang_Languages")
                        .IsRequired();

                    b.Navigation("IdNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsDeliveryStatus", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SmsDeliveryStatus")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_SmsDeliveryStatus_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsDeliveryStatus")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsDeliveryStatus_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsDeliveryStatusLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.SmsDeliveryStatus", "IdNavigation")
                        .WithMany("SmsDeliveryStatusLang")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_SmsDeliveryStatus_Lang_SmsDeliveryStatus")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsDeliveryStatusLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsDeliveryStatus_Lang_Languages")
                        .IsRequired();

                    b.Navigation("IdNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsGsmmodemDelivery", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SmsGsmmodemDelivery")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_SmsGSMModemDelivery_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsGsmmodemDelivery")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsGSMModemDelivery_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsGsmmodemSetting", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SmsGsmmodemSettingFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_SmsGSMModemSetting_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsGsmmodemSetting")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsGSMModemSetting_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("SmsGsmmodemSettingUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SmsGSMModemSetting_Users");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsGsmreceives", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SmsGsmreceives")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_SmsGSMReceives_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsGsmreceives")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsGSMReceives_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsGsmsendingTank", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SmsGsmsendingTank")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_SmsGSMSendingTank_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsGsmsendingTank")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsGSMSendingTank_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsProviders", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SmsProvidersFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_SmsProviders_Users1")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsProviders")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsProviders_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("SmsProvidersUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SmsProviders_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsReceive", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Company")
                        .WithMany("SmsReceive")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_SmsReceive_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "CompanyPerson")
                        .WithMany("SmsReceive")
                        .HasForeignKey("CompanyPersonId")
                        .HasConstraintName("FK_SmsReceive_CrmCompanyPersons");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SmsReceiveFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_SmsReceive_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsReceive")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsReceive_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("SmsReceiveUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SmsReceive_Users");

                    b.Navigation("Company");

                    b.Navigation("CompanyPerson");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsReceiveFromWsdl", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SmsReceiveFromWsdl")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_SmsReceiveFromWSDL_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsReceiveFromWsdl")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsReceiveFromWSDL_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsSendDetail", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Company")
                        .WithMany("SmsSendDetail")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_SmsSendDetail_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "CompanyPerson")
                        .WithMany("SmsSendDetail")
                        .HasForeignKey("CompanyPersonId")
                        .HasConstraintName("FK_SmsSendDetail_CrmCompanyPersons");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SmsSendDetailFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_SmsSendDetail_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.SmsSendHeader", "Head")
                        .WithMany("SmsSendDetail")
                        .HasForeignKey("HeadId")
                        .HasConstraintName("FK_SmsSendDetail_SmsSendHeader")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsSendDetail")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsSendDetail_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "SendUser")
                        .WithMany("SmsSendDetailSendUser")
                        .HasForeignKey("SendUserId")
                        .HasConstraintName("FK_SmsSendDetail_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("SmsSendDetailUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SmsSendDetail_Users")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyPerson");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Head");

                    b.Navigation("Language");

                    b.Navigation("SendUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsSendHeader", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SmsSendHeaderFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_SmsSendHeader_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsSendHeader")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsSendHeader_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "SendUser")
                        .WithMany("SmsSendHeaderSendUser")
                        .HasForeignKey("SendUserId")
                        .HasConstraintName("FK_SmsSendHeader_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("SmsSendHeaderUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SmsSendHeader_Users1")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("SendUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsSendType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SmsSendType")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_SmsSendType_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsSendType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsSendType_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsSendTypeLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.SmsSendType", "IdNavigation")
                        .WithMany("SmsSendTypeLang")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_SmsSendType_Lang_SmsSendType")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsSendTypeLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsSendType_Lang_Languages")
                        .IsRequired();

                    b.Navigation("IdNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsSetting", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SmsSettingFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_SmsSetting_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsSetting")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsSetting_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.SmsProviders", "Provider")
                        .WithMany("SmsSetting")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_SmsSetting_SmsProviders");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("SmsSettingUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SmsSetting_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("Provider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsTempMobileNumbers", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Company")
                        .WithMany("SmsTempMobileNumbers")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_SmsTempMobileNumbers_CrmCompany")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "CompanyPerson")
                        .WithMany("SmsTempMobileNumbers")
                        .HasForeignKey("CompanyPersonId")
                        .HasConstraintName("FK_SmsTempMobileNumbers_CrmCompanyPersons");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SmsTempMobileNumbersFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_SmsTempMobileNumbers_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsTempMobileNumbers")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsTempMobileNumbers_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("SmsTempMobileNumbersUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SmsTempMobileNumbers_Users")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyPerson");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsUserSendCredit", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CreditUser")
                        .WithMany("SmsUserSendCreditCreditUser")
                        .HasForeignKey("CreditUserId")
                        .HasConstraintName("FK_SmsUserSendCredit_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("SmsUserSendCreditFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_SmsUserSendCredit_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsUserSendCredit")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsUserSendCredit_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("SmsUserSendCreditUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SmsUserSendCredit_Users1")
                        .IsRequired();

                    b.Navigation("CreditUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsUserSendCreditLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.SmsUserSendCredit", "IdNavigation")
                        .WithMany("SmsUserSendCreditLang")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_SmsUserSendCredit_Lang_SmsUserSendCredit")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("SmsUserSendCreditLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_SmsUserSendCredit_Lang_Languages")
                        .IsRequired();

                    b.Navigation("IdNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UserDepartmentTicketReferUsers", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.UserDepartments", "Department")
                        .WithMany("UserDepartmentTicketReferUsers")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_UserDepartmentTicketReferUsers_UserDepartments")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("UserDepartmentTicketReferUsersFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_UserDepartmentTicketReferUsers_Users2");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("UserDepartmentTicketReferUsers")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_UserDepartmentTicketReferUsers_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "ReferUser")
                        .WithMany("UserDepartmentTicketReferUsersReferUser")
                        .HasForeignKey("ReferUserId")
                        .HasConstraintName("FK_UserDepartmentTicketReferUsers_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("UserDepartmentTicketReferUsersUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserDepartmentTicketReferUsers_Users1");

                    b.Navigation("Department");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("ReferUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UserDepartments", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("UserDepartmentsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_UserDepartments_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("UserDepartments")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_UserDepartments_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("UserDepartmentsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserDepartments_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UserDepartmentsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.UserDepartments", "DepartmentNavigation")
                        .WithMany("UserDepartmentsLang")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_UserDepartments_Lang_UserDepartments")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("UserDepartmentsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_UserDepartments_Lang_Languages")
                        .IsRequired();

                    b.Navigation("DepartmentNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UserLanguages", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("UserLanguagesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_UserLanguages_Users25");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("UserLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_UserLanguages_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("UserLanguagesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserLanguages_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "UserId1Navigation")
                        .WithMany("UserLanguagesUserId1Navigation")
                        .HasForeignKey("UserId1")
                        .HasConstraintName("FK_UserLanguages_Users1")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");

                    b.Navigation("UserId1Navigation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UserLoginAllowedTimes", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CrmUser")
                        .WithMany("UserLoginAllowedTimesCrmUser")
                        .HasForeignKey("CrmUserId")
                        .HasConstraintName("FK_UserLoginAllowedTimes_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("UserLoginAllowedTimesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_UserLoginAllowedTimes_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstUser")
                        .WithMany("UserLoginAllowedTimesFirstUser")
                        .HasForeignKey("FirstUserId")
                        .HasConstraintName("FK_UserLoginAllowedTimes_Users1")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("UserLoginAllowedTimes")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_UserLoginAllowedTimes_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("UserLoginAllowedTimesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserLoginAllowedTimes_Users2")
                        .IsRequired();

                    b.Navigation("CrmUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("FirstUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UserSignature", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("UserSignatureFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_UserSignature_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("UserSignature")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_UserSignature_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "SignatureUser")
                        .WithMany("UserSignatureSignatureUser")
                        .HasForeignKey("SignatureUserId")
                        .HasConstraintName("FK_UserSignature_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("UserSignatureUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserSignature_Users1")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("SignatureUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Users", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.UserDepartments", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Users_UserDepartments");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("Users")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Users_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "UserId1Navigation")
                        .WithMany("InverseUserId1Navigation")
                        .HasForeignKey("UserId1")
                        .HasConstraintName("FK_Users_Users1");

                    b.Navigation("Department");

                    b.Navigation("Language");

                    b.Navigation("UserId1Navigation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UsersLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("UsersLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Users_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("UsersLang")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Users_Lang_Users")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UsersPermission", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("UsersPermissionFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_UsersPermission_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("UsersPermission")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_UsersPermission_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Projects", "Prj")
                        .WithMany("UsersPermission")
                        .HasForeignKey("PrjId")
                        .HasConstraintName("FK_UsersPermission_Projects")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysRolls", "Roll")
                        .WithMany("UsersPermission")
                        .HasForeignKey("RollId")
                        .HasConstraintName("FK_UsersPermission_CrmsysRolls");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("UsersPermissionUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UsersPermission_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("Prj");

                    b.Navigation("Roll");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UsersPermissionLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.UsersPermission", "IdNavigation")
                        .WithMany("UsersPermissionLang")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_UsersPermission_Lang_UsersPermission")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("UsersPermissionLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_UsersPermission_Lang_Languages")
                        .IsRequired();

                    b.Navigation("IdNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsWareHouse", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsWareHouseFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WsWareHouse_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsWareHouse")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WsWareHouse_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsWareHouse")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WsWareHouse_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsWareHouseUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WsWareHouse_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsWareHouseLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsWareHouseLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WsWareHouse_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsWareHouse", "WareHouse")
                        .WithMany("WsWareHouseLang")
                        .HasForeignKey("WareHouseId")
                        .HasConstraintName("FK_WsWareHouse_Lang_WsWareHouse")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrder", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "BordCompany")
                        .WithMany("WsbuyOrder")
                        .HasForeignKey("BordCompanyId")
                        .HasConstraintName("FK_WSBuyOrder_CrmCompany")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "BordCompanyPerson")
                        .WithMany("WsbuyOrder")
                        .HasForeignKey("BordCompanyPersonId")
                        .HasConstraintName("FK_WSBuyOrder_CrmCompanyPersons");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "BordFirstRegisterUser")
                        .WithMany("WsbuyOrderBordFirstRegisterUser")
                        .HasForeignKey("BordFirstRegisterUserId")
                        .HasConstraintName("FK_WSBuyOrder_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormat", "BordPrintFormat")
                        .WithMany("WsbuyOrder")
                        .HasForeignKey("BordPrintFormatId")
                        .HasConstraintName("FK_WSBuyOrder_PrintFormat");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", "BordProject")
                        .WithMany("WsbuyOrder")
                        .HasForeignKey("BordProjectId")
                        .HasConstraintName("FK_WSBuyOrder_CrmProjects");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "BordReferUser")
                        .WithMany("WsbuyOrderBordReferUser")
                        .HasForeignKey("BordReferUserId")
                        .HasConstraintName("FK_WSBuyOrder_Users3");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderStatus", "BordStatus")
                        .WithMany("WsbuyOrder")
                        .HasForeignKey("BordStatusId")
                        .HasConstraintName("FK_WSBuyOrder_WSBuyOrderStatus");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "BordVerifier")
                        .WithMany("WsbuyOrderBordVerifier")
                        .HasForeignKey("BordVerifierId")
                        .HasConstraintName("FK_WSBuyOrder_Users");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderOpr", "BuyOrderOpr")
                        .WithMany("WsbuyOrder")
                        .HasForeignKey("BuyOrderOprId")
                        .HasConstraintName("FK_WSBuyOrder_WSBuyOrderOpr");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsbuyOrderFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSBuyOrder_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsbuyOrder")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSBuyOrder_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsbuyOrder")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSBuyOrder_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsbuyOrderUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSBuyOrder_Users2")
                        .IsRequired();

                    b.Navigation("BordCompany");

                    b.Navigation("BordCompanyPerson");

                    b.Navigation("BordFirstRegisterUser");

                    b.Navigation("BordPrintFormat");

                    b.Navigation("BordProject");

                    b.Navigation("BordReferUser");

                    b.Navigation("BordStatus");

                    b.Navigation("BordVerifier");

                    b.Navigation("BuyOrderOpr");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderItemSerials", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderItems", "BuyOrderItem")
                        .WithMany("WsbuyOrderItemSerials")
                        .HasForeignKey("BuyOrderItemId")
                        .HasConstraintName("FK_WSBuyOrderItemSerials_WSBuyOrderItem")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsbuyOrderItemSerialsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSBuyOrderItemSerials_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsbuyOrderItemSerials")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSBuyOrderItemSerials_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsbuyOrderItemSerials")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSBuyOrderItemSerials_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsbuyOrderItemSerialsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSBuyOrderItemSerials_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsWareHouse", "Wh")
                        .WithMany("WsbuyOrderItemSerials")
                        .HasForeignKey("Whid")
                        .HasConstraintName("FK_WSBuyOrderItemSerials_WsWareHouse");

                    b.Navigation("BuyOrderItem");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");

                    b.Navigation("Wh");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderItemSerialsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderItemSerials", "BuyOrderItemSerial")
                        .WithMany("WsbuyOrderItemSerialsLang")
                        .HasForeignKey("BuyOrderItemSerialId")
                        .HasConstraintName("FK_WSBuyOrderItemSerials_Lang_WSBuyOrderItemSerials")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsbuyOrderItemSerialsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSBuyOrderItemSerials_Lang_Languages")
                        .IsRequired();

                    b.Navigation("BuyOrderItemSerial");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderItems", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WscurrencyUnits", "BordIcurrencyUnit")
                        .WithMany("WsbuyOrderItems")
                        .HasForeignKey("BordIcurrencyUnitId")
                        .HasConstraintName("FK_WSBuyOrderItems_WSCurrencyUnits");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsproducts", "BordIprd")
                        .WithMany("WsbuyOrderItems")
                        .HasForeignKey("BordIprdId")
                        .HasConstraintName("FK_WSBuyOrderItems_WSProducts")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductUnits", "BordIprdUnit")
                        .WithMany("WsbuyOrderItems")
                        .HasForeignKey("BordIprdUnitId")
                        .HasConstraintName("FK_WSBuyOrderItems_WSProductUnits");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsWareHouse", "BordIwh")
                        .WithMany("WsbuyOrderItems")
                        .HasForeignKey("BordIwhid")
                        .HasConstraintName("FK_WSBuyOrderItems_WSWareHouse");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrder", "BuyOrder")
                        .WithMany("WsbuyOrderItems")
                        .HasForeignKey("BuyOrderId")
                        .HasConstraintName("FK_WSBuyOrderItems_WSBuyOrder")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsbuyOrderItemsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSBuyOrderItems_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsbuyOrderItems")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSBuyOrderItems_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsbuyOrderItems")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSBuyOrderItems_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsbuyOrderItemsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSBuyOrderItems_Users")
                        .IsRequired();

                    b.Navigation("BordIcurrencyUnit");

                    b.Navigation("BordIprd");

                    b.Navigation("BordIprdUnit");

                    b.Navigation("BordIwh");

                    b.Navigation("BuyOrder");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderItemsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderItems", "BuyOrderItem")
                        .WithMany("WsbuyOrderItemsLang")
                        .HasForeignKey("BuyOrderItemId")
                        .HasConstraintName("FK_WSBuyOrderItems_Lang_WSBuyOrderItems")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsbuyOrderItemsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSBuyOrderItems_Lang_Languages")
                        .IsRequired();

                    b.Navigation("BuyOrderItem");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrder", "BuyOrder")
                        .WithMany("WsbuyOrderLang")
                        .HasForeignKey("BuyOrderId")
                        .HasConstraintName("FK_WSBuyOrder_Lang_WSBuyOrder")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsbuyOrderLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSBuyOrder_Lang_Languages")
                        .IsRequired();

                    b.Navigation("BuyOrder");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderOpr", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsbuyOrderOpr")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSBuyOrderOpr_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsbuyOrderOpr")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSBuyOrderOpr_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderOprLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderOpr", "BuyOrderOpr")
                        .WithMany("WsbuyOrderOprLang")
                        .HasForeignKey("BuyOrderOprId")
                        .HasConstraintName("FK_WSBuyOrderOpr_Lang_WSBuyOrderOpr")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsbuyOrderOprLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSBuyOrderOpr_Lang_Languages")
                        .IsRequired();

                    b.Navigation("BuyOrderOpr");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderPaymentTypes", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsbuyOrderPaymentTypesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSBuyOrderPaymentTypes_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsbuyOrderPaymentTypes")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSBuyOrderPaymentTypes_WSFinancialPeriod");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsbuyOrderPaymentTypes")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSBuyOrderPaymentTypes_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsbuyOrderPaymentTypesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSBuyOrderPaymentTypes_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderPaymentTypesLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderPaymentTypes", "BuyOrderPaymentType")
                        .WithMany("WsbuyOrderPaymentTypesLang")
                        .HasForeignKey("BuyOrderPaymentTypeId")
                        .HasConstraintName("FK_WSBuyOrderPaymentTypes_Lang_WSBuyOrderPaymentTypes")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsbuyOrderPaymentTypesLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSBuyOrderPaymentTypes_Lang_Languages")
                        .IsRequired();

                    b.Navigation("BuyOrderPaymentType");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderPayments", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "BordpayFirstRegisterUser")
                        .WithMany("WsbuyOrderPaymentsBordpayFirstRegisterUser")
                        .HasForeignKey("BordpayFirstRegisterUserId")
                        .HasConstraintName("FK_WSBuyOrderPayments_Users");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrder", "BordpayOrder")
                        .WithMany("WsbuyOrderPayments")
                        .HasForeignKey("BordpayOrderId")
                        .HasConstraintName("FK_WSBuyOrderPayments_WSBuyOrder")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderPaymentTypes", "BordpayType")
                        .WithMany("WsbuyOrderPayments")
                        .HasForeignKey("BordpayTypeId")
                        .HasConstraintName("FK_WSBuyOrderPayments_WSBuyOrderPaymentTypes")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsbuyOrderPaymentsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSBuyOrderPayments_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsbuyOrderPayments")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSBuyOrderPayments_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsbuyOrderPayments")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSBuyOrderPayments_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsbuyOrderPaymentsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSBuyOrderPayments_Users1")
                        .IsRequired();

                    b.Navigation("BordpayFirstRegisterUser");

                    b.Navigation("BordpayOrder");

                    b.Navigation("BordpayType");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderPaymentsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderPayments", "BuyOrderPayment")
                        .WithMany("WsbuyOrderPaymentsLang")
                        .HasForeignKey("BuyOrderPaymentId")
                        .HasConstraintName("FK_WSBuyOrderPayments_Lang_WSBuyOrderPayments")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsbuyOrderPaymentsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSBuyOrderPayments_Lang_Languages")
                        .IsRequired();

                    b.Navigation("BuyOrderPayment");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderStatus", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsbuyOrderStatusFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSBuyOrderStatus_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsbuyOrderStatus")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSBuyOrderStatus_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsbuyOrderStatus")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSBuyOrderStatus_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsbuyOrderStatusUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSBuyOrderStatus_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderStatusLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderStatus", "BuyOrderStatusNavigation")
                        .WithMany("WsbuyOrderStatusLang")
                        .HasForeignKey("BuyOrderStatusId")
                        .HasConstraintName("FK_WSBuyOrderStatus_Lang_WSBuyOrderStatus")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsbuyOrderStatusLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSBuyOrderStatus_Lang_Languages")
                        .IsRequired();

                    b.Navigation("BuyOrderStatusNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WscreditDuration", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WscreditDurationFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSCreditDuration_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WscreditDuration")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSCreditDuration_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WscreditDuration")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSCreditDuration_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WscreditDurationUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSCreditDuration_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WscreditDurationLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WscreditDuration", "CreditDurationNavigation")
                        .WithMany("WscreditDurationLang")
                        .HasForeignKey("CreditDurationId")
                        .HasConstraintName("FK_WSCreditDuration_Lang_WSCreditDuration")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WscreditDurationLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSCreditDuration_Lang_Languages")
                        .IsRequired();

                    b.Navigation("CreditDurationNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WscurrencyUnits", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WscurrencyUnitsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSCurrencyUnits_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WscurrencyUnits")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSCurrencyUnits_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WscurrencyUnitsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSCurrencyUnits_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WscurrencyUnitsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WscurrencyUnits", "CurrencyUnitNavigation")
                        .WithMany("WscurrencyUnitsLang")
                        .HasForeignKey("CurrencyUnitId")
                        .HasConstraintName("FK_WSCurrencyUnits_Lang_WSCurrencyUnits")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WscurrencyUnitsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSCurrencyUnits_Lang_Languages")
                        .IsRequired();

                    b.Navigation("CurrencyUnitNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdeliveryTime", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsdeliveryTimeFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSDeliveryTime_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsdeliveryTime")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSDeliveryTime_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsdeliveryTime")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSDeliveryTime_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsdeliveryTimeUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSDeliveryTime_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdeliveryTimeLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsdeliveryTime", "DeliveryTimeNavigation")
                        .WithMany("WsdeliveryTimeLang")
                        .HasForeignKey("DeliveryTimeId")
                        .HasConstraintName("FK_WSDeliveryTime_Lang_WSDeliveryTime")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsdeliveryTimeLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSDeliveryTime_Lang_Languages")
                        .IsRequired();

                    b.Navigation("DeliveryTimeNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Wsdoc", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrder", "BuyOrder")
                        .WithMany("Wsdoc")
                        .HasForeignKey("BuyOrderId")
                        .HasConstraintName("FK_WSDoc_WSBuyOrder");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Company")
                        .WithMany("Wsdoc")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_WSDoc_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "CompanyPerson")
                        .WithMany("Wsdoc")
                        .HasForeignKey("CompanyPersonId")
                        .HasConstraintName("FK_WSDoc_CrmCompanyPersons");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsdocFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSDoc_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("Wsdoc")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSDoc_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("Wsdoc")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSDoc_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsdocOpr", "Opr")
                        .WithMany("Wsdoc")
                        .HasForeignKey("OprId")
                        .HasConstraintName("FK_WSDoc_WSDocOpr")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsorder", "Order")
                        .WithMany("Wsdoc")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_WSDoc_WSOrder");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", "Project")
                        .WithMany("Wsdoc")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_WSDoc_CrmProjects");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsdocUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSDoc_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsWareHouse", "Wh")
                        .WithMany("Wsdoc")
                        .HasForeignKey("Whid")
                        .HasConstraintName("FK_WSDoc_WsWareHouse")
                        .IsRequired();

                    b.Navigation("BuyOrder");

                    b.Navigation("Company");

                    b.Navigation("CompanyPerson");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("Opr");

                    b.Navigation("Order");

                    b.Navigation("Project");

                    b.Navigation("User");

                    b.Navigation("Wh");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdocItemSerials", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsdocItemSerialsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSDocItemSerials_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsdocItemSerials")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSDocItemSerials_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsdocItems", "Item")
                        .WithMany("WsdocItemSerials")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_WSDocItemSerials_WSDocItems")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsdocItemSerials")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSDocItemSerials_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsdocItemSerialsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSDocItemSerials_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsWareHouse", "Wh")
                        .WithMany("WsdocItemSerials")
                        .HasForeignKey("Whid")
                        .HasConstraintName("FK_WSDocItemSerials_WsWareHouse");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Item");

                    b.Navigation("Language");

                    b.Navigation("User");

                    b.Navigation("Wh");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdocItemSerialsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsdocItemSerials", "DocItemSerial")
                        .WithMany("WsdocItemSerialsLang")
                        .HasForeignKey("DocItemSerialId")
                        .HasConstraintName("FK_WSDocItemSerials_Lang_WSDocItemSerials")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsdocItemSerialsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSDocItemSerials_Lang_Languages")
                        .IsRequired();

                    b.Navigation("DocItemSerial");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdocItems", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductCost", "CostNavigation")
                        .WithMany("WsdocItems")
                        .HasForeignKey("CostId")
                        .HasConstraintName("FK_WSDocItems_WSProductCost");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsdoc", "Doc")
                        .WithMany("WsdocItems")
                        .HasForeignKey("DocId")
                        .HasConstraintName("FK_WSDocItems_WSDoc")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsdocItemsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSDocItems_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsdocItems")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSDocItems_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsdocItems")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSDocItems_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsproducts", "Prd")
                        .WithMany("WsdocItems")
                        .HasForeignKey("PrdId")
                        .HasConstraintName("FK_WSDocItems_WSProducts")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsdocItemsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSDocItems_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsWareHouse", "Wh")
                        .WithMany("WsdocItems")
                        .HasForeignKey("Whid")
                        .HasConstraintName("FK_WSDocItems_WsWareHouse");

                    b.Navigation("CostNavigation");

                    b.Navigation("Doc");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("Prd");

                    b.Navigation("User");

                    b.Navigation("Wh");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdocItemsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsdocItems", "DocItem")
                        .WithMany("WsdocItemsLang")
                        .HasForeignKey("DocItemId")
                        .HasConstraintName("FK_WSDocItems_Lang_WSDocItems")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsdocItemsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSDocItems_Lang_Languages")
                        .IsRequired();

                    b.Navigation("DocItem");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdocLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsdoc", "Doc")
                        .WithMany("WsdocLang")
                        .HasForeignKey("DocId")
                        .HasConstraintName("FK_WSDoc_Lang_WSDoc")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsdocLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSDoc_Lang_Languages")
                        .IsRequired();

                    b.Navigation("Doc");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdocOpr", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsdocOpr")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSDocOpr_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsdocOpr")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSDocOpr_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdocOprLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsdocOpr", "DocOpr")
                        .WithMany("WsdocOprLang")
                        .HasForeignKey("DocOprId")
                        .HasConstraintName("FK_WSDocOpr_Lang_WSDocOpr")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsdocOprLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSDocOpr_Lang_Languages")
                        .IsRequired();

                    b.Navigation("DocOpr");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsfinancialPeriodFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSFinancialPeriod_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsfinancialPeriod")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSFinancialPeriod_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsfinancialPeriodUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSFinancialPeriod_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Wsguaranty", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsguarantyFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSGuaranty_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("Wsguaranty")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSGuaranty_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("Wsguaranty")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSGuaranty_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsguarantyUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSGuaranty_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsguarantyLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsguaranty", "GuarantyNavigation")
                        .WithMany("WsguarantyLang")
                        .HasForeignKey("GuarantyId")
                        .HasConstraintName("FK_WSGuaranty_Lang_WSGuaranty")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsguarantyLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSGuaranty_Lang_Languages")
                        .IsRequired();

                    b.Navigation("GuarantyNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WslinkedProducts", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WslinkedProductsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSLinkedProducts_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WslinkedProducts")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSLinkedProducts_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WslinkedProducts")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSLinkedProducts_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsproducts", "LinkedPrd")
                        .WithMany("WslinkedProductsLinkedPrd")
                        .HasForeignKey("LinkedPrdId")
                        .HasConstraintName("FK_WSLinkedProducts_WSProductsForLinked")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsproducts", "Prd")
                        .WithMany("WslinkedProductsPrd")
                        .HasForeignKey("PrdId")
                        .HasConstraintName("FK_WSLinkedProducts_WSProducts")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WslinkedProductsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSLinkedProducts_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("LinkedPrd");

                    b.Navigation("Prd");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Wslogo", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WslogoFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSLogo_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("Wslogo")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSLogo_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("Wslogo")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSLogo_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WslogoUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSLogo_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WslogoLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WslogoLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSLogo_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wslogo", "Logo")
                        .WithMany("WslogoLang")
                        .HasForeignKey("LogoId")
                        .HasConstraintName("FK_WSLogo_Lang_WSLogo")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Logo");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Wsorder", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsorderFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSOrder_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("Wsorder")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSOrder_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("Wsorder")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrder_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "OrdCompany")
                        .WithMany("Wsorder")
                        .HasForeignKey("OrdCompanyId")
                        .HasConstraintName("FK_WSOrder_CrmCompany")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "OrdCompanyPerson")
                        .WithMany("Wsorder")
                        .HasForeignKey("OrdCompanyPersonId")
                        .HasConstraintName("FK_WSOrder_CrmCompanyPersons");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "OrdFirstRegisterUser")
                        .WithMany("WsorderOrdFirstRegisterUser")
                        .HasForeignKey("OrdFirstRegisterUserId")
                        .HasConstraintName("FK_WSOrder_Users2");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsguaranty", "OrdGuaranty")
                        .WithMany("Wsorder")
                        .HasForeignKey("OrdGuarantyId")
                        .HasConstraintName("FK_WSOrder_WSGuaranty");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wslogo", "OrdLlogo")
                        .WithMany("WsorderOrdLlogo")
                        .HasForeignKey("OrdLlogoId")
                        .HasConstraintName("FK_WSOrder_WSLogo1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormat", "OrdPrintFormat")
                        .WithMany("Wsorder")
                        .HasForeignKey("OrdPrintFormatId")
                        .HasConstraintName("FK_WSOrder_PrintFormat");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", "OrdProject")
                        .WithMany("Wsorder")
                        .HasForeignKey("OrdProjectId")
                        .HasConstraintName("FK_WSOrder_CrmProjects");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "OrdReferUser")
                        .WithMany("WsorderOrdReferUser")
                        .HasForeignKey("OrdReferUserId")
                        .HasConstraintName("FK_WSOrder_UsersReferId");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wslogo", "OrdRlogo")
                        .WithMany("WsorderOrdRlogo")
                        .HasForeignKey("OrdRlogoId")
                        .HasConstraintName("FK_WSOrder_WSLogo");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WssettlementType", "OrdSettlementType")
                        .WithMany("Wsorder")
                        .HasForeignKey("OrdSettlementTypeId")
                        .HasConstraintName("FK_WSOrder_WSSettlementType");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wssignature", "OrdSignature")
                        .WithMany("Wsorder")
                        .HasForeignKey("OrdSignatureId")
                        .HasConstraintName("FK_WSOrder_WSSignature");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsorderStatus", "OrdStatus")
                        .WithMany("Wsorder")
                        .HasForeignKey("OrdStatusId")
                        .HasConstraintName("FK_WSOrder_WSOrderStatus");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationWorkFlows", "OrdVerificationWorkFlow")
                        .WithMany("Wsorder")
                        .HasForeignKey("OrdVerificationWorkFlowId")
                        .HasConstraintName("FK_WSOrder_WSVerificationWorkFlows");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "OrdVerifier")
                        .WithMany("WsorderOrdVerifier")
                        .HasForeignKey("OrdVerifierId")
                        .HasConstraintName("FK_WSOrder_UsersVerifierId");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "OrdVerifierRequest")
                        .WithMany("WsorderOrdVerifierRequest")
                        .HasForeignKey("OrdVerifierRequestId")
                        .HasConstraintName("FK_WSOrder_UsersVerifierRequestId");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsorderOpr", "OrderOpr")
                        .WithMany("Wsorder")
                        .HasForeignKey("OrderOprId")
                        .HasConstraintName("FK_WSOrder_WSOrderOpr");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrder", "PreOrder")
                        .WithMany("Wsorder")
                        .HasForeignKey("PreOrderId")
                        .HasConstraintName("FK_WSOrder_WSPreOrder");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "PreOrderVerifier")
                        .WithMany("WsorderPreOrderVerifier")
                        .HasForeignKey("PreOrderVerifierId")
                        .HasConstraintName("FK_WSOrder_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsorderUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSOrder_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("OrdCompany");

                    b.Navigation("OrdCompanyPerson");

                    b.Navigation("OrderOpr");

                    b.Navigation("OrdFirstRegisterUser");

                    b.Navigation("OrdGuaranty");

                    b.Navigation("OrdLlogo");

                    b.Navigation("OrdPrintFormat");

                    b.Navigation("OrdProject");

                    b.Navigation("OrdReferUser");

                    b.Navigation("OrdRlogo");

                    b.Navigation("OrdSettlementType");

                    b.Navigation("OrdSignature");

                    b.Navigation("OrdStatus");

                    b.Navigation("OrdVerificationWorkFlow");

                    b.Navigation("OrdVerifier");

                    b.Navigation("OrdVerifierRequest");

                    b.Navigation("PreOrder");

                    b.Navigation("PreOrderVerifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderCommissionPayTypes", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsorderCommissionPayTypesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSOrderCommissionPayTypes_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsorderCommissionPayTypes")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrderCommissionPayTypes_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsorderCommissionPayTypesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSOrderCommissionPayTypes_Users1")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderCommissionPayTypesLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsorderCommissionPayTypesLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrderCommissionPayTypes_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsorderCommissionPayTypes", "OrderCommissionPayType")
                        .WithMany("WsorderCommissionPayTypesLang")
                        .HasForeignKey("OrderCommissionPayTypeId")
                        .HasConstraintName("FK_WSOrderCommissionPayTypes_Lang_WSOrderCommissionPayTypes")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("OrderCommissionPayType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderCommissions", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "CommCmp")
                        .WithMany("WsorderCommissions")
                        .HasForeignKey("CommCmpId")
                        .HasConstraintName("FK_WSOrderCommissions_CrmCompany")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserCycle", "CommIsPaidPayRollUserCycle")
                        .WithMany("WsorderCommissions")
                        .HasForeignKey("CommIsPaidPayRollUserCycleId")
                        .HasConstraintName("FK_WSOrderCommissions_PayRollUserCycle");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CommIsPaidUser")
                        .WithMany("WsorderCommissionsCommIsPaidUser")
                        .HasForeignKey("CommIsPaidUserId")
                        .HasConstraintName("FK_WSOrderCommissions_Users4");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsorder", "CommOrder")
                        .WithMany("WsorderCommissions")
                        .HasForeignKey("CommOrderId")
                        .HasConstraintName("FK_WSOrderCommissions_WSOrder")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsorderCommissionPayTypes", "CommPayType")
                        .WithMany("WsorderCommissions")
                        .HasForeignKey("CommPayTypeId")
                        .HasConstraintName("FK_WSOrderCommissions_WSOrderCommissionPayTypes");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CommUser")
                        .WithMany("WsorderCommissionsCommUser")
                        .HasForeignKey("CommUserId")
                        .HasConstraintName("FK_WSOrderCommissions_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "CommVerifierUser")
                        .WithMany("WsorderCommissionsCommVerifierUser")
                        .HasForeignKey("CommVerifierUserId")
                        .HasConstraintName("FK_WSOrderCommissions_Users3");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsorderCommissionsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSOrderCommissions_Users2")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsorderCommissions")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrderCommissions_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsorderCommissionsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSOrderCommissions_Users1")
                        .IsRequired();

                    b.Navigation("CommCmp");

                    b.Navigation("CommIsPaidPayRollUserCycle");

                    b.Navigation("CommIsPaidUser");

                    b.Navigation("CommOrder");

                    b.Navigation("CommPayType");

                    b.Navigation("CommUser");

                    b.Navigation("CommVerifierUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderCommissionsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsorderCommissionsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrderCommissions_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsorderCommissions", "OrderCommission")
                        .WithMany("WsorderCommissionsLang")
                        .HasForeignKey("OrderCommissionId")
                        .HasConstraintName("FK_WSOrderCommissions_Lang_WSOrderCommissions")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("OrderCommission");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderDefaultSetting", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsorderDefaultSettingFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSOrderDefaultSetting_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsorderDefaultSetting")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSOrderDefaultSetting_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsguaranty", "Guaranty")
                        .WithMany("WsorderDefaultSetting")
                        .HasForeignKey("GuarantyId")
                        .HasConstraintName("FK_WSOrderDefaultSetting_WSGuaranty");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsorderDefaultSetting")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrderDefaultSetting_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wslogo", "LeftLogo")
                        .WithMany("WsorderDefaultSettingLeftLogo")
                        .HasForeignKey("LeftLogoId")
                        .HasConstraintName("FK_WSOrderDefaultSetting_WSLogo1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsorderOpr", "OrderOpr")
                        .WithMany("WsorderDefaultSetting")
                        .HasForeignKey("OrderOprId")
                        .HasConstraintName("FK_WSOrderDefaultSetting_WSOrderOpr");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormat", "PrintFormat")
                        .WithMany("WsorderDefaultSetting")
                        .HasForeignKey("PrintFormatId")
                        .HasConstraintName("FK_WSOrderDefaultSetting_PrintFormat");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "ReferUser")
                        .WithMany("WsorderDefaultSettingReferUser")
                        .HasForeignKey("ReferUserId")
                        .HasConstraintName("FK_WSOrderDefaultSetting_UsersReferId");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wslogo", "RightLogo")
                        .WithMany("WsorderDefaultSettingRightLogo")
                        .HasForeignKey("RightLogoId")
                        .HasConstraintName("FK_WSOrderDefaultSetting_WSLogo");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wssignature", "Signature")
                        .WithMany("WsorderDefaultSetting")
                        .HasForeignKey("SignatureId")
                        .HasConstraintName("FK_WSOrderDefaultSetting_WSSignature");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsorderDefaultSettingUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSOrderDefaultSetting_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Guaranty");

                    b.Navigation("Language");

                    b.Navigation("LeftLogo");

                    b.Navigation("OrderOpr");

                    b.Navigation("PrintFormat");

                    b.Navigation("ReferUser");

                    b.Navigation("RightLogo");

                    b.Navigation("Signature");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderDefaultSettingLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsorderDefaultSettingLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrderDefaultSetting_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsorderDefaultSetting", "OrderSetting")
                        .WithMany("WsorderDefaultSettingLang")
                        .HasForeignKey("OrderSettingId")
                        .HasConstraintName("FK_WSOrderDefaultSetting_Lang_WSOrderDefaultSetting")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("OrderSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderItemSerials", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsorderItemSerialsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSOrderItemSerials_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsorderItemSerials")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSOrderItemSerials_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsorderItemSerials")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrderItemSerials_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsorderItems", "OrderItem")
                        .WithMany("WsorderItemSerials")
                        .HasForeignKey("OrderItemId")
                        .HasConstraintName("FK_WSOrderItemSerials_WSOrderItems")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsorderItemSerialsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSOrderItemSerials_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsWareHouse", "Wh")
                        .WithMany("WsorderItemSerials")
                        .HasForeignKey("Whid")
                        .HasConstraintName("FK_WSOrderItemSerials_WSWareHouse");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("OrderItem");

                    b.Navigation("User");

                    b.Navigation("Wh");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderItemSerialsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsorderItemSerialsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrderItemSerials_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsorderItemSerials", "OrderItemSerial")
                        .WithMany("WsorderItemSerialsLang")
                        .HasForeignKey("OrderItemSerialId")
                        .HasConstraintName("FK_WSOrderItemSerials_Lang_WSOrderItemSerials")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("OrderItemSerial");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderItems", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsorderItemsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSOrderItems_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsorderItems")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSOrderItems_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsorderItems")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrderItems_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WscurrencyUnits", "OrdIcurrencyUnit")
                        .WithMany("WsorderItems")
                        .HasForeignKey("OrdIcurrencyUnitId")
                        .HasConstraintName("FK_WSOrderItems_WSCurrencyUnits");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsproducts", "OrdIprd")
                        .WithMany("WsorderItems")
                        .HasForeignKey("OrdIprdId")
                        .HasConstraintName("FK_WSOrderItems_WSProducts")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductUnits", "OrdIprdUnit")
                        .WithMany("WsorderItems")
                        .HasForeignKey("OrdIprdUnitId")
                        .HasConstraintName("FK_WSOrderItems_WSProductUnits");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsWareHouse", "OrdIwh")
                        .WithMany("WsorderItems")
                        .HasForeignKey("OrdIwhid")
                        .HasConstraintName("FK_WSOrderItems_WSWareHouse");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsorder", "Order")
                        .WithMany("WsorderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_WSOrderItems_WSOrder")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsorderItemsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSOrderItems_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("Order");

                    b.Navigation("OrdIcurrencyUnit");

                    b.Navigation("OrdIprd");

                    b.Navigation("OrdIprdUnit");

                    b.Navigation("OrdIwh");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderItemsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsorderItemsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrderItems_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsorderItems", "OrderItem")
                        .WithMany("WsorderItemsLang")
                        .HasForeignKey("OrderItemId")
                        .HasConstraintName("FK_WSOrderItems_Lang_WSOrderItems")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsorderLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrder_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsorder", "Order")
                        .WithMany("WsorderLang")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_WSOrder_Lang_WSOrder")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderOpr", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsdocOpr", "DocOpr")
                        .WithMany("WsorderOpr")
                        .HasForeignKey("DocOprId")
                        .HasConstraintName("FK_WSOrderOpr_WSDocOpr");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsorderOpr")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSOrderOpr_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsorderOpr")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrderOpr_Languages");

                    b.Navigation("DocOpr");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderOprLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsorderOprLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrderOpr_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsorderOpr", "OrderOpr")
                        .WithMany("WsorderOprLang")
                        .HasForeignKey("OrderOprId")
                        .HasConstraintName("FK_WSOrderOpr_Lang_WSOrderOpr")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("OrderOpr");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderPaymentTypes", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsorderPaymentTypesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSOrderPaymentTypes_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsorderPaymentTypes")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSOrderPaymentTypes_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsorderPaymentTypes")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrderPaymentTypes_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsorderPaymentTypesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSOrderPaymentTypes_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderPaymentTypesLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsorderPaymentTypesLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrderPaymentTypes_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsorderPaymentTypes", "OrderPaymentType")
                        .WithMany("WsorderPaymentTypesLang")
                        .HasForeignKey("OrderPaymentTypeId")
                        .HasConstraintName("FK_WSOrderPaymentTypes_Lang_WSOrderPaymentTypes")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("OrderPaymentType");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderPayments", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsorderPaymentsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSOrderPayments_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsorderPayments")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSOrderPayments_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsorderPayments")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrderPayments_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "OrdpayFirstRegisterUser")
                        .WithMany("WsorderPaymentsOrdpayFirstRegisterUser")
                        .HasForeignKey("OrdpayFirstRegisterUserId")
                        .HasConstraintName("FK_WSOrderPayments_Users");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsorder", "OrdpayOrder")
                        .WithMany("WsorderPayments")
                        .HasForeignKey("OrdpayOrderId")
                        .HasConstraintName("FK_WSOrderPayments_WSOrder")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsorderPaymentTypes", "OrdpayType")
                        .WithMany("WsorderPayments")
                        .HasForeignKey("OrdpayTypeId")
                        .HasConstraintName("FK_WSOrderPayments_WSOrderPaymentTypes")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPayments", "PreOrderPayment")
                        .WithMany("WsorderPayments")
                        .HasForeignKey("PreOrderPaymentId")
                        .HasConstraintName("FK_WSOrderPayments_WSPreOrderPayments");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsorderPaymentsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSOrderPayments_Users1")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("OrdpayFirstRegisterUser");

                    b.Navigation("OrdpayOrder");

                    b.Navigation("OrdpayType");

                    b.Navigation("PreOrderPayment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderPaymentsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsorderPaymentsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrderPayments_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsorderPayments", "OrderPayment")
                        .WithMany("WsorderPaymentsLang")
                        .HasForeignKey("OrderPaymentId")
                        .HasConstraintName("FK_WSOrderPayments_Lang_WSOrderPayments")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("OrderPayment");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderStatus", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsorderStatusFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSOrderStatus_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsorderStatus")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSOrderStatus_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsorderStatus")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrderStatus_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsorderStatusUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSOrderStatus_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderStatusLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsorderStatusLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSOrderStatus_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsorderStatus", "OrderStatusNavigation")
                        .WithMany("WsorderStatusLang")
                        .HasForeignKey("OrderStatusId")
                        .HasConstraintName("FK_WSOrderStatus_Lang_WSOrderStatus")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("OrderStatusNavigation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspayCondition", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WspayConditionFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSPayCondition_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WspayCondition")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSPayCondition_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspayCondition")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPayCondition_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WspayConditionUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSPayCondition_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspayConditionLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspayConditionLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPayCondition_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspayCondition", "PayConditionNavigation")
                        .WithMany("WspayConditionLang")
                        .HasForeignKey("PayConditionId")
                        .HasConstraintName("FK_WSPayCondition_Lang_WSPayCondition")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PayConditionNavigation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrder", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WspreOrderFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSPreOrder_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WspreOrder")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSPreOrder_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspreOrder")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPreOrder_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "PordCompany")
                        .WithMany("WspreOrder")
                        .HasForeignKey("PordCompanyId")
                        .HasConstraintName("FK_WSPreOrder_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", "PordCompanyPerson")
                        .WithMany("WspreOrder")
                        .HasForeignKey("PordCompanyPersonId")
                        .HasConstraintName("FK_WSPreOrder_CrmCompanyPersons");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WscreditDuration", "PordCreditDuration")
                        .WithMany("WspreOrder")
                        .HasForeignKey("PordCreditDurationId")
                        .HasConstraintName("FK_WSPreOrder_WSCreditDuration");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsdeliveryTime", "PordDeliveryTimeNavigation")
                        .WithMany("WspreOrder")
                        .HasForeignKey("PordDeliveryTimeId")
                        .HasConstraintName("FK_WSPreOrder_WSDeliveryTime");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "PordFirstRegisterUser")
                        .WithMany("WspreOrderPordFirstRegisterUser")
                        .HasForeignKey("PordFirstRegisterUserId")
                        .HasConstraintName("FK_WSPreOrder_Users4");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsguaranty", "PordGuaranty")
                        .WithMany("WspreOrder")
                        .HasForeignKey("PordGuarantyId")
                        .HasConstraintName("FK_WSPreOrder_WSGuaranty");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wslogo", "PordLlogo")
                        .WithMany("WspreOrderPordLlogo")
                        .HasForeignKey("PordLlogoId")
                        .HasConstraintName("FK_WSPreOrder_WSLogo1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspayCondition", "PordPayCondition")
                        .WithMany("WspreOrder")
                        .HasForeignKey("PordPayConditionId")
                        .HasConstraintName("FK_WSPreOrder_WSPayCondition");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormat", "PordPrintFormat")
                        .WithMany("WspreOrder")
                        .HasForeignKey("PordPrintFormatId")
                        .HasConstraintName("FK_WSPreOrder_PrintFormat");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", "PordProject")
                        .WithMany("WspreOrder")
                        .HasForeignKey("PordProjectId")
                        .HasConstraintName("FK_WSPreOrder_CrmProjects");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "PordReferUser")
                        .WithMany("WspreOrderPordReferUser")
                        .HasForeignKey("PordReferUserId")
                        .HasConstraintName("FK_WSPreOrder_Users3");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wslogo", "PordRlogo")
                        .WithMany("WspreOrderPordRlogo")
                        .HasForeignKey("PordRlogoId")
                        .HasConstraintName("FK_WSPreOrder_WSLogo");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wssignature", "PordSignature")
                        .WithMany("WspreOrder")
                        .HasForeignKey("PordSignatureId")
                        .HasConstraintName("FK_WSPreOrder_WSSignature");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderStatus", "PordStatus")
                        .WithMany("WspreOrder")
                        .HasForeignKey("PordStatusId")
                        .HasConstraintName("FK_WSPreOrder_WSPreOrderStatus");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationWorkFlows", "PordVerificationWorkFlow")
                        .WithMany("WspreOrder")
                        .HasForeignKey("PordVerificationWorkFlowId")
                        .HasConstraintName("FK_WSPreOrder_WSVerificationWorkFlows");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "PordVerifier")
                        .WithMany("WspreOrderPordVerifier")
                        .HasForeignKey("PordVerifierId")
                        .HasConstraintName("FK_WSPreOrder_Users");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "PordVerifierRequest")
                        .WithMany("WspreOrderPordVerifierRequest")
                        .HasForeignKey("PordVerifierRequestId")
                        .HasConstraintName("FK_WSPreOrder_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderOpr", "PreOrderOpr")
                        .WithMany("WspreOrder")
                        .HasForeignKey("PreOrderOprId")
                        .HasConstraintName("FK_WSPreOrder_WSPreOrderOpr");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WspreOrderUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSPreOrder_Users2")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("PordCompany");

                    b.Navigation("PordCompanyPerson");

                    b.Navigation("PordCreditDuration");

                    b.Navigation("PordDeliveryTimeNavigation");

                    b.Navigation("PordFirstRegisterUser");

                    b.Navigation("PordGuaranty");

                    b.Navigation("PordLlogo");

                    b.Navigation("PordPayCondition");

                    b.Navigation("PordPrintFormat");

                    b.Navigation("PordProject");

                    b.Navigation("PordReferUser");

                    b.Navigation("PordRlogo");

                    b.Navigation("PordSignature");

                    b.Navigation("PordStatus");

                    b.Navigation("PordVerificationWorkFlow");

                    b.Navigation("PordVerifier");

                    b.Navigation("PordVerifierRequest");

                    b.Navigation("PreOrderOpr");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderDefaultSetting", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WscreditDuration", "CreditDuration")
                        .WithMany("WspreOrderDefaultSetting")
                        .HasForeignKey("CreditDurationId")
                        .HasConstraintName("FK_WSPreOrderDefaultSetting_WSCreditDuration");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsdeliveryTime", "DeliveryTime")
                        .WithMany("WspreOrderDefaultSetting")
                        .HasForeignKey("DeliveryTimeId")
                        .HasConstraintName("FK_WSPreOrderDefaultSetting_WSDeliveryTime");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WspreOrderDefaultSettingFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSPreOrderDefaultSetting_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WspreOrderDefaultSetting")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSPreOrderDefaultSetting_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsguaranty", "Guaranty")
                        .WithMany("WspreOrderDefaultSetting")
                        .HasForeignKey("GuarantyId")
                        .HasConstraintName("FK_WSPreOrderDefaultSetting_WSGuaranty2");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspreOrderDefaultSetting")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPreOrderDefaultSetting_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wslogo", "LeftLogo")
                        .WithMany("WspreOrderDefaultSettingLeftLogo")
                        .HasForeignKey("LeftLogoId")
                        .HasConstraintName("FK_WSPreOrderDefaultSetting_WSLogo1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspayCondition", "PayCondition")
                        .WithMany("WspreOrderDefaultSetting")
                        .HasForeignKey("PayConditionId")
                        .HasConstraintName("FK_WSPreOrderDefaultSetting_WSPayCondition");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderOpr", "PreOrderOpr")
                        .WithMany("WspreOrderDefaultSetting")
                        .HasForeignKey("PreOrderOprId")
                        .HasConstraintName("FK_WSPreOrderDefaultSetting_WSPreOrderOpr");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormat", "PrintFormat")
                        .WithMany("WspreOrderDefaultSetting")
                        .HasForeignKey("PrintFormatId")
                        .HasConstraintName("FK_WSPreOrderDefaultSetting_PrintFormat1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "ReferUser")
                        .WithMany("WspreOrderDefaultSettingReferUser")
                        .HasForeignKey("ReferUserId")
                        .HasConstraintName("FK_WSPreOrderDefaultSetting_UsersReferId");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wslogo", "RightLogo")
                        .WithMany("WspreOrderDefaultSettingRightLogo")
                        .HasForeignKey("RightLogoId")
                        .HasConstraintName("FK_WSPreOrderDefaultSetting_WSLogo");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wssignature", "Signature")
                        .WithMany("WspreOrderDefaultSetting")
                        .HasForeignKey("SignatureId")
                        .HasConstraintName("FK_WSPreOrderDefaultSetting_WSSignature");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WspreOrderDefaultSettingUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSPreOrderDefaultSetting_Users1")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationWorkFlows", "VerificationWorkFlow")
                        .WithMany("WspreOrderDefaultSetting")
                        .HasForeignKey("VerificationWorkFlowId")
                        .HasConstraintName("FK_WSPreOrderDefaultSetting_WSVerificationWorkFlows");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "VerifierRequest")
                        .WithMany("WspreOrderDefaultSettingVerifierRequest")
                        .HasForeignKey("VerifierRequestId")
                        .HasConstraintName("FK_WSPreOrderDefaultSetting_Users");

                    b.Navigation("CreditDuration");

                    b.Navigation("DeliveryTime");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Guaranty");

                    b.Navigation("Language");

                    b.Navigation("LeftLogo");

                    b.Navigation("PayCondition");

                    b.Navigation("PreOrderOpr");

                    b.Navigation("PrintFormat");

                    b.Navigation("ReferUser");

                    b.Navigation("RightLogo");

                    b.Navigation("Signature");

                    b.Navigation("User");

                    b.Navigation("VerificationWorkFlow");

                    b.Navigation("VerifierRequest");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderDefaultSettingLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspreOrderDefaultSettingLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPreOrderDefaultSetting_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderDefaultSetting", "PreOrderSetting")
                        .WithMany("WspreOrderDefaultSettingLang")
                        .HasForeignKey("PreOrderSettingId")
                        .HasConstraintName("FK_WSPreOrderDefaultSetting_Lang_WSPreOrderDefaultSetting")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PreOrderSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderItemSpecification", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WspreOrderItemSpecificationFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSPreOrderItemSpecification_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WspreOrderItemSpecification")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSPreOrderItemSpecification_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspreOrderItemSpecification")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPreOrderItemSpecification_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderItems", "PreOrderItem")
                        .WithMany("WspreOrderItemSpecification")
                        .HasForeignKey("PreOrderItemId")
                        .HasConstraintName("FK_WSPreOrderItemSpecification_WSPreOrderItems")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WspreOrderItemSpecificationUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSPreOrderItemSpecification_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("PreOrderItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderItemSpecificationLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspreOrderItemSpecificationLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPreOrderItemSpecification_Lang_Languages")
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderItems", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WspreOrderItemsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSPreOrderItems_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WspreOrderItems")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSPreOrderItems_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspreOrderItems")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPreOrderItems_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WscurrencyUnits", "PordIcurrencyUnit")
                        .WithMany("WspreOrderItems")
                        .HasForeignKey("PordIcurrencyUnitId")
                        .HasConstraintName("FK_WSPreOrderItems_WSCurrencyUnits");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsproducts", "PordIprd")
                        .WithMany("WspreOrderItems")
                        .HasForeignKey("PordIprdId")
                        .HasConstraintName("FK_WSPreOrderItems_WSProducts")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductUnits", "PordIprdUnit")
                        .WithMany("WspreOrderItems")
                        .HasForeignKey("PordIprdUnitId")
                        .HasConstraintName("FK_WSPreOrderItems_WSProductUnits");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsWareHouse", "PordIwh")
                        .WithMany("WspreOrderItems")
                        .HasForeignKey("PordIwhid")
                        .HasConstraintName("FK_WSPreOrderItems_WSWareHouse");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrder", "PreOrder")
                        .WithMany("WspreOrderItems")
                        .HasForeignKey("PreOrderId")
                        .HasConstraintName("FK_WSPreOrderItems_WSPreOrder")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WspreOrderItemsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSPreOrderItems_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("PordIcurrencyUnit");

                    b.Navigation("PordIprd");

                    b.Navigation("PordIprdUnit");

                    b.Navigation("PordIwh");

                    b.Navigation("PreOrder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderItemsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspreOrderItemsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPreOrderItems_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderItems", "PreOrderItem")
                        .WithMany("WspreOrderItemsLang")
                        .HasForeignKey("PreOrderItemId")
                        .HasConstraintName("FK_WSPreOrderItems_Lang_WSPreOrderItems")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PreOrderItem");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspreOrderLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPreOrder_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrder", "PreOrder")
                        .WithMany("WspreOrderLang")
                        .HasForeignKey("PreOrderId")
                        .HasConstraintName("FK_WSPreOrder_Lang_WSPreOrder")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PreOrder");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderOpr", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WspreOrderOprFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSPreOrderOpr_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WspreOrderOpr")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSPreOrderOpr_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspreOrderOpr")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPreOrderOpr_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WspreOrderOprUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSPreOrderOpr_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderOprLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspreOrderOprLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPreOrderOpr_Lang_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderOpr", "PreOrderOprNavigation")
                        .WithMany("WspreOrderOprLang")
                        .HasForeignKey("PreOrderOprId")
                        .HasConstraintName("FK_WSPreOrderOpr_Lang_WSPreOrderOpr")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PreOrderOprNavigation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPayments", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WspreOrderPaymentsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSPreOrderPayments_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WspreOrderPayments")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSPreOrderPayments_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspreOrderPayments")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPreOrderPayments_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "PordpayFirstRegisterUser")
                        .WithMany("WspreOrderPaymentsPordpayFirstRegisterUser")
                        .HasForeignKey("PordpayFirstRegisterUserId")
                        .HasConstraintName("FK_WSPreOrderPayments_Users");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrder", "PordpayPreOrder")
                        .WithMany("WspreOrderPayments")
                        .HasForeignKey("PordpayPreOrderId")
                        .HasConstraintName("FK_WSPreOrderPayments_WSPreOrder")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsorderPaymentTypes", "PordpayType")
                        .WithMany("WspreOrderPayments")
                        .HasForeignKey("PordpayTypeId")
                        .HasConstraintName("FK_WSPreOrderPayments_WSOrderPaymentTypes")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WspreOrderPaymentsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSPreOrderPayments_Users1")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("PordpayFirstRegisterUser");

                    b.Navigation("PordpayPreOrder");

                    b.Navigation("PordpayType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPaymentsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspreOrderPaymentsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPreOrderPayments_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPayments", "PreOrderPayment")
                        .WithMany("WspreOrderPaymentsLang")
                        .HasForeignKey("PreOrderPaymentId")
                        .HasConstraintName("FK_WSPreOrderPayments_Lang_WSPreOrderPayments")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PreOrderPayment");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPrdGroupMustExistReasonGroups", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspreOrderPrdGroupMustExistReasonGroups")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasonGroups_Languages")
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPrdGroupMustExistReasonGroupsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspreOrderPrdGroupMustExistReasonGroupsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasonGroups_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPrdGroupMustExistReasonGroups", "PrdGroupMustExistReasonGroup")
                        .WithMany("WspreOrderPrdGroupMustExistReasonGroupsLang")
                        .HasForeignKey("PrdGroupMustExistReasonGroupId")
                        .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasonGroups_Lang_WSPreOrderPrdGroupMustExistReasonGroups")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PrdGroupMustExistReasonGroup");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPrdGroupMustExistReasons", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", "CmpProject")
                        .WithMany("WspreOrderPrdGroupMustExistReasons")
                        .HasForeignKey("CmpProjectId")
                        .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_CrmProjects")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "Company")
                        .WithMany("WspreOrderPrdGroupMustExistReasons")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WspreOrderPrdGroupMustExistReasonsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WspreOrderPrdGroupMustExistReasons")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspreOrderPrdGroupMustExistReasons")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductFirstGroup", "PrdFirstGroup")
                        .WithMany("WspreOrderPrdGroupMustExistReasons")
                        .HasForeignKey("PrdFirstGroupId")
                        .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_WSProductFirstGroup")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPrdGroupMustExistReasonGroups", "PrdGroupMustExistReasonGroup")
                        .WithMany("WspreOrderPrdGroupMustExistReasons")
                        .HasForeignKey("PrdGroupMustExistReasonGroupId")
                        .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_WSPreOrderPrdGroupMustExistReasonGroups")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrder", "PreOrder")
                        .WithMany("WspreOrderPrdGroupMustExistReasons")
                        .HasForeignKey("PreOrderId")
                        .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_WSPreOrder");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WspreOrderPrdGroupMustExistReasonsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_Users1")
                        .IsRequired();

                    b.Navigation("CmpProject");

                    b.Navigation("Company");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("PrdFirstGroup");

                    b.Navigation("PrdGroupMustExistReasonGroup");

                    b.Navigation("PreOrder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPrdGroupMustExistReasonsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspreOrderPrdGroupMustExistReasonsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPrdGroupMustExistReasons", "PrdGroupMustExistReason")
                        .WithMany("WspreOrderPrdGroupMustExistReasonsLang")
                        .HasForeignKey("PrdGroupMustExistReasonId")
                        .HasConstraintName("FK_WSPreOrderPrdGroupMustExistReasons_Lang_WSPreOrderPrdGroupMustExistReasons")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PrdGroupMustExistReason");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderStatus", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WspreOrderStatusFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSPreOrderStatus_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WspreOrderStatus")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSPreOrderStatus_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspreOrderStatus")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPreOrderStatus_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WspreOrderStatusUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSPreOrderStatus_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderStatusLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WspreOrderStatusLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSPreOrderStatus_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderStatus", "PreOrderStatusNavigation")
                        .WithMany("WspreOrderStatusLang")
                        .HasForeignKey("PreOrderStatusId")
                        .HasConstraintName("FK_WSPreOrderStatus_Lang_WSPreOrderStatus")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PreOrderStatusNavigation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductColor", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsproductColorFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSProductColor_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductColor")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductColor_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsproductColorUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSProductColor_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductColorLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductColorLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductColor_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductColor", "ProductColor")
                        .WithMany("WsproductColorLang")
                        .HasForeignKey("ProductColorId")
                        .HasConstraintName("FK_WSProductColor_Lang_WSProductColor")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProductColor");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductCost", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WscurrencyUnits", "CurrencyUnit")
                        .WithMany("WsproductCost")
                        .HasForeignKey("CurrencyUnitId")
                        .HasConstraintName("FK_WSProductCost_WSCurrencyUnits");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsproductCostFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSProductCost_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsproductCost")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSProductCost_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductCost")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductCost_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsproducts", "Prd")
                        .WithMany("WsproductCost")
                        .HasForeignKey("PrdId")
                        .HasConstraintName("FK_WSProductCost_WSProducts")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductCostGroup", "ProductCostGroup")
                        .WithMany("WsproductCost")
                        .HasForeignKey("ProductCostGroupId")
                        .HasConstraintName("FK_WSProductCost_WSProductCostGroup");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsproductCostUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSProductCost_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsWareHouse", "Wh")
                        .WithMany("WsproductCost")
                        .HasForeignKey("Whid")
                        .HasConstraintName("FK_WSProductCost_WSWareHouse");

                    b.Navigation("CurrencyUnit");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("Prd");

                    b.Navigation("ProductCostGroup");

                    b.Navigation("User");

                    b.Navigation("Wh");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductCostGroup", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsproductCostGroupFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSProductCostGroup_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductCostGroup")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductCostGroup_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsproductCostGroupUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSProductCostGroup_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductCostGroupLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductCostGroupLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductCostGroup_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductCostGroup", "ProductCostGroup")
                        .WithMany("WsproductCostGroupLang")
                        .HasForeignKey("ProductCostGroupId")
                        .HasConstraintName("FK_WSProductCostGroup_Lang_WSProductCostGroup")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProductCostGroup");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductCostLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductCostLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductCost_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductCost", "ProductCost")
                        .WithMany("WsproductCostLang")
                        .HasForeignKey("ProductCostId")
                        .HasConstraintName("FK_WSProductCost_Lang_WSProductCost")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProductCost");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductFirstGroup", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsproductFirstGroup")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSProductFirstGroup_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductFirstGroup")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductFirstGroup_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.ParsaPooladMenus", null)
                        .WithMany("WsproductFirstGroup")
                        .HasForeignKey("ParsaPooladMenusId");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsproductFirstGroup")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSProductFirstGroup_Users")
                        .IsRequired();

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductFirstGroupLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductFirstGroupLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductFirstGroup_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductFirstGroup", "PrdFirstGroup")
                        .WithMany("WsproductFirstGroupLang")
                        .HasForeignKey("PrdFirstGroupId")
                        .HasConstraintName("FK_WSProductFirstGroup_Lang_WSProductFirstGroup")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PrdFirstGroup");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductGallery", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsproductGalleryFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSProductGallery_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsproductGallery")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSProductGallery_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductGallery")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductGallery_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsproducts", "Prd")
                        .WithMany("WsproductGallery")
                        .HasForeignKey("PrdId")
                        .HasConstraintName("FK_WSProductGallery_WSProducts")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsproductGalleryUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSProductGallery_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("Prd");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductImportFromExcel", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WscurrencyUnits", "CostCurrencyUnit")
                        .WithMany("WsproductImportFromExcelCostCurrencyUnit")
                        .HasForeignKey("CostCurrencyUnitId")
                        .HasConstraintName("FK_WSProductImportFromExcel_WSCurrencyUnits1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductCostGroup", "CostProductCostGroup")
                        .WithMany("WsproductImportFromExcel")
                        .HasForeignKey("CostProductCostGroupId")
                        .HasConstraintName("FK_WSProductImportFromExcel_WSProductCostGroup");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsproductImportFromExcelFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSProductImportFromExcel_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductImportFromExcel")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductImportFromExcel_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductColor", "PrdColor")
                        .WithMany("WsproductImportFromExcel")
                        .HasForeignKey("PrdColorId")
                        .HasConstraintName("FK_WSProductImportFromExcel_WSProductColor");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductUnits", "PrdUnit")
                        .WithMany("WsproductImportFromExcel")
                        .HasForeignKey("PrdUnitId")
                        .HasConstraintName("FK_WSProductImportFromExcel_WSProductUnits");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WscurrencyUnits", "PriceCurrencyUnit")
                        .WithMany("WsproductImportFromExcelPriceCurrencyUnit")
                        .HasForeignKey("PriceCurrencyUnitId")
                        .HasConstraintName("FK_WSProductImportFromExcel_WSCurrencyUnits");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPriceGroup", "PriceProductPriceGroup")
                        .WithMany("WsproductImportFromExcel")
                        .HasForeignKey("PriceProductPriceGroupId")
                        .HasConstraintName("FK_WSProductImportFromExcel_WSProductPriceGroup");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsproductImportFromExcelUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSProductImportFromExcel_Users")
                        .IsRequired();

                    b.Navigation("CostCurrencyUnit");

                    b.Navigation("CostProductCostGroup");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("PrdColor");

                    b.Navigation("PrdUnit");

                    b.Navigation("PriceCurrencyUnit");

                    b.Navigation("PriceProductPriceGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductImportFromExcelFields", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsproductImportFromExcelFields")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSProductImportFromExcelFields_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductImportFromExcelFields")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductImportFromExcelFields_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductImportFromExcelFieldsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductImportFromExcelFields", "IdNavigation")
                        .WithMany("WsproductImportFromExcelFieldsLang")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_WSProductImportFromExcelFields_Lang_WSProductImportFromExcelFields")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductImportFromExcelFieldsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductImportFromExcelFields_Lang_Languages")
                        .IsRequired();

                    b.Navigation("IdNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPicture", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsproductPictureFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSProductPicture_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsproductPicture")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSProductPicture_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductPicture")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductPicture_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsproducts", "Prd")
                        .WithMany("WsproductPicture")
                        .HasForeignKey("PrdId")
                        .HasConstraintName("FK_WSProductPicture_WSProducts")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsproductPictureUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSProductPicture_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsWareHouse", "Wh")
                        .WithMany("WsproductPicture")
                        .HasForeignKey("Whid")
                        .HasConstraintName("FK_WSProductPicture_WSWareHouse");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("Prd");

                    b.Navigation("User");

                    b.Navigation("Wh");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPictureLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductPictureLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductPicture_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPicture", "PrdPicture")
                        .WithMany("WsproductPictureLang")
                        .HasForeignKey("PrdPictureId")
                        .HasConstraintName("FK_WSProductPicture_Lang_WSProductPicture")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PrdPicture");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPrice", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WscurrencyUnits", "CurrencyUnit")
                        .WithMany("WsproductPrice")
                        .HasForeignKey("CurrencyUnitId")
                        .HasConstraintName("FK_WSProductPrice_WSCurrencyUnits");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsproductPriceFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSProductPrice_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsproductPrice")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSProductPrice_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductPrice")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductPrice_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsproducts", "Prd")
                        .WithMany("WsproductPrice")
                        .HasForeignKey("PrdId")
                        .HasConstraintName("FK_WSProductPrice_WSProducts")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPriceGroup", "ProductPriceGroup")
                        .WithMany("WsproductPrice")
                        .HasForeignKey("ProductPriceGroupId")
                        .HasConstraintName("FK_WSProductPrice_WSProductPriceGroup");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsproductPriceUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSProductPrice_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsWareHouse", "Wh")
                        .WithMany("WsproductPrice")
                        .HasForeignKey("Whid")
                        .HasConstraintName("FK_WSProductPrice_WSWareHouse");

                    b.Navigation("CurrencyUnit");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("Prd");

                    b.Navigation("ProductPriceGroup");

                    b.Navigation("User");

                    b.Navigation("Wh");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPriceGroup", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsproductPriceGroupFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSProductPriceGroup_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductPriceGroup")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductPriceGroup_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsproductPriceGroupUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSProductPriceGroup_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPriceGroupLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductPriceGroupLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductPriceGroup_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPriceGroup", "ProductPriceGroup")
                        .WithMany("WsproductPriceGroupLang")
                        .HasForeignKey("ProductPriceGroupId")
                        .HasConstraintName("FK_WSProductPriceGroup_Lang_WSProductPriceGroup")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProductPriceGroup");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPriceLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductPriceLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductPrice_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPrice", "PrdPrice")
                        .WithMany("WsproductPriceLang")
                        .HasForeignKey("PrdPriceId")
                        .HasConstraintName("FK_WSProductPrice_Lang_WSProductPrice")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PrdPrice");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductSecondGroup", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductFirstGroup", "FirstGroup")
                        .WithMany("WsproductSecondGroup")
                        .HasForeignKey("FirstGroupId")
                        .HasConstraintName("FK_WSProductSecondGroup_WSProductFirstGroup")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsproductSecondGroupFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSProductSecondGroup_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsproductSecondGroup")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSProductSecondGroup_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductSecondGroup")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductSecondGroup_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsproductSecondGroupUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSProductSecondGroup_Users")
                        .IsRequired();

                    b.Navigation("FirstGroup");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductSecondGroupLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductSecondGroupLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductSecondGroup_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductSecondGroup", "PrdSecondGroup")
                        .WithMany("WsproductSecondGroupLang")
                        .HasForeignKey("PrdSecondGroupId")
                        .HasConstraintName("FK_WSProductSecondGroup_Lang_WSProductSecondGroup")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PrdSecondGroup");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductShpStockManageTypes", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsproductShpStockManageTypesFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSProductShpStockManageTypes_FirstRegisterUsers")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsproductShpStockManageTypes")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSProductShpStockManageTypes_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductShpStockManageTypes")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductShpStockManageTypes_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsproductShpStockManageTypesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSProductShpStockManageTypes_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductShpStockManageTypesLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductShpStockManageTypesLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductShpStockManageTypes_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductShpStockManageTypes", "ProductShpStockManageTypeNavigation")
                        .WithMany("WsproductShpStockManageTypesLang")
                        .HasForeignKey("ProductShpStockManageTypeId")
                        .HasConstraintName("FK_WSProductShpStockManageTypes_Lang_WSProductShpStockManageTypes")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProductShpStockManageTypeNavigation");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductSpecification", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsproductSpecificationFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSProductSpecification_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsproductSpecification")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSProductSpecification_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductSpecification")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductSpecification_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsproducts", "Prd")
                        .WithMany("WsproductSpecification")
                        .HasForeignKey("PrdId")
                        .HasConstraintName("FK_WSProductSpecification_WSProducts")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsproductSpecificationUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSProductSpecification_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("Prd");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductSpecificationLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductSpecificationLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductSpecification_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductSpecification", "ProductSpecification")
                        .WithMany("WsproductSpecificationLang")
                        .HasForeignKey("ProductSpecificationId")
                        .HasConstraintName("FK_WSProductSpecification_Lang_WSProductSpecification")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProductSpecification");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductUnits", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsproductUnitsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSProductUnits_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductUnits")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductUnits_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsproductUnitsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSProductUnits_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductUnitsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductUnitsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductUnits_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductUnits", "ProductUnit")
                        .WithMany("WsproductUnitsLang")
                        .HasForeignKey("ProductUnitId")
                        .HasConstraintName("FK_WSProductUnits_Lang_WSProductUnits")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProductUnit");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Wsproducts", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsproductsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSProducts_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("Wsproducts")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSProducts_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("Wsproducts")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProducts_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductColor", "PrdColor")
                        .WithMany("Wsproducts")
                        .HasForeignKey("PrdColorId")
                        .HasConstraintName("FK_WSProducts_WSProductColor");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductSecondGroup", "PrdGroup")
                        .WithMany("Wsproducts")
                        .HasForeignKey("PrdGroupId")
                        .HasConstraintName("FK_WSProducts_WSProductSecondGroup")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "PrdShpotherSupplier")
                        .WithMany("Wsproducts")
                        .HasForeignKey("PrdShpotherSupplierId")
                        .HasConstraintName("FK_WSProducts_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductUnits", "PrdUnit")
                        .WithMany("Wsproducts")
                        .HasForeignKey("PrdUnitId")
                        .HasConstraintName("FK_WSProducts_WSProductUnits");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsproductsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSProducts_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("PrdColor");

                    b.Navigation("PrdGroup");

                    b.Navigation("PrdShpotherSupplier");

                    b.Navigation("PrdUnit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProducts_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsproducts", "Product")
                        .WithMany("WsproductsLang")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_WSProducts_Lang_WSProducts")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductsRate", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", "CrmCompany")
                        .WithMany("WsproductsRate")
                        .HasForeignKey("CrmCompanyId")
                        .HasConstraintName("FK_WSProductsRate_CrmCompany");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsproductsRateFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSProductsRate_FirstRegisterUsers");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsproductsRate")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSProductsRate_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductsRate")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductsRate_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsproducts", "Prd")
                        .WithMany("WsproductsRate")
                        .HasForeignKey("PrdId")
                        .HasConstraintName("FK_WSProductsRate_WSProducts")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsproductsRateUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSProductsRate_Users");

                    b.Navigation("CrmCompany");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("Prd");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductsUserDiscount", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsproducts", "DiscountProduct")
                        .WithMany("WsproductsUserDiscount")
                        .HasForeignKey("DiscountProductId")
                        .HasConstraintName("FK_WSProductsUserDiscount_WSProducts");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "DiscountUser")
                        .WithMany("WsproductsUserDiscountDiscountUser")
                        .HasForeignKey("DiscountUserId")
                        .HasConstraintName("FK_WSProductsUserDiscount_Users");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsproductsUserDiscountFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSProductsUserDiscount_Users1")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("WsproductsUserDiscount")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSProductsUserDiscount_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductsUserDiscount")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductsUserDiscount_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductSecondGroup", "ProductGroup")
                        .WithMany("WsproductsUserDiscount")
                        .HasForeignKey("ProductGroupId")
                        .HasConstraintName("FK_WSProductsUserDiscount_WSProductSecondGroup")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsproductsUserDiscountUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSProductsUserDiscount_Users2")
                        .IsRequired();

                    b.Navigation("DiscountProduct");

                    b.Navigation("DiscountUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("ProductGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductsUserDiscountLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsproductsUserDiscountLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSProductsUserDiscount_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductsUserDiscount", "ProductsUserDiscount")
                        .WithMany("WsproductsUserDiscountLang")
                        .HasForeignKey("ProductsUserDiscountId")
                        .HasConstraintName("FK_WSProductsUserDiscount_Lang_WSProductsUserDiscount")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProductsUserDiscount");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsregisterBarCode", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsregisterBarCode")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSRegisterBarCode_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsregisterBarCode")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSRegisterBarCode_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WssettlementType", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WssettlementTypeFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSSettlementType_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WssettlementType")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSSettlementType_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WssettlementTypeUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSSettlementType_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WssettlementTypeLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WssettlementType", "IdNavigation")
                        .WithMany("WssettlementTypeLang")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_WSSettlementType_Lang_WSSettlementType")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WssettlementTypeLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSSettlementType_Lang_Languages")
                        .IsRequired();

                    b.Navigation("IdNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Wssignature", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WssignatureFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSSignature_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", "Fp")
                        .WithMany("Wssignature")
                        .HasForeignKey("Fpid")
                        .HasConstraintName("FK_WSSignature_WSFinancialPeriod")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("Wssignature")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSSignature_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WssignatureUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSSignature_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Fp");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WstmpEnterBarcodeOperation", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WstmpEnterBarcodeOperation")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSTmpEnterBarcodeOperation_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WstmpEnterBarcodeOperation")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSTmpEnterBarcodeOperation_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WstmpEnterDocPrdWithBarcode", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WstmpEnterDocPrdWithBarcode")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSTmpEnterDocPrdWithBarcode_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WstmpEnterDocPrdWithBarcode")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSTmpEnterDocPrdWithBarcode_Languages");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WstmpUserItemCopy", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WscurrencyUnits", "CurrencyUnit")
                        .WithMany("WstmpUserItemCopy")
                        .HasForeignKey("CurrencyUnitId")
                        .HasConstraintName("FK_WSTmpUserItemCopy_WSCurrencyUnits");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WstmpUserItemCopyFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSTmpUserItemCopy_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WstmpUserItemCopy")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSTmpUserItemCopy_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsproducts", "Prd")
                        .WithMany("WstmpUserItemCopy")
                        .HasForeignKey("PrdId")
                        .HasConstraintName("FK_WSTmpUserItemCopy_WSProducts");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsproductUnits", "PrdUnit")
                        .WithMany("WstmpUserItemCopy")
                        .HasForeignKey("PrdUnitId")
                        .HasConstraintName("FK_WSTmpUserItemCopy_WSProductUnits");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WstmpUserItemCopyUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSTmpUserItemCopy_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsWareHouse", "Wh")
                        .WithMany("WstmpUserItemCopy")
                        .HasForeignKey("Whid")
                        .HasConstraintName("FK_WSTmpUserItemCopy_WsWareHouse");

                    b.Navigation("CurrencyUnit");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("Prd");

                    b.Navigation("PrdUnit");

                    b.Navigation("User");

                    b.Navigation("Wh");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsuserFavproductItems", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Wsproducts", "FavprdIprd")
                        .WithMany("WsuserFavproductItems")
                        .HasForeignKey("FavprdIprdId")
                        .HasConstraintName("FK_WSUserFavproductItems_WSProducts")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsWareHouse", "FavprdIwh")
                        .WithMany("WsuserFavproductItems")
                        .HasForeignKey("FavprdIwhid")
                        .HasConstraintName("FK_WSUserFavproductItems_WSWareHouse");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsuserFavproductItemsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSUserFavproductItems_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsuserFavproductItems")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSUserFavproductItems_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsuserFavproducts", "UserFavproduct")
                        .WithMany("WsuserFavproductItems")
                        .HasForeignKey("UserFavproductId")
                        .HasConstraintName("FK_WSUserFavproductItems_WSUserFavproducts")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsuserFavproductItemsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSUserFavproductItems_Users")
                        .IsRequired();

                    b.Navigation("FavprdIprd");

                    b.Navigation("FavprdIwh");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");

                    b.Navigation("UserFavproduct");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsuserFavproductItemsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsuserFavproductItemsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSUserFavproductItems_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsuserFavproductItems", "UserFavproductItem")
                        .WithMany("WsuserFavproductItemsLang")
                        .HasForeignKey("UserFavproductItemId")
                        .HasConstraintName("FK_WSUserFavproductItems_Lang_WSUserFavproductItems")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("UserFavproductItem");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsuserFavproducts", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsuserFavproductsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSUserFavproducts_Users20");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsuserFavproducts")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSUserFavproducts_Languages");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsuserFavproductsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSUserFavproducts_Users")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsuserFavproductsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsuserFavproductsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSUserFavproducts_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsuserFavproducts", "UserFavproduct")
                        .WithMany("WsuserFavproductsLang")
                        .HasForeignKey("UserFavproductId")
                        .HasConstraintName("FK_WSUserFavproducts_Lang_WSUserFavproducts")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("UserFavproduct");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationRequestDetails", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsverificationRequestDetailsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSVerificationRequestDetails_Users1")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsverificationRequestDetails")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSVerificationRequestDetails_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsverificationRequestDetailsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSVerificationRequestDetails_Users2")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationRequests", "VerificationRequest")
                        .WithMany("WsverificationRequestDetails")
                        .HasForeignKey("VerificationRequestId")
                        .HasConstraintName("FK_WSVerificationRequestDetails_WSVerificationRequests")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationWorkFlows", "VerificationWorkFlow")
                        .WithMany("WsverificationRequestDetails")
                        .HasForeignKey("VerificationWorkFlowId")
                        .HasConstraintName("FK_WSVerificationRequestDetails_WSVerificationWorkFlows")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationWorkFlowSteps", "VerificationWorkFlowStep")
                        .WithMany("WsverificationRequestDetails")
                        .HasForeignKey("VerificationWorkFlowStepId")
                        .HasConstraintName("FK_WSVerificationRequestDetails_WSVerificationWorkFlowSteps")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "VerifyUser")
                        .WithMany("WsverificationRequestDetailsVerifyUser")
                        .HasForeignKey("VerifyUserId")
                        .HasConstraintName("FK_WSVerificationRequestDetails_Users");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");

                    b.Navigation("VerificationRequest");

                    b.Navigation("VerificationWorkFlow");

                    b.Navigation("VerificationWorkFlowStep");

                    b.Navigation("VerifyUser");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationRequestDetailsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsverificationRequestDetailsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSVerificationRequestDetails_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationRequestDetails", "VerificationRequestDetail")
                        .WithMany("WsverificationRequestDetailsLang")
                        .HasForeignKey("VerificationRequestDetailId")
                        .HasConstraintName("FK_WSVerificationRequestDetails_Lang_WSVerificationRequestDetails")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("VerificationRequestDetail");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationRequests", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsverificationRequestsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSVerificationRequests_Users1")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsverificationRequests")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSVerificationRequests_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsverificationRequestsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSVerificationRequests_Users2")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "VerificationReqUser")
                        .WithMany("WsverificationRequestsVerificationReqUser")
                        .HasForeignKey("VerificationReqUserId")
                        .HasConstraintName("FK_WSVerificationRequests_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationWorkFlows", "VerificationWorkFlow")
                        .WithMany("WsverificationRequests")
                        .HasForeignKey("VerificationWorkFlowId")
                        .HasConstraintName("FK_WSVerificationRequests_WSVerificationWorkFlows")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");

                    b.Navigation("VerificationReqUser");

                    b.Navigation("VerificationWorkFlow");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationRequestsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsverificationRequestsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSVerificationRequests_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationRequests", "VerificationRequest")
                        .WithMany("WsverificationRequestsLang")
                        .HasForeignKey("VerificationRequestId")
                        .HasConstraintName("FK_WSVerificationRequests_Lang_WSVerificationRequests")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("VerificationRequest");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationWorkFlowSteps", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "AlternateVerifyUser")
                        .WithMany("WsverificationWorkFlowStepsAlternateVerifyUser")
                        .HasForeignKey("AlternateVerifyUserId")
                        .HasConstraintName("FK_WSVerificationWorkFlowSteps_Users1");

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsverificationWorkFlowStepsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSVerificationWorkFlowSteps_Users3")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsverificationWorkFlowSteps")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSVerificationWorkFlowSteps_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsverificationWorkFlowStepsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSVerificationWorkFlowSteps_Users2")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationWorkFlows", "VerificationWorkFlow")
                        .WithMany("WsverificationWorkFlowSteps")
                        .HasForeignKey("VerificationWorkFlowId")
                        .HasConstraintName("FK_WSVerificationWorkFlowSteps_WSVerificationWorkFlows")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "VerifyUser")
                        .WithMany("WsverificationWorkFlowStepsVerifyUser")
                        .HasForeignKey("VerifyUserId")
                        .HasConstraintName("FK_WSVerificationWorkFlowSteps_Users");

                    b.Navigation("AlternateVerifyUser");

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");

                    b.Navigation("VerificationWorkFlow");

                    b.Navigation("VerifyUser");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationWorkFlowStepsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsverificationWorkFlowStepsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSVerificationWorkFlowSteps_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationWorkFlowSteps", "VerificationWorkFlowStep")
                        .WithMany("WsverificationWorkFlowStepsLang")
                        .HasForeignKey("VerificationWorkFlowStepId")
                        .HasConstraintName("FK_WSVerificationWorkFlowSteps_Lang_WSVerificationWorkFlowSteps")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("VerificationWorkFlowStep");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationWorkFlows", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "FirstRegisterUser")
                        .WithMany("WsverificationWorkFlowsFirstRegisterUser")
                        .HasForeignKey("FirstRegisterUserId")
                        .HasConstraintName("FK_WSVerificationWorkFlows_Users")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsverificationWorkFlows")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSVerificationWorkFlows_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Users", "User")
                        .WithMany("WsverificationWorkFlowsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WSVerificationWorkFlows_Users1")
                        .IsRequired();

                    b.Navigation("FirstRegisterUser");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationWorkFlowsLang", b =>
                {
                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.Languages", "Language")
                        .WithMany("WsverificationWorkFlowsLang")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WSVerificationWorkFlows_Lang_Languages")
                        .IsRequired();

                    b.HasOne("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationWorkFlows", "VerificationWorkFlow")
                        .WithMany("WsverificationWorkFlowsLang")
                        .HasForeignKey("VerificationWorkFlowId")
                        .HasConstraintName("FK_WSVerificationWorkFlows_Lang_WSVerificationWorkFlows")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("VerificationWorkFlow");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.City", b =>
                {
                    b.Navigation("CityLang");

                    b.Navigation("CrmCompany");

                    b.Navigation("CrmCompanyForbiddenCity");

                    b.Navigation("CrmCompanyJustAccessCity");

                    b.Navigation("CrmCompanyPersons");

                    b.Navigation("CrmCompanyPersonsTemplate");

                    b.Navigation("CrmCompanyPersonsTmp");

                    b.Navigation("CrmCompanyTmp");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Country", b =>
                {
                    b.Navigation("CountryLang");

                    b.Navigation("CrmCompany");

                    b.Navigation("CrmCompanyPersons");

                    b.Navigation("CrmCompanyPersonsTemplate");

                    b.Navigation("CrmCompanyPersonsTmp");

                    b.Navigation("CrmCompanyTmp");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmAddressingType", b =>
                {
                    b.Navigation("CrmAddressing");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmBankingAccountType", b =>
                {
                    b.Navigation("CrmBankingAccounts");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmBankingBanks", b =>
                {
                    b.Navigation("CrmBankingBranches");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmBankingBranches", b =>
                {
                    b.Navigation("CrmBankingAccounts");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCallType", b =>
                {
                    b.Navigation("CrmCallHistory");

                    b.Navigation("CrmCallTypeLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsComments", b =>
                {
                    b.Navigation("CrmCmsCommentsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsFiles", b =>
                {
                    b.Navigation("CrmCmsFilesLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsGallery", b =>
                {
                    b.Navigation("CrmCmsGalleryItems");

                    b.Navigation("CrmCmsGalleryLang");

                    b.Navigation("CrmFoSettingShpHomeGalleryI");

                    b.Navigation("CrmFoSettingShpHomeGalleryIi");

                    b.Navigation("CrmFoSettingShpHomeGalleryIii");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsGalleryItems", b =>
                {
                    b.Navigation("CrmCmsGalleryItemsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsMenus", b =>
                {
                    b.Navigation("CrmCmsMenusLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsNews", b =>
                {
                    b.Navigation("CrmCmsMenus");

                    b.Navigation("CrmCmsNewsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsNewsGroups", b =>
                {
                    b.Navigation("CrmCmsNews");

                    b.Navigation("CrmCmsNewsGroupsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsObjectTypes", b =>
                {
                    b.Navigation("CrmCmsComments");

                    b.Navigation("CrmCmsFiles");

                    b.Navigation("CrmCmsLikes");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCmsPages", b =>
                {
                    b.Navigation("CrmCmsMenus");

                    b.Navigation("CrmCmsPagesLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompany", b =>
                {
                    b.Navigation("CrmBankingAccounts");

                    b.Navigation("CrmCallHistory");

                    b.Navigation("CrmCmsComments");

                    b.Navigation("CrmCmsLikes");

                    b.Navigation("CrmCompanyForbiddenCompany");

                    b.Navigation("CrmCompanyJustAccessCompany");

                    b.Navigation("CrmCompanyLang");

                    b.Navigation("CrmCompanyLoGo");

                    b.Navigation("CrmCompanyMultiGroups");

                    b.Navigation("CrmCompanyPersons");

                    b.Navigation("CrmCompanyPictureAlbums");

                    b.Navigation("CrmCompanyUserForbidden");

                    b.Navigation("CrmConversation");

                    b.Navigation("CrmDyFormFieldMasterValues");

                    b.Navigation("CrmDyFormFieldValues");

                    b.Navigation("CrmFilesDirectory");

                    b.Navigation("CrmLinkedCompanyCompany");

                    b.Navigation("CrmLinkedCompanyLinkedCompany");

                    b.Navigation("CrmProjects");

                    b.Navigation("CrmTelegBotContacts");

                    b.Navigation("CrmTelegContacts");

                    b.Navigation("EmailReceive");

                    b.Navigation("EmailReceiveAttachments");

                    b.Navigation("EmailSendDetail");

                    b.Navigation("EmailUserTempTank");

                    b.Navigation("MobCompanyAppInfo");

                    b.Navigation("SecLetters");

                    b.Navigation("SmsReceive");

                    b.Navigation("SmsSendDetail");

                    b.Navigation("SmsTempMobileNumbers");

                    b.Navigation("WsbuyOrder");

                    b.Navigation("Wsdoc");

                    b.Navigation("Wsorder");

                    b.Navigation("WsorderCommissions");

                    b.Navigation("WspreOrder");

                    b.Navigation("WspreOrderPrdGroupMustExistReasons");

                    b.Navigation("Wsproducts");

                    b.Navigation("WsproductsRate");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroups", b =>
                {
                    b.Navigation("CrmCompany");

                    b.Navigation("CrmCompanyForbiddenGroup");

                    b.Navigation("CrmCompanyGroupsLang");

                    b.Navigation("CrmCompanyJustAccessGroup");

                    b.Navigation("CrmCompanySubGroups");

                    b.Navigation("CrmCompanyTmp");

                    b.Navigation("CrmFoSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIi", b =>
                {
                    b.Navigation("CrmCompany");

                    b.Navigation("CrmCompanyGroupsIiLang");

                    b.Navigation("CrmCompanyTmp");

                    b.Navigation("CrmFoSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIii", b =>
                {
                    b.Navigation("CrmCompany");

                    b.Navigation("CrmCompanyGroupsIiiLang");

                    b.Navigation("CrmCompanyTmp");

                    b.Navigation("CrmFoSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsIv", b =>
                {
                    b.Navigation("CrmCompany");

                    b.Navigation("CrmCompanyForbiddenGroupIv");

                    b.Navigation("CrmCompanyGroupsIvLang");

                    b.Navigation("CrmCompanyJustAccessGroupIv");

                    b.Navigation("CrmCompanyTmp");

                    b.Navigation("CrmFoSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyGroupsMulti", b =>
                {
                    b.Navigation("CrmCompanyGroupsMultiLang");

                    b.Navigation("CrmCompanyMultiGroups");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersons", b =>
                {
                    b.Navigation("CrmBankingAccounts");

                    b.Navigation("CrmCallHistory");

                    b.Navigation("CrmCompany");

                    b.Navigation("CrmCompanyPersonsLang");

                    b.Navigation("CrmConversation");

                    b.Navigation("CrmDyFormFieldMasterValues");

                    b.Navigation("CrmDyFormFieldValues");

                    b.Navigation("CrmPersonPicture");

                    b.Navigation("CrmTelegBotContacts");

                    b.Navigation("CrmTelegContacts");

                    b.Navigation("EmailReceive");

                    b.Navigation("EmailReceiveAttachments");

                    b.Navigation("EmailSendDetail");

                    b.Navigation("EmailUserTempTank");

                    b.Navigation("MobCompanyAppInfo");

                    b.Navigation("SecLetters");

                    b.Navigation("SmsReceive");

                    b.Navigation("SmsSendDetail");

                    b.Navigation("SmsTempMobileNumbers");

                    b.Navigation("WsbuyOrder");

                    b.Navigation("Wsdoc");

                    b.Navigation("Wsorder");

                    b.Navigation("WspreOrder");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersonsTemplate", b =>
                {
                    b.Navigation("CrmCompanyPersons");

                    b.Navigation("CrmCompanyPersonsTemplateLang");

                    b.Navigation("CrmCompanyPersonsTmp");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPersonsTmp", b =>
                {
                    b.Navigation("CrmCompanyPersonsTmpLang");

                    b.Navigation("CrmConversationTmp");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPictureAlbums", b =>
                {
                    b.Navigation("CrmCompanyPictures");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyPresentation", b =>
                {
                    b.Navigation("CrmCompany");

                    b.Navigation("CrmCompanyPresentationLang");

                    b.Navigation("CrmCompanyTmp");

                    b.Navigation("CrmFoSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanySubGroups", b =>
                {
                    b.Navigation("CrmCompany");

                    b.Navigation("CrmCompanyForbiddenSubGroup");

                    b.Navigation("CrmCompanyJustAccessSubGroup");

                    b.Navigation("CrmCompanySubGroupsLang");

                    b.Navigation("CrmCompanyTmp");

                    b.Navigation("CrmFoSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyTitle", b =>
                {
                    b.Navigation("CrmCompany");

                    b.Navigation("CrmCompanyTitleLang");

                    b.Navigation("CrmCompanyTmp");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyTmp", b =>
                {
                    b.Navigation("CrmCompanyPersonsTmp");

                    b.Navigation("CrmCompanyTmpLang");

                    b.Navigation("CrmConversationTmp");

                    b.Navigation("CrmProjectsTmp");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmCompanyType", b =>
                {
                    b.Navigation("CrmCompany");

                    b.Navigation("CrmCompanyTmp");

                    b.Navigation("CrmCompanyTypeLang");

                    b.Navigation("CrmFoSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversation", b =>
                {
                    b.Navigation("CrmConversationLang");

                    b.Navigation("CrmConversationReferUsers");

                    b.Navigation("CrmDyFormFieldMasterValues");

                    b.Navigation("CrmDyFormFieldValues");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationDefaultContext", b =>
                {
                    b.Navigation("CrmConversationDefaultContextLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationPriority", b =>
                {
                    b.Navigation("CrmConversation");

                    b.Navigation("CrmConversationPriorityLang");

                    b.Navigation("CrmConversationReferUsers");

                    b.Navigation("CrmConversationTmp");

                    b.Navigation("CrmFoSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatus", b =>
                {
                    b.Navigation("CrmConversation");

                    b.Navigation("CrmConversationStatusLang");

                    b.Navigation("CrmConversationTmp");

                    b.Navigation("CrmFoSetting");

                    b.Navigation("CrmProjects");

                    b.Navigation("CrmProjectsTmp");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationStatusGroups", b =>
                {
                    b.Navigation("CrmConversationStatus");

                    b.Navigation("CrmConversationStatusGroupsLang");

                    b.Navigation("CrmFoSetting");

                    b.Navigation("CrmProjects");

                    b.Navigation("CrmProjectsTmp");

                    b.Navigation("CrmProjectTitles");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationTmp", b =>
                {
                    b.Navigation("CrmConversationTmpLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmConversationTopics", b =>
                {
                    b.Navigation("CrmConversation");

                    b.Navigation("CrmConversationTmp");

                    b.Navigation("CrmConversationTopicsLang");

                    b.Navigation("CrmFoSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldMasterValues", b =>
                {
                    b.Navigation("CrmDyFormFieldMasterValueDetails");

                    b.Navigation("CrmDyFormFieldValues");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldTypes", b =>
                {
                    b.Navigation("CrmDyFormFields");

                    b.Navigation("CrmDyFormFieldTypesLang");

                    b.Navigation("CrmDyFormRegularExpressions");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFieldValues", b =>
                {
                    b.Navigation("CrmDyFormFieldValuesLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormFields", b =>
                {
                    b.Navigation("CrmDyFormFieldsLang");

                    b.Navigation("CrmDyFormFieldValues");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormRegularExpressions", b =>
                {
                    b.Navigation("CrmDyFormFields");

                    b.Navigation("CrmDyFormRegularExpressionsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormWorkflowSteps", b =>
                {
                    b.Navigation("CrmDyFormFieldMasterValues");

                    b.Navigation("CrmDyFormWorkflowStepsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyFormWorkflows", b =>
                {
                    b.Navigation("CrmDyFormFieldMasterValues");

                    b.Navigation("CrmDyForms");

                    b.Navigation("CrmDyFormWorkflowsLang");

                    b.Navigation("CrmDyFormWorkflowSteps");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmDyForms", b =>
                {
                    b.Navigation("CrmCmsMenus");

                    b.Navigation("CrmCmsPages");

                    b.Navigation("CrmDyFormFieldMasterValueDetails");

                    b.Navigation("CrmDyFormFieldMasterValues");

                    b.Navigation("CrmDyFormFields");

                    b.Navigation("CrmDyFormFieldValues");

                    b.Navigation("CrmDyFormsLang");

                    b.Navigation("CrmDyFormUserAccess");

                    b.Navigation("CrmDyFormWorkflows");

                    b.Navigation("CrmDyFormWorkflowSteps");

                    b.Navigation("CrmFoSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFileDirectoryType", b =>
                {
                    b.Navigation("CrmFileDirectoryTypeLang");

                    b.Navigation("CrmFilesDirectory");

                    b.Navigation("CrmFilesDirectoryTemplate");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFileDirectoryTypeOpr", b =>
                {
                    b.Navigation("CrmFileDirectoryType");

                    b.Navigation("CrmFileDirectoryTypeOprLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFilesDirectory", b =>
                {
                    b.Navigation("CrmFilesDirectoryLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFilesDirectoryTemplateType", b =>
                {
                    b.Navigation("CrmFilesDirectoryTemplate");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFoSetting", b =>
                {
                    b.Navigation("CrmFoSettingLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFund", b =>
                {
                    b.Navigation("CrmFundLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmFundGroups", b =>
                {
                    b.Navigation("CrmFund");

                    b.Navigation("CrmFundGroupsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessage", b =>
                {
                    b.Navigation("CrmInternalMessageDetails");

                    b.Navigation("CrmInternalMessageLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageDefaultContext", b =>
                {
                    b.Navigation("CrmInternalMessageDefaultContextLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageGroup", b =>
                {
                    b.Navigation("CrmInternalMessageDetails");

                    b.Navigation("CrmInternalMessageGroupLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessagePriority", b =>
                {
                    b.Navigation("CrmInternalMessagePriorityLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageTreeType", b =>
                {
                    b.Navigation("CrmInternalMessageTreeTypeLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmInternalMessageType", b =>
                {
                    b.Navigation("CrmInternalMessage");

                    b.Navigation("CrmInternalMessageDetails");

                    b.Navigation("CrmInternalMessageTypeLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTank", b =>
                {
                    b.Navigation("CrmKnowledgeTankLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTankGroup", b =>
                {
                    b.Navigation("CrmKnowledgeTank");

                    b.Navigation("CrmKnowledgeTankGroupLang");

                    b.Navigation("CrmKnowledgeTankGroupPermission");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmKnowledgeTankPriority", b =>
                {
                    b.Navigation("CrmKnowledgeTank");

                    b.Navigation("CrmKnowledgeTankPriorityLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccNoAvSetting", b =>
                {
                    b.Navigation("CrmLinkAccNoAvSettingDetails");

                    b.Navigation("CrmLinkAccNoAvSettingLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccNoAvSettingDetails", b =>
                {
                    b.Navigation("CrmLinkAccNoAvSettingDetailsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccSetting", b =>
                {
                    b.Navigation("CrmLinkAccSettingDetails");

                    b.Navigation("CrmLinkAccSettingLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccSettingDetails", b =>
                {
                    b.Navigation("CrmLinkAccSettingDetailsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccSystems", b =>
                {
                    b.Navigation("CrmsysSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccTarazSetting", b =>
                {
                    b.Navigation("CrmLinkAccTarazSettingDetails");

                    b.Navigation("CrmLinkAccTarazSettingLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkAccTarazSettingDetails", b =>
                {
                    b.Navigation("CrmLinkAccTarazSettingDetailsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmLinkedType", b =>
                {
                    b.Navigation("CrmLinkedTypeLang");

                    b.Navigation("CrmLinkedUsers");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmOperationsType", b =>
                {
                    b.Navigation("CrmOperationsTypeLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonDepartments", b =>
                {
                    b.Navigation("CrmCompanyPersons");

                    b.Navigation("CrmCompanyPersonsTemplate");

                    b.Navigation("CrmCompanyPersonsTmp");

                    b.Navigation("CrmPersonDepartmentsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonGroups", b =>
                {
                    b.Navigation("CrmCompanyPersons");

                    b.Navigation("CrmCompanyPersonsTemplate");

                    b.Navigation("CrmCompanyPersonsTmp");

                    b.Navigation("CrmPersonGroupsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonJobs", b =>
                {
                    b.Navigation("CrmCompanyPersons");

                    b.Navigation("CrmCompanyPersonsTemplate");

                    b.Navigation("CrmCompanyPersonsTmp");

                    b.Navigation("CrmPersonJobsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonTitle", b =>
                {
                    b.Navigation("CrmCompanyPersons");

                    b.Navigation("CrmCompanyPersonsTemplate");

                    b.Navigation("CrmCompanyPersonsTmp");

                    b.Navigation("CrmPersonTitleLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmPersonType", b =>
                {
                    b.Navigation("CrmCompanyPersons");

                    b.Navigation("CrmCompanyPersonsTemplate");

                    b.Navigation("CrmCompanyPersonsTmp");

                    b.Navigation("CrmPersonTypeLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectDefualtValue", b =>
                {
                    b.Navigation("CrmProjectDefualtValueLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectFieldTitle", b =>
                {
                    b.Navigation("CrmProjectDefualtValue");

                    b.Navigation("CrmProjectFieldTitleLang");

                    b.Navigation("CrmProjectInformations");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGrade", b =>
                {
                    b.Navigation("CrmFoSetting");

                    b.Navigation("CrmProjectGradeLang");

                    b.Navigation("CrmProjects");

                    b.Navigation("CrmProjectsTmp");

                    b.Navigation("CrmProjectTitles");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroups", b =>
                {
                    b.Navigation("CrmFoSetting");

                    b.Navigation("CrmProjectGroupsLang");

                    b.Navigation("CrmProjects");

                    b.Navigation("CrmProjectsTmp");

                    b.Navigation("CrmProjectTitles");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroupsMulti", b =>
                {
                    b.Navigation("CrmProjectGroupsMultiLang");

                    b.Navigation("CrmProjectMultiGroups");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectGroupsMultiI", b =>
                {
                    b.Navigation("CrmProjectGroupsMultiILang");

                    b.Navigation("CrmProjectMultiIgroups");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectInformations", b =>
                {
                    b.Navigation("CrmProjectInformationsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectPriority", b =>
                {
                    b.Navigation("CrmFoSetting");

                    b.Navigation("CrmProjectPriorityLang");

                    b.Navigation("CrmProjects");

                    b.Navigation("CrmProjectsTmp");

                    b.Navigation("CrmProjectTitles");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectTitles", b =>
                {
                    b.Navigation("CrmProjectTitlesLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjects", b =>
                {
                    b.Navigation("CrmConversation");

                    b.Navigation("CrmDyFormFieldMasterValues");

                    b.Navigation("CrmDyFormFieldValues");

                    b.Navigation("CrmFilesDirectory");

                    b.Navigation("CrmProjectFieldTitle");

                    b.Navigation("CrmProjectInformations");

                    b.Navigation("CrmProjectsLang");

                    b.Navigation("EmailReceive");

                    b.Navigation("EmailReceiveAttachments");

                    b.Navigation("EmailSendDetail");

                    b.Navigation("EmailUserTempTank");

                    b.Navigation("SecLetters");

                    b.Navigation("WsbuyOrder");

                    b.Navigation("Wsdoc");

                    b.Navigation("Wsorder");

                    b.Navigation("WspreOrder");

                    b.Navigation("WspreOrderPrdGroupMustExistReasons");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectsForbiddenForUser", b =>
                {
                    b.Navigation("CrmProjectsForbiddenForUserLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmProjectsTmp", b =>
                {
                    b.Navigation("CrmConversationTmp");

                    b.Navigation("CrmProjectsTmpLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmSystemParts", b =>
                {
                    b.Navigation("CrmDyFormsCrmSysPart");

                    b.Navigation("CrmDyFormsFosysPart");

                    b.Navigation("CrmSystemPartsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegBotMessageType", b =>
                {
                    b.Navigation("CrmTelegBotChatMessage");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegMessageType", b =>
                {
                    b.Navigation("CrmTelegChatMessage");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmTelegSetting", b =>
                {
                    b.Navigation("CrmTelegChatMessage");

                    b.Navigation("CrmTelegContacts");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTaskGroups", b =>
                {
                    b.Navigation("CrmUserTaskGroupsLang");

                    b.Navigation("CrmUserTasks");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTaskPriorities", b =>
                {
                    b.Navigation("CrmUserTaskPrioritiesLang");

                    b.Navigation("CrmUserTasks");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmUserTasks", b =>
                {
                    b.Navigation("CrmUserTasksLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysCideviceType", b =>
                {
                    b.Navigation("CrmsysCisetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysDbobjects", b =>
                {
                    b.Navigation("CrmsysDbobjectsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysDbtempInfoType", b =>
                {
                    b.Navigation("CrmsysDbtempInfo");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysFormActions", b =>
                {
                    b.Navigation("CrmsysFormActionsLang");

                    b.Navigation("CrmsysRollPermission");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysFormObjectProperties", b =>
                {
                    b.Navigation("CrmsysFormObjectPropertiesLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysForms", b =>
                {
                    b.Navigation("CrmsysFormActions");

                    b.Navigation("CrmsysFormObjectProperties");

                    b.Navigation("CrmsysFormsLang");

                    b.Navigation("CrmsysRollPermission");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysRolls", b =>
                {
                    b.Navigation("CrmDyForms");

                    b.Navigation("CrmDyFormWorkflowSteps");

                    b.Navigation("CrmKnowledgeTankGroupPermission");

                    b.Navigation("CrmsysRollPermission");

                    b.Navigation("CrmsysRollsLang");

                    b.Navigation("UsersPermission");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.CrmsysSetting", b =>
                {
                    b.Navigation("CrmsysSettingLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Education", b =>
                {
                    b.Navigation("CrmCompanyPersons");

                    b.Navigation("CrmCompanyPersonsTemplate");

                    b.Navigation("CrmCompanyPersonsTmp");

                    b.Navigation("EducationLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailDefaultBodyText", b =>
                {
                    b.Navigation("EmailDefaultBodyTextLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailReceive", b =>
                {
                    b.Navigation("EmailReceiveAttachments");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailReceiveFolders", b =>
                {
                    b.Navigation("EmailReceive");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailSendHeader", b =>
                {
                    b.Navigation("EmailSendAttachment");

                    b.Navigation("EmailSendDetail");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailSetting", b =>
                {
                    b.Navigation("CrmFoSetting");

                    b.Navigation("EmailSendHeader");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.EmailUsersInfo", b =>
                {
                    b.Navigation("CrmFoSetting");

                    b.Navigation("EmailReceive");

                    b.Navigation("EmailReceiveFolders");

                    b.Navigation("EmailSendHeader");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Languages", b =>
                {
                    b.Navigation("City");

                    b.Navigation("CityLang");

                    b.Navigation("Country");

                    b.Navigation("CountryLang");

                    b.Navigation("CrmAddressing");

                    b.Navigation("CrmAddressingType");

                    b.Navigation("CrmBankingAccounts");

                    b.Navigation("CrmBankingAccountType");

                    b.Navigation("CrmBankingBanks");

                    b.Navigation("CrmBankingBranches");

                    b.Navigation("CrmCallBlackList");

                    b.Navigation("CrmCallHistory");

                    b.Navigation("CrmCallType");

                    b.Navigation("CrmCallTypeLang");

                    b.Navigation("CrmCmsComments");

                    b.Navigation("CrmCmsCommentsLang");

                    b.Navigation("CrmCmsFiles");

                    b.Navigation("CrmCmsFilesLang");

                    b.Navigation("CrmCmsGallery");

                    b.Navigation("CrmCmsGalleryItems");

                    b.Navigation("CrmCmsGalleryItemsLang");

                    b.Navigation("CrmCmsGalleryLang");

                    b.Navigation("CrmCmsLikes");

                    b.Navigation("CrmCmsMenus");

                    b.Navigation("CrmCmsMenusLang");

                    b.Navigation("CrmCmsNews");

                    b.Navigation("CrmCmsNewsGroups");

                    b.Navigation("CrmCmsNewsGroupsLang");

                    b.Navigation("CrmCmsNewsLang");

                    b.Navigation("CrmCmsObjectTypes");

                    b.Navigation("CrmCmsPages");

                    b.Navigation("CrmCmsPagesLang");

                    b.Navigation("CrmCompany");

                    b.Navigation("CrmCompanyForbiddenCity");

                    b.Navigation("CrmCompanyForbiddenCompany");

                    b.Navigation("CrmCompanyForbiddenDepartment");

                    b.Navigation("CrmCompanyForbiddenGroup");

                    b.Navigation("CrmCompanyForbiddenGroupIv");

                    b.Navigation("CrmCompanyForbiddenProvince");

                    b.Navigation("CrmCompanyForbiddenSubGroup");

                    b.Navigation("CrmCompanyGroups");

                    b.Navigation("CrmCompanyGroupsIi");

                    b.Navigation("CrmCompanyGroupsIii");

                    b.Navigation("CrmCompanyGroupsIiiLang");

                    b.Navigation("CrmCompanyGroupsIiLang");

                    b.Navigation("CrmCompanyGroupsIv");

                    b.Navigation("CrmCompanyGroupsIvLang");

                    b.Navigation("CrmCompanyGroupsLang");

                    b.Navigation("CrmCompanyGroupsMulti");

                    b.Navigation("CrmCompanyGroupsMultiLang");

                    b.Navigation("CrmCompanyJustAccessCity");

                    b.Navigation("CrmCompanyJustAccessCompany");

                    b.Navigation("CrmCompanyJustAccessDepartment");

                    b.Navigation("CrmCompanyJustAccessGroup");

                    b.Navigation("CrmCompanyJustAccessGroupIv");

                    b.Navigation("CrmCompanyJustAccessProvince");

                    b.Navigation("CrmCompanyJustAccessSubGroup");

                    b.Navigation("CrmCompanyLang");

                    b.Navigation("CrmCompanyLoGo");

                    b.Navigation("CrmCompanyMultiGroups");

                    b.Navigation("CrmCompanyPersons");

                    b.Navigation("CrmCompanyPersonsLang");

                    b.Navigation("CrmCompanyPersonsTemplate");

                    b.Navigation("CrmCompanyPersonsTemplateLang");

                    b.Navigation("CrmCompanyPersonsTmp");

                    b.Navigation("CrmCompanyPersonsTmpLang");

                    b.Navigation("CrmCompanyPictureAlbums");

                    b.Navigation("CrmCompanyPictures");

                    b.Navigation("CrmCompanyPresentation");

                    b.Navigation("CrmCompanyPresentationLang");

                    b.Navigation("CrmCompanySubGroups");

                    b.Navigation("CrmCompanySubGroupsLang");

                    b.Navigation("CrmCompanyTitle");

                    b.Navigation("CrmCompanyTitleLang");

                    b.Navigation("CrmCompanyTmp");

                    b.Navigation("CrmCompanyTmpLang");

                    b.Navigation("CrmCompanyType");

                    b.Navigation("CrmCompanyTypeLang");

                    b.Navigation("CrmCompanyUserForbidden");

                    b.Navigation("CrmConversation");

                    b.Navigation("CrmConversationDefaultContext");

                    b.Navigation("CrmConversationDefaultContextLang");

                    b.Navigation("CrmConversationLang");

                    b.Navigation("CrmConversationPriority");

                    b.Navigation("CrmConversationPriorityLang");

                    b.Navigation("CrmConversationReferUsers");

                    b.Navigation("CrmConversationStatus");

                    b.Navigation("CrmConversationStatusGroups");

                    b.Navigation("CrmConversationStatusGroupsLang");

                    b.Navigation("CrmConversationStatusLang");

                    b.Navigation("CrmConversationTmp");

                    b.Navigation("CrmConversationTmpLang");

                    b.Navigation("CrmConversationTopics");

                    b.Navigation("CrmConversationTopicsLang");

                    b.Navigation("CrmDyFormFieldMasterValueDetails");

                    b.Navigation("CrmDyFormFieldMasterValues");

                    b.Navigation("CrmDyFormFields");

                    b.Navigation("CrmDyFormFieldsLang");

                    b.Navigation("CrmDyFormFieldTypes");

                    b.Navigation("CrmDyFormFieldTypesLang");

                    b.Navigation("CrmDyFormFieldValues");

                    b.Navigation("CrmDyFormFieldValuesLang");

                    b.Navigation("CrmDyFormRegularExpressions");

                    b.Navigation("CrmDyFormRegularExpressionsLang");

                    b.Navigation("CrmDyForms");

                    b.Navigation("CrmDyFormsLang");

                    b.Navigation("CrmDyFormUserAccess");

                    b.Navigation("CrmDyFormWorkflows");

                    b.Navigation("CrmDyFormWorkflowsLang");

                    b.Navigation("CrmDyFormWorkflowSteps");

                    b.Navigation("CrmDyFormWorkflowStepsLang");

                    b.Navigation("CrmFileDirectoryType");

                    b.Navigation("CrmFileDirectoryTypeLang");

                    b.Navigation("CrmFileDirectoryTypeOpr");

                    b.Navigation("CrmFileDirectoryTypeOprLang");

                    b.Navigation("CrmFilesDirectory");

                    b.Navigation("CrmFilesDirectoryLang");

                    b.Navigation("CrmFilesDirectoryTemplate");

                    b.Navigation("CrmFilesDirectoryTemplateType");

                    b.Navigation("CrmFoSetting");

                    b.Navigation("CrmFoSettingLang");

                    b.Navigation("CrmFund");

                    b.Navigation("CrmFundGroups");

                    b.Navigation("CrmFundGroupsLang");

                    b.Navigation("CrmFundLang");

                    b.Navigation("CrmInternalMessage");

                    b.Navigation("CrmInternalMessageDefaultContext");

                    b.Navigation("CrmInternalMessageDefaultContextLang");

                    b.Navigation("CrmInternalMessageDetails");

                    b.Navigation("CrmInternalMessageGroup");

                    b.Navigation("CrmInternalMessageGroupLang");

                    b.Navigation("CrmInternalMessageLang");

                    b.Navigation("CrmInternalMessagePriority");

                    b.Navigation("CrmInternalMessagePriorityLang");

                    b.Navigation("CrmInternalMessageSelectReceiver");

                    b.Navigation("CrmInternalMessageTreeType");

                    b.Navigation("CrmInternalMessageTreeTypeLang");

                    b.Navigation("CrmInternalMessageType");

                    b.Navigation("CrmInternalMessageTypeLang");

                    b.Navigation("CrmKnowledgeTank");

                    b.Navigation("CrmKnowledgeTankGroup");

                    b.Navigation("CrmKnowledgeTankGroupLang");

                    b.Navigation("CrmKnowledgeTankGroupPermission");

                    b.Navigation("CrmKnowledgeTankLang");

                    b.Navigation("CrmKnowledgeTankPriority");

                    b.Navigation("CrmKnowledgeTankPriorityLang");

                    b.Navigation("CrmLeave");

                    b.Navigation("CrmLeaveKinds");

                    b.Navigation("CrmLeaveStatus");

                    b.Navigation("CrmLeaveStayType");

                    b.Navigation("CrmLeaveType");

                    b.Navigation("CrmLeaveVehicleType");

                    b.Navigation("CrmLinkAccNoAvSetting");

                    b.Navigation("CrmLinkAccNoAvSettingDetails");

                    b.Navigation("CrmLinkAccNoAvSettingDetailsLang");

                    b.Navigation("CrmLinkAccNoAvSettingLang");

                    b.Navigation("CrmLinkAccSetting");

                    b.Navigation("CrmLinkAccSettingDetails");

                    b.Navigation("CrmLinkAccSettingDetailsLang");

                    b.Navigation("CrmLinkAccSettingLang");

                    b.Navigation("CrmLinkAccSystems");

                    b.Navigation("CrmLinkAccTarazSetting");

                    b.Navigation("CrmLinkAccTarazSettingDetails");

                    b.Navigation("CrmLinkAccTarazSettingDetailsLang");

                    b.Navigation("CrmLinkAccTarazSettingLang");

                    b.Navigation("CrmLinkedType");

                    b.Navigation("CrmLinkedTypeLang");

                    b.Navigation("CrmLinkedUsers");

                    b.Navigation("CrmOperationsType");

                    b.Navigation("CrmOperationsTypeLang");

                    b.Navigation("CrmPersonDepartments");

                    b.Navigation("CrmPersonDepartmentsLang");

                    b.Navigation("CrmPersonGroups");

                    b.Navigation("CrmPersonGroupsLang");

                    b.Navigation("CrmPersonJobs");

                    b.Navigation("CrmPersonJobsLang");

                    b.Navigation("CrmPersonPicture");

                    b.Navigation("CrmPersonTitle");

                    b.Navigation("CrmPersonTitleLang");

                    b.Navigation("CrmPersonType");

                    b.Navigation("CrmPersonTypeLang");

                    b.Navigation("CrmProjectDefualtValue");

                    b.Navigation("CrmProjectDefualtValueLang");

                    b.Navigation("CrmProjectFieldTitle");

                    b.Navigation("CrmProjectFieldTitleLang");

                    b.Navigation("CrmProjectFieldValueType");

                    b.Navigation("CrmProjectGrade");

                    b.Navigation("CrmProjectGradeLang");

                    b.Navigation("CrmProjectGroups");

                    b.Navigation("CrmProjectGroupsLang");

                    b.Navigation("CrmProjectGroupsMulti");

                    b.Navigation("CrmProjectGroupsMultiI");

                    b.Navigation("CrmProjectGroupsMultiILang");

                    b.Navigation("CrmProjectGroupsMultiLang");

                    b.Navigation("CrmProjectInformations");

                    b.Navigation("CrmProjectInformationsLang");

                    b.Navigation("CrmProjectMultiGroups");

                    b.Navigation("CrmProjectMultiIgroups");

                    b.Navigation("CrmProjectPriority");

                    b.Navigation("CrmProjectPriorityLang");

                    b.Navigation("CrmProjects");

                    b.Navigation("CrmProjectsForbiddenForUser");

                    b.Navigation("CrmProjectsForbiddenForUserLang");

                    b.Navigation("CrmProjectsLang");

                    b.Navigation("CrmProjectsTmp");

                    b.Navigation("CrmProjectsTmpLang");

                    b.Navigation("CrmProjectTitles");

                    b.Navigation("CrmProjectTitlesLang");

                    b.Navigation("CrmShowTableFieldInFo");

                    b.Navigation("CrmsysCideviceType");

                    b.Navigation("CrmsysCipopUpSetting");

                    b.Navigation("CrmsysCisetting");

                    b.Navigation("CrmsysDbobjects");

                    b.Navigation("CrmsysDbobjectsLang");

                    b.Navigation("CrmsysDbtempInfo");

                    b.Navigation("CrmsysDbtempInfoType");

                    b.Navigation("CrmsysFormActions");

                    b.Navigation("CrmsysFormActionsLang");

                    b.Navigation("CrmsysFormObjectProperties");

                    b.Navigation("CrmsysFormObjectPropertiesLang");

                    b.Navigation("CrmsysForms");

                    b.Navigation("CrmsysFormsLang");

                    b.Navigation("CrmsysRollPermission");

                    b.Navigation("CrmsysRolls");

                    b.Navigation("CrmsysRollsLang");

                    b.Navigation("CrmsysSetting");

                    b.Navigation("CrmsysSettingLang");

                    b.Navigation("CrmSystemParts");

                    b.Navigation("CrmSystemPartsLang");

                    b.Navigation("CrmTelegBotChatMessage");

                    b.Navigation("CrmTelegBotContacts");

                    b.Navigation("CrmTelegBotMessageType");

                    b.Navigation("CrmTelegBotSetting");

                    b.Navigation("CrmTelegChatMessage");

                    b.Navigation("CrmTelegContacts");

                    b.Navigation("CrmTelegMessageType");

                    b.Navigation("CrmTelegSetting");

                    b.Navigation("CrmTempEmails");

                    b.Navigation("CrmTimeAttendance");

                    b.Navigation("CrmTimeAttendanceBase");

                    b.Navigation("CrmTimeAttendanceLog");

                    b.Navigation("CrmtmpManageTellNumber");

                    b.Navigation("CrmUserNotes");

                    b.Navigation("CrmUserTaskGroups");

                    b.Navigation("CrmUserTaskGroupsLang");

                    b.Navigation("CrmUserTaskPriorities");

                    b.Navigation("CrmUserTaskPrioritiesLang");

                    b.Navigation("CrmUserTasks");

                    b.Navigation("CrmUserTasksLang");

                    b.Navigation("CrmVersions");

                    b.Navigation("CrmVersionUpgrade");

                    b.Navigation("CrmVersionUpgradeDetails");

                    b.Navigation("CrmWebSetting");

                    b.Navigation("Education");

                    b.Navigation("EducationLang");

                    b.Navigation("EmailDefaultBodyText");

                    b.Navigation("EmailDefaultBodyTextLang");

                    b.Navigation("EmailReceive");

                    b.Navigation("EmailReceiveAttachments");

                    b.Navigation("EmailReceiveFolders");

                    b.Navigation("EmailSendAttachment");

                    b.Navigation("EmailSendDetail");

                    b.Navigation("EmailSendHeader");

                    b.Navigation("EmailSetting");

                    b.Navigation("EmailUserDefaultSetting");

                    b.Navigation("EmailUsersInfo");

                    b.Navigation("EmailUserTempTank");

                    b.Navigation("MobApiAndTableDetail");

                    b.Navigation("MobCompanyAppInfo");

                    b.Navigation("MyWebsites");

                    b.Navigation("PayRollItems");

                    b.Navigation("PayRollItemsLang");

                    b.Navigation("PayRollItemTypes");

                    b.Navigation("PayRollItemTypesLang");

                    b.Navigation("PayRollUserCycle");

                    b.Navigation("PayRollUserCycleItemValues");

                    b.Navigation("PayRollUserCycleLang");

                    b.Navigation("PayRollUserDefaultItems");

                    b.Navigation("PayRollUserPayments");

                    b.Navigation("PayRollUserPaymentsLang");

                    b.Navigation("PayRollUserPaymentTypes");

                    b.Navigation("PayRollUserPaymentTypesLang");

                    b.Navigation("PrintFormat");

                    b.Navigation("PrintFormatLang");

                    b.Navigation("PrintFormatType");

                    b.Navigation("PrintFormatTypeLang");

                    b.Navigation("Projects");

                    b.Navigation("ProjectsLang");

                    b.Navigation("Province");

                    b.Navigation("ProvinceLang");

                    b.Navigation("SecLetterDefaultSettings");

                    b.Navigation("SecLetterDefaultSettingsLang");

                    b.Navigation("SecLetters");

                    b.Navigation("SecLettersLang");

                    b.Navigation("SecLetterType");

                    b.Navigation("SecLetterTypeLang");

                    b.Navigation("Sex");

                    b.Navigation("SexLang");

                    b.Navigation("SmsDefaultBodyText");

                    b.Navigation("SmsDefaultBodyTextGroups");

                    b.Navigation("SmsDefaultBodyTextGroupsLang");

                    b.Navigation("SmsDefaultBodyTextLang");

                    b.Navigation("SmsDeliveryStatus");

                    b.Navigation("SmsDeliveryStatusLang");

                    b.Navigation("SmsGsmmodemDelivery");

                    b.Navigation("SmsGsmmodemSetting");

                    b.Navigation("SmsGsmreceives");

                    b.Navigation("SmsGsmsendingTank");

                    b.Navigation("SmsProviders");

                    b.Navigation("SmsReceive");

                    b.Navigation("SmsReceiveFromWsdl");

                    b.Navigation("SmsSendDetail");

                    b.Navigation("SmsSendHeader");

                    b.Navigation("SmsSendType");

                    b.Navigation("SmsSendTypeLang");

                    b.Navigation("SmsSetting");

                    b.Navigation("SmsTempMobileNumbers");

                    b.Navigation("SmsUserSendCredit");

                    b.Navigation("SmsUserSendCreditLang");

                    b.Navigation("UserDepartments");

                    b.Navigation("UserDepartmentsLang");

                    b.Navigation("UserDepartmentTicketReferUsers");

                    b.Navigation("UserLanguages");

                    b.Navigation("UserLoginAllowedTimes");

                    b.Navigation("Users");

                    b.Navigation("UserSignature");

                    b.Navigation("UsersLang");

                    b.Navigation("UsersPermission");

                    b.Navigation("UsersPermissionLang");

                    b.Navigation("WsbuyOrder");

                    b.Navigation("WsbuyOrderItems");

                    b.Navigation("WsbuyOrderItemSerials");

                    b.Navigation("WsbuyOrderItemSerialsLang");

                    b.Navigation("WsbuyOrderItemsLang");

                    b.Navigation("WsbuyOrderLang");

                    b.Navigation("WsbuyOrderOpr");

                    b.Navigation("WsbuyOrderOprLang");

                    b.Navigation("WsbuyOrderPayments");

                    b.Navigation("WsbuyOrderPaymentsLang");

                    b.Navigation("WsbuyOrderPaymentTypes");

                    b.Navigation("WsbuyOrderPaymentTypesLang");

                    b.Navigation("WsbuyOrderStatus");

                    b.Navigation("WsbuyOrderStatusLang");

                    b.Navigation("WscreditDuration");

                    b.Navigation("WscreditDurationLang");

                    b.Navigation("WscurrencyUnits");

                    b.Navigation("WscurrencyUnitsLang");

                    b.Navigation("WsdeliveryTime");

                    b.Navigation("WsdeliveryTimeLang");

                    b.Navigation("Wsdoc");

                    b.Navigation("WsdocItems");

                    b.Navigation("WsdocItemSerials");

                    b.Navigation("WsdocItemSerialsLang");

                    b.Navigation("WsdocItemsLang");

                    b.Navigation("WsdocLang");

                    b.Navigation("WsdocOpr");

                    b.Navigation("WsdocOprLang");

                    b.Navigation("WsfinancialPeriod");

                    b.Navigation("Wsguaranty");

                    b.Navigation("WsguarantyLang");

                    b.Navigation("WslinkedProducts");

                    b.Navigation("Wslogo");

                    b.Navigation("WslogoLang");

                    b.Navigation("Wsorder");

                    b.Navigation("WsorderCommissionPayTypes");

                    b.Navigation("WsorderCommissionPayTypesLang");

                    b.Navigation("WsorderCommissions");

                    b.Navigation("WsorderCommissionsLang");

                    b.Navigation("WsorderDefaultSetting");

                    b.Navigation("WsorderDefaultSettingLang");

                    b.Navigation("WsorderItems");

                    b.Navigation("WsorderItemSerials");

                    b.Navigation("WsorderItemSerialsLang");

                    b.Navigation("WsorderItemsLang");

                    b.Navigation("WsorderLang");

                    b.Navigation("WsorderOpr");

                    b.Navigation("WsorderOprLang");

                    b.Navigation("WsorderPayments");

                    b.Navigation("WsorderPaymentsLang");

                    b.Navigation("WsorderPaymentTypes");

                    b.Navigation("WsorderPaymentTypesLang");

                    b.Navigation("WsorderStatus");

                    b.Navigation("WsorderStatusLang");

                    b.Navigation("WspayCondition");

                    b.Navigation("WspayConditionLang");

                    b.Navigation("WspreOrder");

                    b.Navigation("WspreOrderDefaultSetting");

                    b.Navigation("WspreOrderDefaultSettingLang");

                    b.Navigation("WspreOrderItems");

                    b.Navigation("WspreOrderItemsLang");

                    b.Navigation("WspreOrderItemSpecification");

                    b.Navigation("WspreOrderItemSpecificationLang");

                    b.Navigation("WspreOrderLang");

                    b.Navigation("WspreOrderOpr");

                    b.Navigation("WspreOrderOprLang");

                    b.Navigation("WspreOrderPayments");

                    b.Navigation("WspreOrderPaymentsLang");

                    b.Navigation("WspreOrderPrdGroupMustExistReasonGroups");

                    b.Navigation("WspreOrderPrdGroupMustExistReasonGroupsLang");

                    b.Navigation("WspreOrderPrdGroupMustExistReasons");

                    b.Navigation("WspreOrderPrdGroupMustExistReasonsLang");

                    b.Navigation("WspreOrderStatus");

                    b.Navigation("WspreOrderStatusLang");

                    b.Navigation("WsproductColor");

                    b.Navigation("WsproductColorLang");

                    b.Navigation("WsproductCost");

                    b.Navigation("WsproductCostGroup");

                    b.Navigation("WsproductCostGroupLang");

                    b.Navigation("WsproductCostLang");

                    b.Navigation("WsproductFirstGroup");

                    b.Navigation("WsproductFirstGroupLang");

                    b.Navigation("WsproductGallery");

                    b.Navigation("WsproductImportFromExcel");

                    b.Navigation("WsproductImportFromExcelFields");

                    b.Navigation("WsproductImportFromExcelFieldsLang");

                    b.Navigation("WsproductPicture");

                    b.Navigation("WsproductPictureLang");

                    b.Navigation("WsproductPrice");

                    b.Navigation("WsproductPriceGroup");

                    b.Navigation("WsproductPriceGroupLang");

                    b.Navigation("WsproductPriceLang");

                    b.Navigation("Wsproducts");

                    b.Navigation("WsproductSecondGroup");

                    b.Navigation("WsproductSecondGroupLang");

                    b.Navigation("WsproductShpStockManageTypes");

                    b.Navigation("WsproductShpStockManageTypesLang");

                    b.Navigation("WsproductsLang");

                    b.Navigation("WsproductSpecification");

                    b.Navigation("WsproductSpecificationLang");

                    b.Navigation("WsproductsRate");

                    b.Navigation("WsproductsUserDiscount");

                    b.Navigation("WsproductsUserDiscountLang");

                    b.Navigation("WsproductUnits");

                    b.Navigation("WsproductUnitsLang");

                    b.Navigation("WsregisterBarCode");

                    b.Navigation("WssettlementType");

                    b.Navigation("WssettlementTypeLang");

                    b.Navigation("Wssignature");

                    b.Navigation("WstmpEnterBarcodeOperation");

                    b.Navigation("WstmpEnterDocPrdWithBarcode");

                    b.Navigation("WstmpUserItemCopy");

                    b.Navigation("WsuserFavproductItems");

                    b.Navigation("WsuserFavproductItemsLang");

                    b.Navigation("WsuserFavproducts");

                    b.Navigation("WsuserFavproductsLang");

                    b.Navigation("WsverificationRequestDetails");

                    b.Navigation("WsverificationRequestDetailsLang");

                    b.Navigation("WsverificationRequests");

                    b.Navigation("WsverificationRequestsLang");

                    b.Navigation("WsverificationWorkFlows");

                    b.Navigation("WsverificationWorkFlowsLang");

                    b.Navigation("WsverificationWorkFlowSteps");

                    b.Navigation("WsverificationWorkFlowStepsLang");

                    b.Navigation("WsWareHouse");

                    b.Navigation("WsWareHouseLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.ParsaPooladMenus", b =>
                {
                    b.Navigation("WsproductFirstGroup");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollItemTypes", b =>
                {
                    b.Navigation("PayRollItems");

                    b.Navigation("PayRollItemTypesLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollItems", b =>
                {
                    b.Navigation("PayRollItemsLang");

                    b.Navigation("PayRollUserCycleItemValues");

                    b.Navigation("PayRollUserDefaultItems");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserCycle", b =>
                {
                    b.Navigation("PayRollUserCycleItemValues");

                    b.Navigation("PayRollUserCycleLang");

                    b.Navigation("PayRollUserPayments");

                    b.Navigation("WsorderCommissions");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserPaymentTypes", b =>
                {
                    b.Navigation("PayRollUserPayments");

                    b.Navigation("PayRollUserPaymentTypesLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PayRollUserPayments", b =>
                {
                    b.Navigation("PayRollUserPaymentsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormat", b =>
                {
                    b.Navigation("CrmDyForms");

                    b.Navigation("PayRollUserCycle");

                    b.Navigation("PrintFormatLang");

                    b.Navigation("SecLetterDefaultSettings");

                    b.Navigation("SecLetters");

                    b.Navigation("WsbuyOrder");

                    b.Navigation("Wsorder");

                    b.Navigation("WsorderDefaultSetting");

                    b.Navigation("WspreOrder");

                    b.Navigation("WspreOrderDefaultSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.PrintFormatType", b =>
                {
                    b.Navigation("PrintFormat");

                    b.Navigation("PrintFormatTypeLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Projects", b =>
                {
                    b.Navigation("ProjectsLang");

                    b.Navigation("UsersPermission");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Province", b =>
                {
                    b.Navigation("City");

                    b.Navigation("CrmCompany");

                    b.Navigation("CrmCompanyForbiddenProvince");

                    b.Navigation("CrmCompanyJustAccessProvince");

                    b.Navigation("CrmCompanyPersons");

                    b.Navigation("CrmCompanyPersonsTemplate");

                    b.Navigation("CrmCompanyPersonsTmp");

                    b.Navigation("CrmCompanyTmp");

                    b.Navigation("ProvinceLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SecLetterDefaultSettings", b =>
                {
                    b.Navigation("SecLetterDefaultSettingsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SecLetterType", b =>
                {
                    b.Navigation("SecLetters");

                    b.Navigation("SecLetterTypeLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SecLetters", b =>
                {
                    b.Navigation("SecLettersLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Sex", b =>
                {
                    b.Navigation("CrmCompanyPersons");

                    b.Navigation("CrmCompanyPersonsTemplate");

                    b.Navigation("CrmCompanyPersonsTmp");

                    b.Navigation("SexLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsDefaultBodyText", b =>
                {
                    b.Navigation("SmsDefaultBodyTextLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsDefaultBodyTextGroups", b =>
                {
                    b.Navigation("SmsDefaultBodyText");

                    b.Navigation("SmsDefaultBodyTextGroupsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsDeliveryStatus", b =>
                {
                    b.Navigation("SmsDeliveryStatusLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsProviders", b =>
                {
                    b.Navigation("SmsSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsSendHeader", b =>
                {
                    b.Navigation("SmsSendDetail");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsSendType", b =>
                {
                    b.Navigation("SmsSendTypeLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.SmsUserSendCredit", b =>
                {
                    b.Navigation("SmsUserSendCreditLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UserDepartments", b =>
                {
                    b.Navigation("CrmProjects");

                    b.Navigation("CrmProjectsTmp");

                    b.Navigation("UserDepartmentsLang");

                    b.Navigation("UserDepartmentTicketReferUsers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Users", b =>
                {
                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("CrmAddressingFirstRegisterUser");

                    b.Navigation("CrmAddressingType");

                    b.Navigation("CrmAddressingUser");

                    b.Navigation("CrmBankingAccounts");

                    b.Navigation("CrmBankingAccountType");

                    b.Navigation("CrmBankingBanks");

                    b.Navigation("CrmBankingBranches");

                    b.Navigation("CrmCallBlackListBluser");

                    b.Navigation("CrmCallBlackListFirstRegisterUser");

                    b.Navigation("CrmCallBlackListUser");

                    b.Navigation("CrmCallHistoryFirstRegisterUser");

                    b.Navigation("CrmCallHistoryNoteEditedUser");

                    b.Navigation("CrmCallHistoryNoteRegisterUser");

                    b.Navigation("CrmCallHistoryNumberEditedUser");

                    b.Navigation("CrmCallHistoryUser");

                    b.Navigation("CrmCallType");

                    b.Navigation("CrmCmsCommentsFirstRegisterUser");

                    b.Navigation("CrmCmsCommentsUser");

                    b.Navigation("CrmCmsCommentsVerifiedUser");

                    b.Navigation("CrmCmsFilesFirstRegisterUser");

                    b.Navigation("CrmCmsFilesUser");

                    b.Navigation("CrmCmsGalleryFirstRegisterUser");

                    b.Navigation("CrmCmsGalleryItemsFirstRegisterUser");

                    b.Navigation("CrmCmsGalleryItemsUser");

                    b.Navigation("CrmCmsGalleryUser");

                    b.Navigation("CrmCmsLikesFirstRegisterUser");

                    b.Navigation("CrmCmsLikesUser");

                    b.Navigation("CrmCmsMenusFirstRegisterUser");

                    b.Navigation("CrmCmsMenusUser");

                    b.Navigation("CrmCmsNewsFirstRegisterUser");

                    b.Navigation("CrmCmsNewsGroupsFirstRegisterUser");

                    b.Navigation("CrmCmsNewsGroupsUser");

                    b.Navigation("CrmCmsNewsUser");

                    b.Navigation("CrmCmsNewsVerifiedUser");

                    b.Navigation("CrmCmsObjectTypesFirstRegisterUser");

                    b.Navigation("CrmCmsObjectTypesUser");

                    b.Navigation("CrmCmsPagesFirstRegisterUser");

                    b.Navigation("CrmCmsPagesUser");

                    b.Navigation("CrmCompany");

                    b.Navigation("CrmCompanyForbiddenCityCrmUser");

                    b.Navigation("CrmCompanyForbiddenCityFirstRegisterUser");

                    b.Navigation("CrmCompanyForbiddenCityUser");

                    b.Navigation("CrmCompanyForbiddenCompanyCrmUser");

                    b.Navigation("CrmCompanyForbiddenCompanyFirstRegisterUser");

                    b.Navigation("CrmCompanyForbiddenCompanyUser");

                    b.Navigation("CrmCompanyForbiddenDepartmentCrmUser");

                    b.Navigation("CrmCompanyForbiddenDepartmentFirstRegisterUser");

                    b.Navigation("CrmCompanyForbiddenDepartmentUser");

                    b.Navigation("CrmCompanyForbiddenGroupCrmUser");

                    b.Navigation("CrmCompanyForbiddenGroupFirstRegisterUser");

                    b.Navigation("CrmCompanyForbiddenGroupIvCrmUser");

                    b.Navigation("CrmCompanyForbiddenGroupIvFirstRegisterUser");

                    b.Navigation("CrmCompanyForbiddenGroupIvUser");

                    b.Navigation("CrmCompanyForbiddenGroupUser");

                    b.Navigation("CrmCompanyForbiddenProvinceCrmUser");

                    b.Navigation("CrmCompanyForbiddenProvinceFirstRegisterUser");

                    b.Navigation("CrmCompanyForbiddenProvinceUser");

                    b.Navigation("CrmCompanyForbiddenSubGroupCrmUser");

                    b.Navigation("CrmCompanyForbiddenSubGroupFirstRegisterUser");

                    b.Navigation("CrmCompanyForbiddenSubGroupUser");

                    b.Navigation("CrmCompanyGroups");

                    b.Navigation("CrmCompanyGroupsIi");

                    b.Navigation("CrmCompanyGroupsIii");

                    b.Navigation("CrmCompanyGroupsIv");

                    b.Navigation("CrmCompanyGroupsMulti");

                    b.Navigation("CrmCompanyJustAccessCityCrmUser");

                    b.Navigation("CrmCompanyJustAccessCityFirstRegisterUser");

                    b.Navigation("CrmCompanyJustAccessCityUser");

                    b.Navigation("CrmCompanyJustAccessCompanyCrmUser");

                    b.Navigation("CrmCompanyJustAccessCompanyFirstRegisterUser");

                    b.Navigation("CrmCompanyJustAccessCompanyUser");

                    b.Navigation("CrmCompanyJustAccessDepartmentCrmUser");

                    b.Navigation("CrmCompanyJustAccessDepartmentFirstRegisterUser");

                    b.Navigation("CrmCompanyJustAccessDepartmentUser");

                    b.Navigation("CrmCompanyJustAccessGroupCrmUser");

                    b.Navigation("CrmCompanyJustAccessGroupFirstRegisterUser");

                    b.Navigation("CrmCompanyJustAccessGroupIvCrmUser");

                    b.Navigation("CrmCompanyJustAccessGroupIvFirstRegisterUser");

                    b.Navigation("CrmCompanyJustAccessGroupIvUser");

                    b.Navigation("CrmCompanyJustAccessGroupUser");

                    b.Navigation("CrmCompanyJustAccessProvinceCrmUser");

                    b.Navigation("CrmCompanyJustAccessProvinceFirstRegisterUser");

                    b.Navigation("CrmCompanyJustAccessProvinceUser");

                    b.Navigation("CrmCompanyJustAccessSubGroupCrmUser");

                    b.Navigation("CrmCompanyJustAccessSubGroupFirstRegisterUser");

                    b.Navigation("CrmCompanyJustAccessSubGroupUser");

                    b.Navigation("CrmCompanyLoGoFirstRegisterUser");

                    b.Navigation("CrmCompanyLoGoUser");

                    b.Navigation("CrmCompanyMultiGroupsFirstRegisterUser");

                    b.Navigation("CrmCompanyMultiGroupsUser");

                    b.Navigation("CrmCompanyPersons");

                    b.Navigation("CrmCompanyPersonsTemplate");

                    b.Navigation("CrmCompanyPersonsTmpFirstRegisterUser");

                    b.Navigation("CrmCompanyPersonsTmpPrsFirstRegisterUser");

                    b.Navigation("CrmCompanyPersonsTmpUser");

                    b.Navigation("CrmCompanyPictureAlbumsFirstRegisterUser");

                    b.Navigation("CrmCompanyPictureAlbumsUser");

                    b.Navigation("CrmCompanyPicturesFirstRegisterUser");

                    b.Navigation("CrmCompanyPicturesUser");

                    b.Navigation("CrmCompanyPresentation");

                    b.Navigation("CrmCompanySubGroups");

                    b.Navigation("CrmCompanyTitle");

                    b.Navigation("CrmCompanyTmpCmpCoordinateLastUser");

                    b.Navigation("CrmCompanyTmpCmpFirstRegisterUser");

                    b.Navigation("CrmCompanyTmpCmpReferUser");

                    b.Navigation("CrmCompanyTmpFirstRegisterUser");

                    b.Navigation("CrmCompanyTmpUser");

                    b.Navigation("CrmCompanyType");

                    b.Navigation("CrmCompanyUserForbiddenCrmUser");

                    b.Navigation("CrmCompanyUserForbiddenFirstRegisterUser");

                    b.Navigation("CrmCompanyUserForbiddenUser");

                    b.Navigation("CrmConversationCnvsFirstRegisterUser");

                    b.Navigation("CrmConversationCnvsReferUser");

                    b.Navigation("CrmConversationCnvsUser");

                    b.Navigation("CrmConversationDefaultContext");

                    b.Navigation("CrmConversationFirstRegisterUser");

                    b.Navigation("CrmConversationPriority");

                    b.Navigation("CrmConversationReferUsersFirstRegisterUser");

                    b.Navigation("CrmConversationReferUsersReferUser");

                    b.Navigation("CrmConversationReferUsersUser");

                    b.Navigation("CrmConversationStatus");

                    b.Navigation("CrmConversationStatusGroupsFocnvsReferUser");

                    b.Navigation("CrmConversationStatusGroupsUser");

                    b.Navigation("CrmConversationTmpCnvsFirstRegisterUser");

                    b.Navigation("CrmConversationTmpCnvsReferUser");

                    b.Navigation("CrmConversationTmpCnvsUser");

                    b.Navigation("CrmConversationTmpFirstRegisterUser");

                    b.Navigation("CrmConversationTmpUser");

                    b.Navigation("CrmConversationTopics");

                    b.Navigation("CrmConversationUser");

                    b.Navigation("CrmDyFormFieldMasterValueDetailsCheckerUser");

                    b.Navigation("CrmDyFormFieldMasterValueDetailsFirstRegisterUser");

                    b.Navigation("CrmDyFormFieldMasterValueDetailsUser");

                    b.Navigation("CrmDyFormFieldMasterValuesCheckerUser");

                    b.Navigation("CrmDyFormFieldMasterValuesFirstRegisterUser");

                    b.Navigation("CrmDyFormFieldMasterValuesUser");

                    b.Navigation("CrmDyFormFieldsFirstRegisterUser");

                    b.Navigation("CrmDyFormFieldsUser");

                    b.Navigation("CrmDyFormFieldTypesFirstRegisterUser");

                    b.Navigation("CrmDyFormFieldTypesUser");

                    b.Navigation("CrmDyFormFieldValuesFirstRegisterUser");

                    b.Navigation("CrmDyFormFieldValuesUser");

                    b.Navigation("CrmDyFormRegularExpressionsFirstRegisterUser");

                    b.Navigation("CrmDyFormRegularExpressionsUser");

                    b.Navigation("CrmDyFormsFirstRegisterUser");

                    b.Navigation("CrmDyFormsUser");

                    b.Navigation("CrmDyFormUserAccessCrmUser");

                    b.Navigation("CrmDyFormUserAccessFirstRegisterUser");

                    b.Navigation("CrmDyFormUserAccessUser");

                    b.Navigation("CrmDyFormWorkflowsFirstRegisterUser");

                    b.Navigation("CrmDyFormWorkflowStepsFirstRegisterUser");

                    b.Navigation("CrmDyFormWorkflowStepsUser");

                    b.Navigation("CrmDyFormWorkflowsUser");

                    b.Navigation("CrmFileDirectoryType");

                    b.Navigation("CrmFileDirectoryTypeOpr");

                    b.Navigation("CrmFilesDirectory");

                    b.Navigation("CrmFilesDirectoryTemplate");

                    b.Navigation("CrmFilesDirectoryTemplateType");

                    b.Navigation("CrmFoSettingCmpDefaultReferUser");

                    b.Navigation("CrmFoSettingCnvsDefaultReferUser");

                    b.Navigation("CrmFoSettingCnvsDefaultUser");

                    b.Navigation("CrmFoSettingFirstRegisterUser");

                    b.Navigation("CrmFoSettingPrjDefaultStarterUser");

                    b.Navigation("CrmFoSettingUser");

                    b.Navigation("CrmFundCrmUser");

                    b.Navigation("CrmFundFirstRegisterUser");

                    b.Navigation("CrmFundGroupsFirstRegisterUser");

                    b.Navigation("CrmFundGroupsUser");

                    b.Navigation("CrmFundUser");

                    b.Navigation("CrmInternalMessage");

                    b.Navigation("CrmInternalMessageDefaultContext");

                    b.Navigation("CrmInternalMessageDetailsFirstRegisterUser");

                    b.Navigation("CrmInternalMessageDetailsMsgdFromUser");

                    b.Navigation("CrmInternalMessageDetailsMsgdToUser");

                    b.Navigation("CrmInternalMessageDetailsUser");

                    b.Navigation("CrmInternalMessageGroup");

                    b.Navigation("CrmInternalMessagePriority");

                    b.Navigation("CrmInternalMessageSelectReceiver");

                    b.Navigation("CrmInternalMessageTreeTypeFirstRegisterUser");

                    b.Navigation("CrmInternalMessageTreeTypeUser");

                    b.Navigation("CrmInternalMessageType");

                    b.Navigation("CrmKnowledgeTank");

                    b.Navigation("CrmKnowledgeTankGroup");

                    b.Navigation("CrmKnowledgeTankGroupPermissionFirstRegisterUser");

                    b.Navigation("CrmKnowledgeTankGroupPermissionUser");

                    b.Navigation("CrmKnowledgeTankPriority");

                    b.Navigation("CrmLeave");

                    b.Navigation("CrmLeaveKinds");

                    b.Navigation("CrmLeaveStatus");

                    b.Navigation("CrmLeaveStayType");

                    b.Navigation("CrmLeaveType");

                    b.Navigation("CrmLeaveVehicleType");

                    b.Navigation("CrmLinkAccNoAvSettingDetailsFirstRegisterUser");

                    b.Navigation("CrmLinkAccNoAvSettingDetailsUser");

                    b.Navigation("CrmLinkAccNoAvSettingFirstRegisterUser");

                    b.Navigation("CrmLinkAccNoAvSettingUser");

                    b.Navigation("CrmLinkAccSettingDetailsFirstRegisterUser");

                    b.Navigation("CrmLinkAccSettingDetailsUser");

                    b.Navigation("CrmLinkAccSettingFirstRegisterUser");

                    b.Navigation("CrmLinkAccSettingUser");

                    b.Navigation("CrmLinkAccSystemsFirstRegisterUser");

                    b.Navigation("CrmLinkAccSystemsUser");

                    b.Navigation("CrmLinkAccTarazSettingDetailsFirstRegisterUser");

                    b.Navigation("CrmLinkAccTarazSettingDetailsUser");

                    b.Navigation("CrmLinkAccTarazSettingFirstRegisterUser");

                    b.Navigation("CrmLinkAccTarazSettingUser");

                    b.Navigation("CrmLinkedCompanyFirstRegisterUser");

                    b.Navigation("CrmLinkedCompanyUser");

                    b.Navigation("CrmLinkedType");

                    b.Navigation("CrmLinkedUsersCrmUser");

                    b.Navigation("CrmLinkedUsersFirstRegisterUser");

                    b.Navigation("CrmLinkedUsersLinkedUser");

                    b.Navigation("CrmLinkedUsersUser");

                    b.Navigation("CrmOperationsTypeFirstRegisterUser");

                    b.Navigation("CrmOperationsTypeUser");

                    b.Navigation("CrmPersonDepartments");

                    b.Navigation("CrmPersonGroups");

                    b.Navigation("CrmPersonJobs");

                    b.Navigation("CrmPersonPictureFirstRegisterUser");

                    b.Navigation("CrmPersonPictureUser");

                    b.Navigation("CrmPersonTitle");

                    b.Navigation("CrmPersonType");

                    b.Navigation("CrmProjectDefualtValue");

                    b.Navigation("CrmProjectFieldTitle");

                    b.Navigation("CrmProjectFieldValueType");

                    b.Navigation("CrmProjectGrade");

                    b.Navigation("CrmProjectGroups");

                    b.Navigation("CrmProjectGroupsMulti");

                    b.Navigation("CrmProjectGroupsMultiI");

                    b.Navigation("CrmProjectInformationsFirstRegisterUser");

                    b.Navigation("CrmProjectInformationsUser");

                    b.Navigation("CrmProjectMultiGroupsFirstRegisterUser");

                    b.Navigation("CrmProjectMultiGroupsUser");

                    b.Navigation("CrmProjectMultiIgroupsFirstRegisterUser");

                    b.Navigation("CrmProjectMultiIgroupsUser");

                    b.Navigation("CrmProjectPriorityFirstRegisterUser");

                    b.Navigation("CrmProjectPriorityUser");

                    b.Navigation("CrmProjectsFirstRegisterUser");

                    b.Navigation("CrmProjectsForbiddenForUserCrmUser");

                    b.Navigation("CrmProjectsForbiddenForUserFirstRegisterUser");

                    b.Navigation("CrmProjectsForbiddenForUserUser");

                    b.Navigation("CrmProjectsPrjFinishedUser");

                    b.Navigation("CrmProjectsPrjFirstRegisterUser");

                    b.Navigation("CrmProjectsPrjStarterUser");

                    b.Navigation("CrmProjectsTmpFirstRegisterUser");

                    b.Navigation("CrmProjectsTmpPrjFinishedUser");

                    b.Navigation("CrmProjectsTmpPrjFirstRegisterUser");

                    b.Navigation("CrmProjectsTmpPrjStarterUser");

                    b.Navigation("CrmProjectsTmpUser");

                    b.Navigation("CrmProjectsUser");

                    b.Navigation("CrmProjectTitlesFirstRegisterUser");

                    b.Navigation("CrmProjectTitlesUser");

                    b.Navigation("CrmShowTableFieldInFoFirstRegisterUser");

                    b.Navigation("CrmShowTableFieldInFoUser");

                    b.Navigation("CrmsysCideviceType");

                    b.Navigation("CrmsysCipopUpSettingFirstRegisterUser");

                    b.Navigation("CrmsysCipopUpSettingUser");

                    b.Navigation("CrmsysCisetting");

                    b.Navigation("CrmsysDbobjects");

                    b.Navigation("CrmsysDbtempInfoFirstRegisterUser");

                    b.Navigation("CrmsysDbtempInfoType");

                    b.Navigation("CrmsysDbtempInfoUser");

                    b.Navigation("CrmsysFormActions");

                    b.Navigation("CrmsysFormObjectPropertiesFirstRegisterUser");

                    b.Navigation("CrmsysFormObjectPropertiesUser");

                    b.Navigation("CrmsysForms");

                    b.Navigation("CrmsysRollPermission");

                    b.Navigation("CrmsysRolls");

                    b.Navigation("CrmsysSettingFirstRegisterUser");

                    b.Navigation("CrmsysSettingUser");

                    b.Navigation("CrmSystemPartsFirstRegisterUser");

                    b.Navigation("CrmSystemPartsUser");

                    b.Navigation("CrmTelegBotChatMessage");

                    b.Navigation("CrmTelegBotContactsFirstRegisterUser");

                    b.Navigation("CrmTelegBotContactsUser");

                    b.Navigation("CrmTelegBotSettingFirstRegisterUser");

                    b.Navigation("CrmTelegBotSettingUser");

                    b.Navigation("CrmTelegChatMessage");

                    b.Navigation("CrmTelegContactsFirstRegisterUser");

                    b.Navigation("CrmTelegContactsUser");

                    b.Navigation("CrmTelegSettingFirstRegisterUser");

                    b.Navigation("CrmTelegSettingUser");

                    b.Navigation("CrmTempEmailsFirstRegisterUser");

                    b.Navigation("CrmTempEmailsPrsRegisterUser");

                    b.Navigation("CrmTempEmailsUser");

                    b.Navigation("CrmTimeAttendanceBaseFirstRegisterUser");

                    b.Navigation("CrmTimeAttendanceBaseUser");

                    b.Navigation("CrmTimeAttendanceFirstRegisterUser");

                    b.Navigation("CrmTimeAttendanceLogFirstRegisterUser");

                    b.Navigation("CrmTimeAttendanceLogTmlUser");

                    b.Navigation("CrmTimeAttendanceLogUser");

                    b.Navigation("CrmTimeAttendanceTmUser");

                    b.Navigation("CrmTimeAttendanceUser");

                    b.Navigation("CrmtmpManageTellNumberFirstRegisterUser");

                    b.Navigation("CrmtmpManageTellNumberUser");

                    b.Navigation("CrmUserNotesFirstRegisterUser");

                    b.Navigation("CrmUserNotesUser");

                    b.Navigation("CrmUserTaskGroupsFirstRegisterUser");

                    b.Navigation("CrmUserTaskGroupsUser");

                    b.Navigation("CrmUserTaskPrioritiesFirstRegisterUser");

                    b.Navigation("CrmUserTaskPrioritiesUser");

                    b.Navigation("CrmUserTasksFirstRegisterUser");

                    b.Navigation("CrmUserTasksUser");

                    b.Navigation("CrmVersions");

                    b.Navigation("CrmVersionUpgrade");

                    b.Navigation("CrmVersionUpgradeDetails");

                    b.Navigation("CrmWebSettingFirstRegisterUser");

                    b.Navigation("CrmWebSettingUser");

                    b.Navigation("EducationFirstRegisterUser");

                    b.Navigation("EducationUser");

                    b.Navigation("EmailDefaultBodyTextFirstRegisterUser");

                    b.Navigation("EmailDefaultBodyTextUser");

                    b.Navigation("EmailReceiveAttachmentsFirstRegisterUser");

                    b.Navigation("EmailReceiveAttachmentsUser");

                    b.Navigation("EmailReceiveFirstRegisterUser");

                    b.Navigation("EmailReceiveFoldersFirstRegisterUser");

                    b.Navigation("EmailReceiveFoldersUser");

                    b.Navigation("EmailReceiveUser");

                    b.Navigation("EmailSendAttachment");

                    b.Navigation("EmailSendDetail");

                    b.Navigation("EmailSendHeaderFirstRegisterUser");

                    b.Navigation("EmailSendHeaderUser");

                    b.Navigation("EmailSettingFirstRegisterUser");

                    b.Navigation("EmailSettingUser");

                    b.Navigation("EmailUserDefaultSettingFirstRegisterUser");

                    b.Navigation("EmailUserDefaultSettingUser");

                    b.Navigation("EmailUsersInfoEuUser");

                    b.Navigation("EmailUsersInfoFirstRegisterUser");

                    b.Navigation("EmailUsersInfoUser");

                    b.Navigation("EmailUserTempTankFirstRegisterUser");

                    b.Navigation("EmailUserTempTankUser");

                    b.Navigation("InverseUserId1Navigation");

                    b.Navigation("LanguagesFirstRegisterUser");

                    b.Navigation("LanguagesUser");

                    b.Navigation("MobApiAndTableDetailFirstRegisterUser");

                    b.Navigation("MobApiAndTableDetailUser");

                    b.Navigation("MobCompanyAppInfoFirstRegisterUser");

                    b.Navigation("MobCompanyAppInfoUser");

                    b.Navigation("MyWebsites");

                    b.Navigation("PayRollItemsFirstRegisterUser");

                    b.Navigation("PayRollItemsUser");

                    b.Navigation("PayRollItemTypesFirstRegisterUser");

                    b.Navigation("PayRollItemTypesUser");

                    b.Navigation("PayRollUserCycleCrmUser");

                    b.Navigation("PayRollUserCycleCycleVerifierUser");

                    b.Navigation("PayRollUserCycleFirstRegisterUser");

                    b.Navigation("PayRollUserCycleItemValuesCrmUser");

                    b.Navigation("PayRollUserCycleItemValuesFirstRegisterUser");

                    b.Navigation("PayRollUserCycleItemValuesUser");

                    b.Navigation("PayRollUserCycleUser");

                    b.Navigation("PayRollUserDefaultItemsCrmUser");

                    b.Navigation("PayRollUserDefaultItemsFirstRegisterUser");

                    b.Navigation("PayRollUserDefaultItemsUser");

                    b.Navigation("PayRollUserPaymentsFirstRegisterUser");

                    b.Navigation("PayRollUserPaymentsUser");

                    b.Navigation("PayRollUserPaymentTypesFirstRegisterUser");

                    b.Navigation("PayRollUserPaymentTypesUser");

                    b.Navigation("PrintFormatFirstRegisterUser");

                    b.Navigation("PrintFormatTypeFirstRegisterUser");

                    b.Navigation("PrintFormatTypeUser");

                    b.Navigation("PrintFormatUser");

                    b.Navigation("Projects");

                    b.Navigation("ProvinceFirstRegisterUser");

                    b.Navigation("ProvinceUser");

                    b.Navigation("SecLetterDefaultSettingsFirstRegisterUser");

                    b.Navigation("SecLetterDefaultSettingsLdreferUser");

                    b.Navigation("SecLetterDefaultSettingsLdverifierRequest");

                    b.Navigation("SecLetterDefaultSettingsUser");

                    b.Navigation("SecLettersFirstRegisterUser");

                    b.Navigation("SecLettersLetterVerifier");

                    b.Navigation("SecLettersLetterVerifierRequest");

                    b.Navigation("SecLettersUser");

                    b.Navigation("SecLetterTypeFirstRegisterUser");

                    b.Navigation("SecLetterTypeUser");

                    b.Navigation("SexFirstRegisterUser");

                    b.Navigation("SexUser");

                    b.Navigation("SmsDefaultBodyTextFirstRegisterUser");

                    b.Navigation("SmsDefaultBodyTextGroupsFirstRegisterUser");

                    b.Navigation("SmsDefaultBodyTextGroupsUser");

                    b.Navigation("SmsDefaultBodyTextUser");

                    b.Navigation("SmsDeliveryStatus");

                    b.Navigation("SmsGsmmodemDelivery");

                    b.Navigation("SmsGsmmodemSettingFirstRegisterUser");

                    b.Navigation("SmsGsmmodemSettingUser");

                    b.Navigation("SmsGsmreceives");

                    b.Navigation("SmsGsmsendingTank");

                    b.Navigation("SmsProvidersFirstRegisterUser");

                    b.Navigation("SmsProvidersUser");

                    b.Navigation("SmsReceiveFirstRegisterUser");

                    b.Navigation("SmsReceiveFromWsdl");

                    b.Navigation("SmsReceiveUser");

                    b.Navigation("SmsSendDetailFirstRegisterUser");

                    b.Navigation("SmsSendDetailSendUser");

                    b.Navigation("SmsSendDetailUser");

                    b.Navigation("SmsSendHeaderFirstRegisterUser");

                    b.Navigation("SmsSendHeaderSendUser");

                    b.Navigation("SmsSendHeaderUser");

                    b.Navigation("SmsSendType");

                    b.Navigation("SmsSettingFirstRegisterUser");

                    b.Navigation("SmsSettingUser");

                    b.Navigation("SmsTempMobileNumbersFirstRegisterUser");

                    b.Navigation("SmsTempMobileNumbersUser");

                    b.Navigation("SmsUserSendCreditCreditUser");

                    b.Navigation("SmsUserSendCreditFirstRegisterUser");

                    b.Navigation("SmsUserSendCreditUser");

                    b.Navigation("UserDepartmentsFirstRegisterUser");

                    b.Navigation("UserDepartmentsUser");

                    b.Navigation("UserDepartmentTicketReferUsersFirstRegisterUser");

                    b.Navigation("UserDepartmentTicketReferUsersReferUser");

                    b.Navigation("UserDepartmentTicketReferUsersUser");

                    b.Navigation("UserLanguagesFirstRegisterUser");

                    b.Navigation("UserLanguagesUser");

                    b.Navigation("UserLanguagesUserId1Navigation");

                    b.Navigation("UserLoginAllowedTimesCrmUser");

                    b.Navigation("UserLoginAllowedTimesFirstRegisterUser");

                    b.Navigation("UserLoginAllowedTimesFirstUser");

                    b.Navigation("UserLoginAllowedTimesUser");

                    b.Navigation("UserSignatureFirstRegisterUser");

                    b.Navigation("UserSignatureSignatureUser");

                    b.Navigation("UserSignatureUser");

                    b.Navigation("UsersLang");

                    b.Navigation("UsersPermissionFirstRegisterUser");

                    b.Navigation("UsersPermissionUser");

                    b.Navigation("WsbuyOrderBordFirstRegisterUser");

                    b.Navigation("WsbuyOrderBordReferUser");

                    b.Navigation("WsbuyOrderBordVerifier");

                    b.Navigation("WsbuyOrderFirstRegisterUser");

                    b.Navigation("WsbuyOrderItemSerialsFirstRegisterUser");

                    b.Navigation("WsbuyOrderItemSerialsUser");

                    b.Navigation("WsbuyOrderItemsFirstRegisterUser");

                    b.Navigation("WsbuyOrderItemsUser");

                    b.Navigation("WsbuyOrderOpr");

                    b.Navigation("WsbuyOrderPaymentsBordpayFirstRegisterUser");

                    b.Navigation("WsbuyOrderPaymentsFirstRegisterUser");

                    b.Navigation("WsbuyOrderPaymentsUser");

                    b.Navigation("WsbuyOrderPaymentTypesFirstRegisterUser");

                    b.Navigation("WsbuyOrderPaymentTypesUser");

                    b.Navigation("WsbuyOrderStatusFirstRegisterUser");

                    b.Navigation("WsbuyOrderStatusUser");

                    b.Navigation("WsbuyOrderUser");

                    b.Navigation("WscreditDurationFirstRegisterUser");

                    b.Navigation("WscreditDurationUser");

                    b.Navigation("WscurrencyUnitsFirstRegisterUser");

                    b.Navigation("WscurrencyUnitsUser");

                    b.Navigation("WsdeliveryTimeFirstRegisterUser");

                    b.Navigation("WsdeliveryTimeUser");

                    b.Navigation("WsdocFirstRegisterUser");

                    b.Navigation("WsdocItemSerialsFirstRegisterUser");

                    b.Navigation("WsdocItemSerialsUser");

                    b.Navigation("WsdocItemsFirstRegisterUser");

                    b.Navigation("WsdocItemsUser");

                    b.Navigation("WsdocOpr");

                    b.Navigation("WsdocUser");

                    b.Navigation("WsfinancialPeriodFirstRegisterUser");

                    b.Navigation("WsfinancialPeriodUser");

                    b.Navigation("WsguarantyFirstRegisterUser");

                    b.Navigation("WsguarantyUser");

                    b.Navigation("WslinkedProductsFirstRegisterUser");

                    b.Navigation("WslinkedProductsUser");

                    b.Navigation("WslogoFirstRegisterUser");

                    b.Navigation("WslogoUser");

                    b.Navigation("WsorderCommissionPayTypesFirstRegisterUser");

                    b.Navigation("WsorderCommissionPayTypesUser");

                    b.Navigation("WsorderCommissionsCommIsPaidUser");

                    b.Navigation("WsorderCommissionsCommUser");

                    b.Navigation("WsorderCommissionsCommVerifierUser");

                    b.Navigation("WsorderCommissionsFirstRegisterUser");

                    b.Navigation("WsorderCommissionsUser");

                    b.Navigation("WsorderDefaultSettingFirstRegisterUser");

                    b.Navigation("WsorderDefaultSettingReferUser");

                    b.Navigation("WsorderDefaultSettingUser");

                    b.Navigation("WsorderFirstRegisterUser");

                    b.Navigation("WsorderItemSerialsFirstRegisterUser");

                    b.Navigation("WsorderItemSerialsUser");

                    b.Navigation("WsorderItemsFirstRegisterUser");

                    b.Navigation("WsorderItemsUser");

                    b.Navigation("WsorderOpr");

                    b.Navigation("WsorderOrdFirstRegisterUser");

                    b.Navigation("WsorderOrdReferUser");

                    b.Navigation("WsorderOrdVerifier");

                    b.Navigation("WsorderOrdVerifierRequest");

                    b.Navigation("WsorderPaymentsFirstRegisterUser");

                    b.Navigation("WsorderPaymentsOrdpayFirstRegisterUser");

                    b.Navigation("WsorderPaymentsUser");

                    b.Navigation("WsorderPaymentTypesFirstRegisterUser");

                    b.Navigation("WsorderPaymentTypesUser");

                    b.Navigation("WsorderPreOrderVerifier");

                    b.Navigation("WsorderStatusFirstRegisterUser");

                    b.Navigation("WsorderStatusUser");

                    b.Navigation("WsorderUser");

                    b.Navigation("WspayConditionFirstRegisterUser");

                    b.Navigation("WspayConditionUser");

                    b.Navigation("WspreOrderDefaultSettingFirstRegisterUser");

                    b.Navigation("WspreOrderDefaultSettingReferUser");

                    b.Navigation("WspreOrderDefaultSettingUser");

                    b.Navigation("WspreOrderDefaultSettingVerifierRequest");

                    b.Navigation("WspreOrderFirstRegisterUser");

                    b.Navigation("WspreOrderItemsFirstRegisterUser");

                    b.Navigation("WspreOrderItemSpecificationFirstRegisterUser");

                    b.Navigation("WspreOrderItemSpecificationUser");

                    b.Navigation("WspreOrderItemsUser");

                    b.Navigation("WspreOrderOprFirstRegisterUser");

                    b.Navigation("WspreOrderOprUser");

                    b.Navigation("WspreOrderPaymentsFirstRegisterUser");

                    b.Navigation("WspreOrderPaymentsPordpayFirstRegisterUser");

                    b.Navigation("WspreOrderPaymentsUser");

                    b.Navigation("WspreOrderPordFirstRegisterUser");

                    b.Navigation("WspreOrderPordReferUser");

                    b.Navigation("WspreOrderPordVerifier");

                    b.Navigation("WspreOrderPordVerifierRequest");

                    b.Navigation("WspreOrderPrdGroupMustExistReasonsFirstRegisterUser");

                    b.Navigation("WspreOrderPrdGroupMustExistReasonsUser");

                    b.Navigation("WspreOrderStatusFirstRegisterUser");

                    b.Navigation("WspreOrderStatusUser");

                    b.Navigation("WspreOrderUser");

                    b.Navigation("WsproductColorFirstRegisterUser");

                    b.Navigation("WsproductColorUser");

                    b.Navigation("WsproductCostFirstRegisterUser");

                    b.Navigation("WsproductCostGroupFirstRegisterUser");

                    b.Navigation("WsproductCostGroupUser");

                    b.Navigation("WsproductCostUser");

                    b.Navigation("WsproductFirstGroup");

                    b.Navigation("WsproductGalleryFirstRegisterUser");

                    b.Navigation("WsproductGalleryUser");

                    b.Navigation("WsproductImportFromExcelFields");

                    b.Navigation("WsproductImportFromExcelFirstRegisterUser");

                    b.Navigation("WsproductImportFromExcelUser");

                    b.Navigation("WsproductPictureFirstRegisterUser");

                    b.Navigation("WsproductPictureUser");

                    b.Navigation("WsproductPriceFirstRegisterUser");

                    b.Navigation("WsproductPriceGroupFirstRegisterUser");

                    b.Navigation("WsproductPriceGroupUser");

                    b.Navigation("WsproductPriceUser");

                    b.Navigation("WsproductSecondGroupFirstRegisterUser");

                    b.Navigation("WsproductSecondGroupUser");

                    b.Navigation("WsproductsFirstRegisterUser");

                    b.Navigation("WsproductShpStockManageTypesFirstRegisterUser");

                    b.Navigation("WsproductShpStockManageTypesUser");

                    b.Navigation("WsproductSpecificationFirstRegisterUser");

                    b.Navigation("WsproductSpecificationUser");

                    b.Navigation("WsproductsRateFirstRegisterUser");

                    b.Navigation("WsproductsRateUser");

                    b.Navigation("WsproductsUser");

                    b.Navigation("WsproductsUserDiscountDiscountUser");

                    b.Navigation("WsproductsUserDiscountFirstRegisterUser");

                    b.Navigation("WsproductsUserDiscountUser");

                    b.Navigation("WsproductUnitsFirstRegisterUser");

                    b.Navigation("WsproductUnitsUser");

                    b.Navigation("WsregisterBarCode");

                    b.Navigation("WssettlementTypeFirstRegisterUser");

                    b.Navigation("WssettlementTypeUser");

                    b.Navigation("WssignatureFirstRegisterUser");

                    b.Navigation("WssignatureUser");

                    b.Navigation("WstmpEnterBarcodeOperation");

                    b.Navigation("WstmpEnterDocPrdWithBarcode");

                    b.Navigation("WstmpUserItemCopyFirstRegisterUser");

                    b.Navigation("WstmpUserItemCopyUser");

                    b.Navigation("WsuserFavproductItemsFirstRegisterUser");

                    b.Navigation("WsuserFavproductItemsUser");

                    b.Navigation("WsuserFavproductsFirstRegisterUser");

                    b.Navigation("WsuserFavproductsUser");

                    b.Navigation("WsverificationRequestDetailsFirstRegisterUser");

                    b.Navigation("WsverificationRequestDetailsUser");

                    b.Navigation("WsverificationRequestDetailsVerifyUser");

                    b.Navigation("WsverificationRequestsFirstRegisterUser");

                    b.Navigation("WsverificationRequestsUser");

                    b.Navigation("WsverificationRequestsVerificationReqUser");

                    b.Navigation("WsverificationWorkFlowsFirstRegisterUser");

                    b.Navigation("WsverificationWorkFlowStepsAlternateVerifyUser");

                    b.Navigation("WsverificationWorkFlowStepsFirstRegisterUser");

                    b.Navigation("WsverificationWorkFlowStepsUser");

                    b.Navigation("WsverificationWorkFlowStepsVerifyUser");

                    b.Navigation("WsverificationWorkFlowsUser");

                    b.Navigation("WsWareHouseFirstRegisterUser");

                    b.Navigation("WsWareHouseUser");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.UsersPermission", b =>
                {
                    b.Navigation("UsersPermissionLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsWareHouse", b =>
                {
                    b.Navigation("WsbuyOrderItems");

                    b.Navigation("WsbuyOrderItemSerials");

                    b.Navigation("Wsdoc");

                    b.Navigation("WsdocItems");

                    b.Navigation("WsdocItemSerials");

                    b.Navigation("WsorderItems");

                    b.Navigation("WsorderItemSerials");

                    b.Navigation("WspreOrderItems");

                    b.Navigation("WsproductCost");

                    b.Navigation("WsproductPicture");

                    b.Navigation("WsproductPrice");

                    b.Navigation("WstmpUserItemCopy");

                    b.Navigation("WsuserFavproductItems");

                    b.Navigation("WsWareHouseLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrder", b =>
                {
                    b.Navigation("WsbuyOrderItems");

                    b.Navigation("WsbuyOrderLang");

                    b.Navigation("WsbuyOrderPayments");

                    b.Navigation("Wsdoc");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderItemSerials", b =>
                {
                    b.Navigation("WsbuyOrderItemSerialsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderItems", b =>
                {
                    b.Navigation("WsbuyOrderItemSerials");

                    b.Navigation("WsbuyOrderItemsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderOpr", b =>
                {
                    b.Navigation("WsbuyOrder");

                    b.Navigation("WsbuyOrderOprLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderPaymentTypes", b =>
                {
                    b.Navigation("WsbuyOrderPayments");

                    b.Navigation("WsbuyOrderPaymentTypesLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderPayments", b =>
                {
                    b.Navigation("WsbuyOrderPaymentsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsbuyOrderStatus", b =>
                {
                    b.Navigation("WsbuyOrder");

                    b.Navigation("WsbuyOrderStatusLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WscreditDuration", b =>
                {
                    b.Navigation("WscreditDurationLang");

                    b.Navigation("WspreOrder");

                    b.Navigation("WspreOrderDefaultSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WscurrencyUnits", b =>
                {
                    b.Navigation("WsbuyOrderItems");

                    b.Navigation("WscurrencyUnitsLang");

                    b.Navigation("WsorderItems");

                    b.Navigation("WspreOrderItems");

                    b.Navigation("WsproductCost");

                    b.Navigation("WsproductImportFromExcelCostCurrencyUnit");

                    b.Navigation("WsproductImportFromExcelPriceCurrencyUnit");

                    b.Navigation("WsproductPrice");

                    b.Navigation("WstmpUserItemCopy");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdeliveryTime", b =>
                {
                    b.Navigation("WsdeliveryTimeLang");

                    b.Navigation("WspreOrder");

                    b.Navigation("WspreOrderDefaultSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Wsdoc", b =>
                {
                    b.Navigation("WsdocItems");

                    b.Navigation("WsdocLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdocItemSerials", b =>
                {
                    b.Navigation("WsdocItemSerialsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdocItems", b =>
                {
                    b.Navigation("WsdocItemSerials");

                    b.Navigation("WsdocItemsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsdocOpr", b =>
                {
                    b.Navigation("Wsdoc");

                    b.Navigation("WsdocOprLang");

                    b.Navigation("WsorderOpr");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsfinancialPeriod", b =>
                {
                    b.Navigation("WsbuyOrder");

                    b.Navigation("WsbuyOrderItems");

                    b.Navigation("WsbuyOrderItemSerials");

                    b.Navigation("WsbuyOrderPayments");

                    b.Navigation("WsbuyOrderPaymentTypes");

                    b.Navigation("WsbuyOrderStatus");

                    b.Navigation("WscreditDuration");

                    b.Navigation("WsdeliveryTime");

                    b.Navigation("Wsdoc");

                    b.Navigation("WsdocItems");

                    b.Navigation("WsdocItemSerials");

                    b.Navigation("Wsguaranty");

                    b.Navigation("WslinkedProducts");

                    b.Navigation("Wslogo");

                    b.Navigation("Wsorder");

                    b.Navigation("WsorderDefaultSetting");

                    b.Navigation("WsorderItems");

                    b.Navigation("WsorderItemSerials");

                    b.Navigation("WsorderPayments");

                    b.Navigation("WsorderPaymentTypes");

                    b.Navigation("WsorderStatus");

                    b.Navigation("WspayCondition");

                    b.Navigation("WspreOrder");

                    b.Navigation("WspreOrderDefaultSetting");

                    b.Navigation("WspreOrderItems");

                    b.Navigation("WspreOrderItemSpecification");

                    b.Navigation("WspreOrderOpr");

                    b.Navigation("WspreOrderPayments");

                    b.Navigation("WspreOrderPrdGroupMustExistReasons");

                    b.Navigation("WspreOrderStatus");

                    b.Navigation("WsproductCost");

                    b.Navigation("WsproductFirstGroup");

                    b.Navigation("WsproductGallery");

                    b.Navigation("WsproductPicture");

                    b.Navigation("WsproductPrice");

                    b.Navigation("Wsproducts");

                    b.Navigation("WsproductSecondGroup");

                    b.Navigation("WsproductShpStockManageTypes");

                    b.Navigation("WsproductSpecification");

                    b.Navigation("WsproductsRate");

                    b.Navigation("WsproductsUserDiscount");

                    b.Navigation("Wssignature");

                    b.Navigation("WsWareHouse");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Wsguaranty", b =>
                {
                    b.Navigation("WsguarantyLang");

                    b.Navigation("Wsorder");

                    b.Navigation("WsorderDefaultSetting");

                    b.Navigation("WspreOrder");

                    b.Navigation("WspreOrderDefaultSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Wslogo", b =>
                {
                    b.Navigation("WslogoLang");

                    b.Navigation("WsorderDefaultSettingLeftLogo");

                    b.Navigation("WsorderDefaultSettingRightLogo");

                    b.Navigation("WsorderOrdLlogo");

                    b.Navigation("WsorderOrdRlogo");

                    b.Navigation("WspreOrderDefaultSettingLeftLogo");

                    b.Navigation("WspreOrderDefaultSettingRightLogo");

                    b.Navigation("WspreOrderPordLlogo");

                    b.Navigation("WspreOrderPordRlogo");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Wsorder", b =>
                {
                    b.Navigation("Wsdoc");

                    b.Navigation("WsorderCommissions");

                    b.Navigation("WsorderItems");

                    b.Navigation("WsorderLang");

                    b.Navigation("WsorderPayments");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderCommissionPayTypes", b =>
                {
                    b.Navigation("WsorderCommissionPayTypesLang");

                    b.Navigation("WsorderCommissions");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderCommissions", b =>
                {
                    b.Navigation("WsorderCommissionsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderDefaultSetting", b =>
                {
                    b.Navigation("WsorderDefaultSettingLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderItemSerials", b =>
                {
                    b.Navigation("WsorderItemSerialsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderItems", b =>
                {
                    b.Navigation("WsorderItemSerials");

                    b.Navigation("WsorderItemsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderOpr", b =>
                {
                    b.Navigation("Wsorder");

                    b.Navigation("WsorderDefaultSetting");

                    b.Navigation("WsorderOprLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderPaymentTypes", b =>
                {
                    b.Navigation("WsorderPayments");

                    b.Navigation("WsorderPaymentTypesLang");

                    b.Navigation("WspreOrderPayments");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderPayments", b =>
                {
                    b.Navigation("WsorderPaymentsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsorderStatus", b =>
                {
                    b.Navigation("Wsorder");

                    b.Navigation("WsorderStatusLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspayCondition", b =>
                {
                    b.Navigation("WspayConditionLang");

                    b.Navigation("WspreOrder");

                    b.Navigation("WspreOrderDefaultSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrder", b =>
                {
                    b.Navigation("Wsorder");

                    b.Navigation("WspreOrderItems");

                    b.Navigation("WspreOrderLang");

                    b.Navigation("WspreOrderPayments");

                    b.Navigation("WspreOrderPrdGroupMustExistReasons");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderDefaultSetting", b =>
                {
                    b.Navigation("WspreOrderDefaultSettingLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderItems", b =>
                {
                    b.Navigation("WspreOrderItemsLang");

                    b.Navigation("WspreOrderItemSpecification");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderOpr", b =>
                {
                    b.Navigation("WspreOrder");

                    b.Navigation("WspreOrderDefaultSetting");

                    b.Navigation("WspreOrderOprLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPayments", b =>
                {
                    b.Navigation("WsorderPayments");

                    b.Navigation("WspreOrderPaymentsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPrdGroupMustExistReasonGroups", b =>
                {
                    b.Navigation("WspreOrderPrdGroupMustExistReasonGroupsLang");

                    b.Navigation("WspreOrderPrdGroupMustExistReasons");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderPrdGroupMustExistReasons", b =>
                {
                    b.Navigation("WspreOrderPrdGroupMustExistReasonsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WspreOrderStatus", b =>
                {
                    b.Navigation("WspreOrder");

                    b.Navigation("WspreOrderStatusLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductColor", b =>
                {
                    b.Navigation("WsproductColorLang");

                    b.Navigation("WsproductImportFromExcel");

                    b.Navigation("Wsproducts");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductCost", b =>
                {
                    b.Navigation("WsdocItems");

                    b.Navigation("WsproductCostLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductCostGroup", b =>
                {
                    b.Navigation("WsproductCost");

                    b.Navigation("WsproductCostGroupLang");

                    b.Navigation("WsproductImportFromExcel");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductFirstGroup", b =>
                {
                    b.Navigation("CrmCmsMenus");

                    b.Navigation("WspreOrderPrdGroupMustExistReasons");

                    b.Navigation("WsproductFirstGroupLang");

                    b.Navigation("WsproductSecondGroup");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductImportFromExcelFields", b =>
                {
                    b.Navigation("WsproductImportFromExcelFieldsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPicture", b =>
                {
                    b.Navigation("WsproductPictureLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPrice", b =>
                {
                    b.Navigation("WsproductPriceLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductPriceGroup", b =>
                {
                    b.Navigation("WsproductImportFromExcel");

                    b.Navigation("WsproductPrice");

                    b.Navigation("WsproductPriceGroupLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductSecondGroup", b =>
                {
                    b.Navigation("CrmCmsMenus");

                    b.Navigation("Wsproducts");

                    b.Navigation("WsproductSecondGroupLang");

                    b.Navigation("WsproductsUserDiscount");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductShpStockManageTypes", b =>
                {
                    b.Navigation("WsproductShpStockManageTypesLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductSpecification", b =>
                {
                    b.Navigation("WsproductSpecificationLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductUnits", b =>
                {
                    b.Navigation("WsbuyOrderItems");

                    b.Navigation("WsorderItems");

                    b.Navigation("WspreOrderItems");

                    b.Navigation("WsproductImportFromExcel");

                    b.Navigation("Wsproducts");

                    b.Navigation("WsproductUnitsLang");

                    b.Navigation("WstmpUserItemCopy");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Wsproducts", b =>
                {
                    b.Navigation("WsbuyOrderItems");

                    b.Navigation("WsdocItems");

                    b.Navigation("WslinkedProductsLinkedPrd");

                    b.Navigation("WslinkedProductsPrd");

                    b.Navigation("WsorderItems");

                    b.Navigation("WspreOrderItems");

                    b.Navigation("WsproductCost");

                    b.Navigation("WsproductGallery");

                    b.Navigation("WsproductPicture");

                    b.Navigation("WsproductPrice");

                    b.Navigation("WsproductsLang");

                    b.Navigation("WsproductSpecification");

                    b.Navigation("WsproductsRate");

                    b.Navigation("WsproductsUserDiscount");

                    b.Navigation("WstmpUserItemCopy");

                    b.Navigation("WsuserFavproductItems");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsproductsUserDiscount", b =>
                {
                    b.Navigation("WsproductsUserDiscountLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WssettlementType", b =>
                {
                    b.Navigation("Wsorder");

                    b.Navigation("WssettlementTypeLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.Wssignature", b =>
                {
                    b.Navigation("Wsorder");

                    b.Navigation("WsorderDefaultSetting");

                    b.Navigation("WspreOrder");

                    b.Navigation("WspreOrderDefaultSetting");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsuserFavproductItems", b =>
                {
                    b.Navigation("WsuserFavproductItemsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsuserFavproducts", b =>
                {
                    b.Navigation("WsuserFavproductItems");

                    b.Navigation("WsuserFavproductsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationRequestDetails", b =>
                {
                    b.Navigation("WsverificationRequestDetailsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationRequests", b =>
                {
                    b.Navigation("WsverificationRequestDetails");

                    b.Navigation("WsverificationRequestsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationWorkFlowSteps", b =>
                {
                    b.Navigation("WsverificationRequestDetails");

                    b.Navigation("WsverificationWorkFlowStepsLang");
                });

            modelBuilder.Entity("ParsaPoolad.Domain.Entities.IdealCrm.WsverificationWorkFlows", b =>
                {
                    b.Navigation("Wsorder");

                    b.Navigation("WspreOrder");

                    b.Navigation("WspreOrderDefaultSetting");

                    b.Navigation("WsverificationRequestDetails");

                    b.Navigation("WsverificationRequests");

                    b.Navigation("WsverificationWorkFlowsLang");

                    b.Navigation("WsverificationWorkFlowSteps");
                });
#pragma warning restore 612, 618
        }
    }
}
